
BFU1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000010a0  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000010a0  00001154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000008e  00800072  00800072  00001166  2**0
                  ALLOC
  3 .eeprom       0000000e  00810000  00810000  00001166  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000020  00000000  00000000  00001174  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000002f5  00000000  00000000  00001194  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000058b  00000000  00000000  00001489  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000144  00000000  00000000  00001a14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006f5  00000000  00000000  00001b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  00002250  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000027b  00000000  00000000  000022e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
       2:	2e c0       	rjmp	.+92     	; 0x60 <__bad_interrupt>
       4:	2d c0       	rjmp	.+90     	; 0x60 <__bad_interrupt>
       6:	2c c0       	rjmp	.+88     	; 0x60 <__bad_interrupt>
       8:	2b c0       	rjmp	.+86     	; 0x60 <__bad_interrupt>
       a:	30 c6       	rjmp	.+3168   	; 0xc6c <__vector_5>
       c:	29 c0       	rjmp	.+82     	; 0x60 <__bad_interrupt>
       e:	28 c0       	rjmp	.+80     	; 0x60 <__bad_interrupt>
      10:	b1 c6       	rjmp	.+3426   	; 0xd74 <__vector_8>
      12:	26 c0       	rjmp	.+76     	; 0x60 <__bad_interrupt>
      14:	25 c0       	rjmp	.+74     	; 0x60 <__bad_interrupt>
      16:	24 c0       	rjmp	.+72     	; 0x60 <__bad_interrupt>
      18:	23 c0       	rjmp	.+70     	; 0x60 <__bad_interrupt>
      1a:	22 c0       	rjmp	.+68     	; 0x60 <__bad_interrupt>
      1c:	48 c7       	rjmp	.+3728   	; 0xeae <__vector_14>
      1e:	20 c0       	rjmp	.+64     	; 0x60 <__bad_interrupt>
      20:	1f c0       	rjmp	.+62     	; 0x60 <__bad_interrupt>
      22:	1e c0       	rjmp	.+60     	; 0x60 <__bad_interrupt>
      24:	1d c0       	rjmp	.+58     	; 0x60 <__bad_interrupt>
      26:	1c c0       	rjmp	.+56     	; 0x60 <__bad_interrupt>
      28:	1b c0       	rjmp	.+54     	; 0x60 <__bad_interrupt>

0000002a <__ctors_end>:
      2a:	11 24       	eor	r1, r1
      2c:	1f be       	out	0x3f, r1	; 63
      2e:	cf e5       	ldi	r28, 0x5F	; 95
      30:	d2 e0       	ldi	r29, 0x02	; 2
      32:	de bf       	out	0x3e, r29	; 62
      34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_copy_data>:
      36:	10 e0       	ldi	r17, 0x00	; 0
      38:	a0 e6       	ldi	r26, 0x60	; 96
      3a:	b0 e0       	ldi	r27, 0x00	; 0
      3c:	e0 ea       	ldi	r30, 0xA0	; 160
      3e:	f0 e1       	ldi	r31, 0x10	; 16
      40:	02 c0       	rjmp	.+4      	; 0x46 <.do_copy_data_start>

00000042 <.do_copy_data_loop>:
      42:	05 90       	lpm	r0, Z+
      44:	0d 92       	st	X+, r0

00000046 <.do_copy_data_start>:
      46:	a2 37       	cpi	r26, 0x72	; 114
      48:	b1 07       	cpc	r27, r17
      4a:	d9 f7       	brne	.-10     	; 0x42 <.do_copy_data_loop>

0000004c <__do_clear_bss>:
      4c:	11 e0       	ldi	r17, 0x01	; 1
      4e:	a2 e7       	ldi	r26, 0x72	; 114
      50:	b0 e0       	ldi	r27, 0x00	; 0
      52:	01 c0       	rjmp	.+2      	; 0x56 <.do_clear_bss_start>

00000054 <.do_clear_bss_loop>:
      54:	1d 92       	st	X+, r1

00000056 <.do_clear_bss_start>:
      56:	a0 30       	cpi	r26, 0x00	; 0
      58:	b1 07       	cpc	r27, r17
      5a:	e1 f7       	brne	.-8      	; 0x54 <.do_clear_bss_loop>
      5c:	02 d0       	rcall	.+4      	; 0x62 <main>
      5e:	1e c8       	rjmp	.-4036   	; 0xfffff09c <__eeprom_end+0xff7ef08e>

00000060 <__bad_interrupt>:
      60:	cf cf       	rjmp	.-98     	; 0x0 <__vectors>

00000062 <main>:
#include "main.h"
/*==========================================================================================================================*/
/*                                                  Главная функция программы                                               */
/*==========================================================================================================================*/
int main(void)
{
      62:	0f 93       	push	r16
      64:	1f 93       	push	r17
      66:	df 93       	push	r29
      68:	cf 93       	push	r28
      6a:	00 d0       	rcall	.+0      	; 0x6c <main+0xa>
      6c:	00 d0       	rcall	.+0      	; 0x6e <main+0xc>
      6e:	0f 92       	push	r0
      70:	cd b7       	in	r28, 0x3d	; 61
      72:	de b7       	in	r29, 0x3e	; 62
  unsigned char j;

  DDRA  = 0;           //ALL inputs
      74:	ea e3       	ldi	r30, 0x3A	; 58
      76:	f0 e0       	ldi	r31, 0x00	; 0
      78:	10 82       	st	Z, r1
  PORTA = 0;
      7a:	eb e3       	ldi	r30, 0x3B	; 59
      7c:	f0 e0       	ldi	r31, 0x00	; 0
      7e:	10 82       	st	Z, r1

  DDRB  = 0xe3;        //SAVE, TOGGLE и MODE - входы
      80:	e7 e3       	ldi	r30, 0x37	; 55
      82:	f0 e0       	ldi	r31, 0x00	; 0
      84:	83 ee       	ldi	r24, 0xE3	; 227
      86:	80 83       	st	Z, r24
  PORTB = 0xff;
      88:	e8 e3       	ldi	r30, 0x38	; 56
      8a:	f0 e0       	ldi	r31, 0x00	; 0
      8c:	8f ef       	ldi	r24, 0xFF	; 255
      8e:	80 83       	st	Z, r24

  DDRC  = 0xff;
      90:	e4 e3       	ldi	r30, 0x34	; 52
      92:	f0 e0       	ldi	r31, 0x00	; 0
      94:	8f ef       	ldi	r24, 0xFF	; 255
      96:	80 83       	st	Z, r24
  PORTC = 0xff;
      98:	e5 e3       	ldi	r30, 0x35	; 53
      9a:	f0 e0       	ldi	r31, 0x00	; 0
      9c:	8f ef       	ldi	r24, 0xFF	; 255
      9e:	80 83       	st	Z, r24

  DDRD  = 0xbf;        //PD6 - Input
      a0:	e1 e3       	ldi	r30, 0x31	; 49
      a2:	f0 e0       	ldi	r31, 0x00	; 0
      a4:	8f eb       	ldi	r24, 0xBF	; 191
      a6:	80 83       	st	Z, r24
  PORTD = 0xff;        //transmit=off
      a8:	e2 e3       	ldi	r30, 0x32	; 50
      aa:	f0 e0       	ldi	r31, 0x00	; 0
      ac:	8f ef       	ldi	r24, 0xFF	; 255
      ae:	80 83       	st	Z, r24

  _WDR();
      b0:	a8 95       	wdr

  InitAd();
      b2:	08 d4       	rcall	.+2064   	; 0x8c4 <InitAd>
  ADCSRA |= (1<<ADIE); //enable AD interrupt
      b4:	a6 e2       	ldi	r26, 0x26	; 38
      b6:	b0 e0       	ldi	r27, 0x00	; 0
      b8:	e6 e2       	ldi	r30, 0x26	; 38
      ba:	f0 e0       	ldi	r31, 0x00	; 0
      bc:	80 81       	ld	r24, Z
      be:	88 60       	ori	r24, 0x08	; 8
      c0:	8c 93       	st	X, r24
  sei();               //enable global interrupt
      c2:	78 94       	sei
 
  SPCR = 0;            //disable SPI
      c4:	ed e2       	ldi	r30, 0x2D	; 45
      c6:	f0 e0       	ldi	r31, 0x00	; 0
      c8:	10 82       	st	Z, r1
  SPSR = 0;            
      ca:	ee e2       	ldi	r30, 0x2E	; 46
      cc:	f0 e0       	ldi	r31, 0x00	; 0
      ce:	10 82       	st	Z, r1

  TIMSK = TIMSK|0x20; //разрешение прерывания по событию «Захват» таймера/счетчика T1
      d0:	a9 e5       	ldi	r26, 0x59	; 89
      d2:	b0 e0       	ldi	r27, 0x00	; 0
      d4:	e9 e5       	ldi	r30, 0x59	; 89
      d6:	f0 e0       	ldi	r31, 0x00	; 0
      d8:	80 81       	ld	r24, Z
      da:	80 62       	ori	r24, 0x20	; 32
      dc:	8c 93       	st	X, r24
  TCCR1B = 0xc1;      //ICNC1 = 1 схема подавления помех включена и захват осуществляется только в случае 4-х одинаковых
      de:	ee e4       	ldi	r30, 0x4E	; 78
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	81 ec       	ldi	r24, 0xC1	; 193
      e4:	80 83       	st	Z, r24
                      // выборок, соответствующих активному фронту сигнала
                      //ICES1 = 1 cохранение счетного регистра в регистре захвата осуществляется по нарастающему фронту сигнала
                      //CS10  = 1 нет предделения тактовой частоты контроллера для тактирования Т1, 0.125мкс
  TIMSK = TIMSK|0x4;  //разрешение прерывания по переполнению таймера/счетчика T1
      e6:	a9 e5       	ldi	r26, 0x59	; 89
      e8:	b0 e0       	ldi	r27, 0x00	; 0
      ea:	e9 e5       	ldi	r30, 0x59	; 89
      ec:	f0 e0       	ldi	r31, 0x00	; 0
      ee:	80 81       	ld	r24, Z
      f0:	84 60       	ori	r24, 0x04	; 4
      f2:	8c 93       	st	X, r24

  Dt4_8 = Dt4_30 = Dt4_37 = Dt5_37 = Dt5_95 = Dt5_118 = Dt6_115 = Dd1_1 = Dd1_4 = Nd_500 = Nd_1450 = Nd_1750 = 0;
      f4:	10 92 85 00 	sts	0x0085, r1
      f8:	80 91 85 00 	lds	r24, 0x0085
      fc:	80 93 bc 00 	sts	0x00BC, r24
     100:	80 91 bc 00 	lds	r24, 0x00BC
     104:	80 93 ff 00 	sts	0x00FF, r24
     108:	80 91 ff 00 	lds	r24, 0x00FF
     10c:	80 93 89 00 	sts	0x0089, r24
     110:	80 91 89 00 	lds	r24, 0x0089
     114:	80 93 7d 00 	sts	0x007D, r24
     118:	80 91 7d 00 	lds	r24, 0x007D
     11c:	80 93 76 00 	sts	0x0076, r24
     120:	80 91 76 00 	lds	r24, 0x0076
     124:	80 93 d8 00 	sts	0x00D8, r24
     128:	80 91 d8 00 	lds	r24, 0x00D8
     12c:	80 93 b1 00 	sts	0x00B1, r24
     130:	80 91 b1 00 	lds	r24, 0x00B1
     134:	80 93 b4 00 	sts	0x00B4, r24
     138:	80 91 b4 00 	lds	r24, 0x00B4
     13c:	80 93 81 00 	sts	0x0081, r24
     140:	80 91 81 00 	lds	r24, 0x0081
     144:	80 93 8b 00 	sts	0x008B, r24
     148:	80 91 8b 00 	lds	r24, 0x008B
     14c:	80 93 d7 00 	sts	0x00D7, r24
  for (j=0; j<7; j++) { array[j] = 0; from_ee[j] = 0;}
     150:	1a 82       	std	Y+2, r1	; 0x02
     152:	17 c0       	rjmp	.+46     	; 0x182 <main+0x120>
     154:	8a 81       	ldd	r24, Y+2	; 0x02
     156:	88 2f       	mov	r24, r24
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	88 0f       	add	r24, r24
     15c:	99 1f       	adc	r25, r25
     15e:	fc 01       	movw	r30, r24
     160:	ea 53       	subi	r30, 0x3A	; 58
     162:	ff 4f       	sbci	r31, 0xFF	; 255
     164:	11 82       	std	Z+1, r1	; 0x01
     166:	10 82       	st	Z, r1
     168:	8a 81       	ldd	r24, Y+2	; 0x02
     16a:	88 2f       	mov	r24, r24
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	88 0f       	add	r24, r24
     170:	99 1f       	adc	r25, r25
     172:	fc 01       	movw	r30, r24
     174:	e7 52       	subi	r30, 0x27	; 39
     176:	ff 4f       	sbci	r31, 0xFF	; 255
     178:	11 82       	std	Z+1, r1	; 0x01
     17a:	10 82       	st	Z, r1
     17c:	8a 81       	ldd	r24, Y+2	; 0x02
     17e:	8f 5f       	subi	r24, 0xFF	; 255
     180:	8a 83       	std	Y+2, r24	; 0x02
     182:	8a 81       	ldd	r24, Y+2	; 0x02
     184:	87 30       	cpi	r24, 0x07	; 7
     186:	30 f3       	brcs	.-52     	; 0x154 <main+0xf2>

  NDiz=0;
     188:	10 92 b8 00 	sts	0x00B8, r1
     18c:	10 92 b7 00 	sts	0x00B7, r1
  CtTDiz=15;
     190:	8f e0       	ldi	r24, 0x0F	; 15
     192:	80 93 84 00 	sts	0x0084, r24
  InvCounter=0;
     196:	10 92 7e 00 	sts	0x007E, r1
  RegWait=30000;       //старое значение - 300 //Вернуть!!
     19a:	80 e3       	ldi	r24, 0x30	; 48
     19c:	95 e7       	ldi	r25, 0x75	; 117
     19e:	90 93 b0 00 	sts	0x00B0, r25
     1a2:	80 93 af 00 	sts	0x00AF, r24
     1a6:	01 c0       	rjmp	.+2      	; 0x1aa <main+0x148>
  while (RegWait--)

  _WDR();
     1a8:	a8 95       	wdr

  NDiz=0;
  CtTDiz=15;
  InvCounter=0;
  RegWait=30000;       //старое значение - 300 //Вернуть!!
  while (RegWait--)
     1aa:	80 91 af 00 	lds	r24, 0x00AF
     1ae:	90 91 b0 00 	lds	r25, 0x00B0
     1b2:	9d 83       	std	Y+5, r25	; 0x05
     1b4:	8c 83       	std	Y+4, r24	; 0x04
     1b6:	1b 82       	std	Y+3, r1	; 0x03
     1b8:	8c 81       	ldd	r24, Y+4	; 0x04
     1ba:	9d 81       	ldd	r25, Y+5	; 0x05
     1bc:	00 97       	sbiw	r24, 0x00	; 0
     1be:	11 f0       	breq	.+4      	; 0x1c4 <main+0x162>
     1c0:	91 e0       	ldi	r25, 0x01	; 1
     1c2:	9b 83       	std	Y+3, r25	; 0x03
     1c4:	8c 81       	ldd	r24, Y+4	; 0x04
     1c6:	9d 81       	ldd	r25, Y+5	; 0x05
     1c8:	01 97       	sbiw	r24, 0x01	; 1
     1ca:	90 93 b0 00 	sts	0x00B0, r25
     1ce:	80 93 af 00 	sts	0x00AF, r24
     1d2:	2b 81       	ldd	r18, Y+3	; 0x03
     1d4:	22 23       	and	r18, r18
     1d6:	41 f7       	brne	.-48     	; 0x1a8 <main+0x146>

  _WDR();

  mask_leds_c = 0x00;                    //PORT C.X в обычном режиме работы светодиоды не "моргают"
     1d8:	10 92 b5 00 	sts	0x00B5, r1
  mask_leds_d = 0x00;                    //PORT D.X
     1dc:	10 92 74 00 	sts	0x0074, r1
  
  if (PINB & (1<<MODE))   mode = 1;      //выбор режима работы
     1e0:	e6 e3       	ldi	r30, 0x36	; 54
     1e2:	f0 e0       	ldi	r31, 0x00	; 0
     1e4:	80 81       	ld	r24, Z
     1e6:	88 2f       	mov	r24, r24
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	80 71       	andi	r24, 0x10	; 16
     1ec:	90 70       	andi	r25, 0x00	; 0
     1ee:	00 97       	sbiw	r24, 0x00	; 0
     1f0:	21 f0       	breq	.+8      	; 0x1fa <main+0x198>
     1f2:	81 e0       	ldi	r24, 0x01	; 1
     1f4:	80 93 ad 00 	sts	0x00AD, r24
     1f8:	02 c0       	rjmp	.+4      	; 0x1fe <main+0x19c>
  else                    mode = 0;
     1fa:	10 92 ad 00 	sts	0x00AD, r1

  if(!mode)                              //работа в режиме калибровки
     1fe:	80 91 ad 00 	lds	r24, 0x00AD
     202:	88 23       	and	r24, r24
     204:	09 f0       	breq	.+2      	; 0x208 <main+0x1a6>
     206:	ba c0       	rjmp	.+372    	; 0x37c <__stack+0x11d>
  {
    //инициализация переменных функции калибровки:
    Key_Inp = KEY_EMPTY;                 //кнопка не нажата
     208:	10 92 8a 00 	sts	0x008A, r1
    timer_250 = RELOAD;                  //начало нового цикла индикации длительностью 250 мс
     20c:	8f e1       	ldi	r24, 0x1F	; 31
     20e:	80 93 ba 00 	sts	0x00BA, r24
    count_channel = 0;                   //счёт начинается с 0-го канала
     212:	10 92 bf 00 	sts	0x00BF, r1
     216:	10 92 be 00 	sts	0x00BE, r1
    const_write_ok = 0;                  //записи констант не было
     21a:	10 92 79 00 	sts	0x0079, r1
    mask_leds_c = 0x00;                  //PORT C.X при входе в режим программирования "моргает" 0-й канал
     21e:	10 92 b5 00 	sts	0x00B5, r1
    mask_leds_d = 0x20;                  //PORT D.5
     222:	80 e2       	ldi	r24, 0x20	; 32
     224:	80 93 74 00 	sts	0x0074, r24

    while (1)
    {
      _WDR();
     228:	a8 95       	wdr

      AccountADC();
     22a:	1e d4       	rcall	.+2108   	; 0xa68 <AccountADC>

      //Dt4=444; Dt5=555; Dt6=666;


      //алгоритм переключения индикации без записи в EEPROM
      if(Key_Inp == KEY_BT)                                                        //если нажата кнопка "переключить канал"            
     22c:	80 91 8a 00 	lds	r24, 0x008A
     230:	84 30       	cpi	r24, 0x04	; 4
     232:	b9 f4       	brne	.+46     	; 0x262 <__stack+0x3>
      {
        switch_channel(count_channel);                                             //переключение индикации и запись оцифрованного значения датчика в ОЗУ
     234:	80 91 be 00 	lds	r24, 0x00BE
     238:	90 91 bf 00 	lds	r25, 0x00BF
     23c:	3c d4       	rcall	.+2168   	; 0xab6 <switch_channel>

        if(count_channel < 7)
     23e:	80 91 be 00 	lds	r24, 0x00BE
     242:	90 91 bf 00 	lds	r25, 0x00BF
     246:	87 30       	cpi	r24, 0x07	; 7
     248:	91 05       	cpc	r25, r1
     24a:	48 f4       	brcc	.+18     	; 0x25e <main+0x1fc>
          count_channel++;                                                         //переключение на следующий канал
     24c:	80 91 be 00 	lds	r24, 0x00BE
     250:	90 91 bf 00 	lds	r25, 0x00BF
     254:	01 96       	adiw	r24, 0x01	; 1
     256:	90 93 bf 00 	sts	0x00BF, r25
     25a:	80 93 be 00 	sts	0x00BE, r24
      
        Key_Inp=KEY_EMPTY;                                                         //установить флаг кнопка не нажата
     25e:	10 92 8a 00 	sts	0x008A, r1
      }

      //Key_Inp = KEY_BS;

      //алгоритм записи и проверки записи калибровочных констант в EEPROM
      if(Key_Inp == KEY_BS)              //если нажата кнопка "сохранить константу"            
     262:	80 91 8a 00 	lds	r24, 0x008A
     266:	88 30       	cpi	r24, 0x08	; 8
     268:	f9 f6       	brne	.-66     	; 0x228 <main+0x1c6>
      {
        switch_channel(count_channel);                                             //переключение индикации и запись оцифрованного значения датчика в ОЗУ              
     26a:	80 91 be 00 	lds	r24, 0x00BE
     26e:	90 91 bf 00 	lds	r25, 0x00BF
     272:	21 d4       	rcall	.+2114   	; 0xab6 <switch_channel>

        if(count_channel < 7)
     274:	80 91 be 00 	lds	r24, 0x00BE
     278:	90 91 bf 00 	lds	r25, 0x00BF
     27c:	87 30       	cpi	r24, 0x07	; 7
     27e:	91 05       	cpc	r25, r1
     280:	08 f0       	brcs	.+2      	; 0x284 <__stack+0x25>
     282:	79 c0       	rjmp	.+242    	; 0x376 <__stack+0x117>
        {
           eeprom_busy_wait();
     284:	ec e3       	ldi	r30, 0x3C	; 60
     286:	f0 e0       	ldi	r31, 0x00	; 0
     288:	80 81       	ld	r24, Z
     28a:	88 2f       	mov	r24, r24
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	82 70       	andi	r24, 0x02	; 2
     290:	90 70       	andi	r25, 0x00	; 0
     292:	00 97       	sbiw	r24, 0x00	; 0
     294:	b9 f7       	brne	.-18     	; 0x284 <__stack+0x25>
           eeprom_update_word(ADDRESS_VIA_POINTER, array[count_channel]);          //записать калибровочную константу, если значение другое
     296:	80 91 be 00 	lds	r24, 0x00BE
     29a:	90 91 bf 00 	lds	r25, 0x00BF
     29e:	88 0f       	add	r24, r24
     2a0:	99 1f       	adc	r25, r25
     2a2:	ac 01       	movw	r20, r24
     2a4:	80 91 be 00 	lds	r24, 0x00BE
     2a8:	90 91 bf 00 	lds	r25, 0x00BF
     2ac:	88 0f       	add	r24, r24
     2ae:	99 1f       	adc	r25, r25
     2b0:	fc 01       	movw	r30, r24
     2b2:	ea 53       	subi	r30, 0x3A	; 58
     2b4:	ff 4f       	sbci	r31, 0xFF	; 255
     2b6:	20 81       	ld	r18, Z
     2b8:	31 81       	ldd	r19, Z+1	; 0x01
     2ba:	ca 01       	movw	r24, r20
     2bc:	b9 01       	movw	r22, r18
     2be:	c9 d6       	rcall	.+3474   	; 0x1052 <__eeupd_word_m8535>
           eeprom_busy_wait();
     2c0:	ec e3       	ldi	r30, 0x3C	; 60
     2c2:	f0 e0       	ldi	r31, 0x00	; 0
     2c4:	80 81       	ld	r24, Z
     2c6:	88 2f       	mov	r24, r24
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	82 70       	andi	r24, 0x02	; 2
     2cc:	90 70       	andi	r25, 0x00	; 0
     2ce:	00 97       	sbiw	r24, 0x00	; 0
     2d0:	b9 f7       	brne	.-18     	; 0x2c0 <__stack+0x61>
           from_ee[count_channel] = eeprom_read_word(ADDRESS_VIA_POINTER);         //считать записанное значение для проверки
     2d2:	00 91 be 00 	lds	r16, 0x00BE
     2d6:	10 91 bf 00 	lds	r17, 0x00BF
     2da:	80 91 be 00 	lds	r24, 0x00BE
     2de:	90 91 bf 00 	lds	r25, 0x00BF
     2e2:	88 0f       	add	r24, r24
     2e4:	99 1f       	adc	r25, r25
     2e6:	b0 d6       	rcall	.+3424   	; 0x1048 <__eerd_word_m8535>
     2e8:	9c 01       	movw	r18, r24
     2ea:	c8 01       	movw	r24, r16
     2ec:	88 0f       	add	r24, r24
     2ee:	99 1f       	adc	r25, r25
     2f0:	fc 01       	movw	r30, r24
     2f2:	e7 52       	subi	r30, 0x27	; 39
     2f4:	ff 4f       	sbci	r31, 0xFF	; 255
     2f6:	31 83       	std	Z+1, r19	; 0x01
     2f8:	20 83       	st	Z, r18

           //проверка успешной записи
           if((from_ee[count_channel] == array[count_channel])&&(from_ee[count_channel] != 0xFFFF)&&(from_ee[count_channel] != 0x0))
     2fa:	80 91 be 00 	lds	r24, 0x00BE
     2fe:	90 91 bf 00 	lds	r25, 0x00BF
     302:	88 0f       	add	r24, r24
     304:	99 1f       	adc	r25, r25
     306:	fc 01       	movw	r30, r24
     308:	e7 52       	subi	r30, 0x27	; 39
     30a:	ff 4f       	sbci	r31, 0xFF	; 255
     30c:	20 81       	ld	r18, Z
     30e:	31 81       	ldd	r19, Z+1	; 0x01
     310:	80 91 be 00 	lds	r24, 0x00BE
     314:	90 91 bf 00 	lds	r25, 0x00BF
     318:	88 0f       	add	r24, r24
     31a:	99 1f       	adc	r25, r25
     31c:	fc 01       	movw	r30, r24
     31e:	ea 53       	subi	r30, 0x3A	; 58
     320:	ff 4f       	sbci	r31, 0xFF	; 255
     322:	80 81       	ld	r24, Z
     324:	91 81       	ldd	r25, Z+1	; 0x01
     326:	28 17       	cp	r18, r24
     328:	39 07       	cpc	r19, r25
     32a:	29 f5       	brne	.+74     	; 0x376 <__stack+0x117>
     32c:	80 91 be 00 	lds	r24, 0x00BE
     330:	90 91 bf 00 	lds	r25, 0x00BF
     334:	88 0f       	add	r24, r24
     336:	99 1f       	adc	r25, r25
     338:	fc 01       	movw	r30, r24
     33a:	e7 52       	subi	r30, 0x27	; 39
     33c:	ff 4f       	sbci	r31, 0xFF	; 255
     33e:	80 81       	ld	r24, Z
     340:	91 81       	ldd	r25, Z+1	; 0x01
     342:	2f ef       	ldi	r18, 0xFF	; 255
     344:	8f 3f       	cpi	r24, 0xFF	; 255
     346:	92 07       	cpc	r25, r18
     348:	b1 f0       	breq	.+44     	; 0x376 <__stack+0x117>
     34a:	80 91 be 00 	lds	r24, 0x00BE
     34e:	90 91 bf 00 	lds	r25, 0x00BF
     352:	88 0f       	add	r24, r24
     354:	99 1f       	adc	r25, r25
     356:	fc 01       	movw	r30, r24
     358:	e7 52       	subi	r30, 0x27	; 39
     35a:	ff 4f       	sbci	r31, 0xFF	; 255
     35c:	80 81       	ld	r24, Z
     35e:	91 81       	ldd	r25, Z+1	; 0x01
     360:	00 97       	sbiw	r24, 0x00	; 0
     362:	49 f0       	breq	.+18     	; 0x376 <__stack+0x117>
             count_channel++;                                                      //переключение на следующий канал
     364:	80 91 be 00 	lds	r24, 0x00BE
     368:	90 91 bf 00 	lds	r25, 0x00BF
     36c:	01 96       	adiw	r24, 0x01	; 1
     36e:	90 93 bf 00 	sts	0x00BF, r25
     372:	80 93 be 00 	sts	0x00BE, r24
        }
       Key_Inp=KEY_EMPTY;                                                          //установить флаг кнопка не нажата
     376:	10 92 8a 00 	sts	0x008A, r1
     37a:	56 cf       	rjmp	.-340    	; 0x228 <main+0x1c6>
 else     //обычный режим работы     
  {
    unsigned char i;
    
    //алгоритм проверки наличия констант в EEPROM (при первом включении) и записи констант в ОЗУ
    for (i=0; i<6; i++)                 
     37c:	19 82       	std	Y+1, r1	; 0x01
     37e:	20 c0       	rjmp	.+64     	; 0x3c0 <__stack+0x161>
    {
      eeprom_busy_wait();
     380:	ec e3       	ldi	r30, 0x3C	; 60
     382:	f0 e0       	ldi	r31, 0x00	; 0
     384:	80 81       	ld	r24, Z
     386:	88 2f       	mov	r24, r24
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	82 70       	andi	r24, 0x02	; 2
     38c:	90 70       	andi	r25, 0x00	; 0
     38e:	00 97       	sbiw	r24, 0x00	; 0
     390:	b9 f7       	brne	.-18     	; 0x380 <__stack+0x121>
      array[i] = eeprom_read_word(ADDRESS_VIA_EEMEM);       //считывание массива уставок из EEPROM в ОЗУ
     392:	89 81       	ldd	r24, Y+1	; 0x01
     394:	08 2f       	mov	r16, r24
     396:	10 e0       	ldi	r17, 0x00	; 0
     398:	89 81       	ldd	r24, Y+1	; 0x01
     39a:	88 2f       	mov	r24, r24
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	88 0f       	add	r24, r24
     3a0:	99 1f       	adc	r25, r25
     3a2:	80 50       	subi	r24, 0x00	; 0
     3a4:	90 40       	sbci	r25, 0x00	; 0
     3a6:	50 d6       	rcall	.+3232   	; 0x1048 <__eerd_word_m8535>
     3a8:	9c 01       	movw	r18, r24
     3aa:	c8 01       	movw	r24, r16
     3ac:	88 0f       	add	r24, r24
     3ae:	99 1f       	adc	r25, r25
     3b0:	fc 01       	movw	r30, r24
     3b2:	ea 53       	subi	r30, 0x3A	; 58
     3b4:	ff 4f       	sbci	r31, 0xFF	; 255
     3b6:	31 83       	std	Z+1, r19	; 0x01
     3b8:	20 83       	st	Z, r18
 else     //обычный режим работы     
  {
    unsigned char i;
    
    //алгоритм проверки наличия констант в EEPROM (при первом включении) и записи констант в ОЗУ
    for (i=0; i<6; i++)                 
     3ba:	89 81       	ldd	r24, Y+1	; 0x01
     3bc:	8f 5f       	subi	r24, 0xFF	; 255
     3be:	89 83       	std	Y+1, r24	; 0x01
     3c0:	89 81       	ldd	r24, Y+1	; 0x01
     3c2:	86 30       	cpi	r24, 0x06	; 6
     3c4:	e8 f2       	brcs	.-70     	; 0x380 <__stack+0x121>
      }*/
    }
    /*Work program*/
    while (1)
    {
      _WDR();
     3c6:	a8 95       	wdr
      AccountADC();
     3c8:	4f d3       	rcall	.+1694   	; 0xa68 <AccountADC>
      AccountNDiz();
     3ca:	a4 d2       	rcall	.+1352   	; 0x914 <AccountNDiz>
      Если значение датчика температуры стало больше или равно 8'С, учитывая гистерезис и флаг датчика 4 по порогу 8 был сброшен
      (означает, что значение датчика температуры было до этого меньше 8'С), то установить флаг датчика 4 по порогу 8 (означает
      превышение порога 8).
      Если значение датчика температуры стало меньше 8'С и флаг датчика 4 по порогу 8 был установлен, то флаг сбросить.
*/
      if ((Dt4<=array[0]-Hyst_t)&&(!Dt4_8))       Dt4_8=1;   //выше 9.5 градусов направление срабатывания - вверх
     3cc:	80 91 c6 00 	lds	r24, 0x00C6
     3d0:	90 91 c7 00 	lds	r25, 0x00C7
     3d4:	9c 01       	movw	r18, r24
     3d6:	2a 50       	subi	r18, 0x0A	; 10
     3d8:	30 40       	sbci	r19, 0x00	; 0
     3da:	80 91 d4 00 	lds	r24, 0x00D4
     3de:	90 91 d5 00 	lds	r25, 0x00D5
     3e2:	28 17       	cp	r18, r24
     3e4:	39 07       	cpc	r19, r25
     3e6:	38 f0       	brcs	.+14     	; 0x3f6 <__stack+0x197>
     3e8:	80 91 d7 00 	lds	r24, 0x00D7
     3ec:	88 23       	and	r24, r24
     3ee:	19 f4       	brne	.+6      	; 0x3f6 <__stack+0x197>
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	80 93 d7 00 	sts	0x00D7, r24
      if ((Dt4>array[0])&&(Dt4_8))                Dt4_8=0;   //ниже 8 градусов
     3f6:	20 91 c6 00 	lds	r18, 0x00C6
     3fa:	30 91 c7 00 	lds	r19, 0x00C7
     3fe:	80 91 d4 00 	lds	r24, 0x00D4
     402:	90 91 d5 00 	lds	r25, 0x00D5
     406:	28 17       	cp	r18, r24
     408:	39 07       	cpc	r19, r25
     40a:	30 f4       	brcc	.+12     	; 0x418 <__stack+0x1b9>
     40c:	80 91 d7 00 	lds	r24, 0x00D7
     410:	88 23       	and	r24, r24
     412:	11 f0       	breq	.+4      	; 0x418 <__stack+0x1b9>
     414:	10 92 d7 00 	sts	0x00D7, r1

      if ((Dt4<=(array[1]-Hyst_t))&&(!Dt4_30))    Dt4_30=1;  //выше 31.25 градусов
     418:	80 91 c8 00 	lds	r24, 0x00C8
     41c:	90 91 c9 00 	lds	r25, 0x00C9
     420:	9c 01       	movw	r18, r24
     422:	2a 50       	subi	r18, 0x0A	; 10
     424:	30 40       	sbci	r19, 0x00	; 0
     426:	80 91 d4 00 	lds	r24, 0x00D4
     42a:	90 91 d5 00 	lds	r25, 0x00D5
     42e:	28 17       	cp	r18, r24
     430:	39 07       	cpc	r19, r25
     432:	38 f0       	brcs	.+14     	; 0x442 <__stack+0x1e3>
     434:	80 91 8b 00 	lds	r24, 0x008B
     438:	88 23       	and	r24, r24
     43a:	19 f4       	brne	.+6      	; 0x442 <__stack+0x1e3>
     43c:	81 e0       	ldi	r24, 0x01	; 1
     43e:	80 93 8b 00 	sts	0x008B, r24
      if ((Dt4>array[1])&&(Dt4_30))               Dt4_30=0;  //ниже 30 градусов - гистерезис направление срабатывания - вверх
     442:	20 91 c8 00 	lds	r18, 0x00C8
     446:	30 91 c9 00 	lds	r19, 0x00C9
     44a:	80 91 d4 00 	lds	r24, 0x00D4
     44e:	90 91 d5 00 	lds	r25, 0x00D5
     452:	28 17       	cp	r18, r24
     454:	39 07       	cpc	r19, r25
     456:	30 f4       	brcc	.+12     	; 0x464 <__stack+0x205>
     458:	80 91 8b 00 	lds	r24, 0x008B
     45c:	88 23       	and	r24, r24
     45e:	11 f0       	breq	.+4      	; 0x464 <__stack+0x205>
     460:	10 92 8b 00 	sts	0x008B, r1

      if ((Dt4<=array[2])&&(!Dt4_37))             Dt4_37=1;  //выше 37.0 градусов
     464:	20 91 ca 00 	lds	r18, 0x00CA
     468:	30 91 cb 00 	lds	r19, 0x00CB
     46c:	80 91 d4 00 	lds	r24, 0x00D4
     470:	90 91 d5 00 	lds	r25, 0x00D5
     474:	28 17       	cp	r18, r24
     476:	39 07       	cpc	r19, r25
     478:	38 f0       	brcs	.+14     	; 0x488 <__stack+0x229>
     47a:	80 91 81 00 	lds	r24, 0x0081
     47e:	88 23       	and	r24, r24
     480:	19 f4       	brne	.+6      	; 0x488 <__stack+0x229>
     482:	81 e0       	ldi	r24, 0x01	; 1
     484:	80 93 81 00 	sts	0x0081, r24
      if ((Dt4>(array[2]+Hyst_t))&&(Dt4_37))      Dt4_37=0;  //ниже 36,8 градусов направление срабатывания - вниз
     488:	80 91 ca 00 	lds	r24, 0x00CA
     48c:	90 91 cb 00 	lds	r25, 0x00CB
     490:	9c 01       	movw	r18, r24
     492:	26 5f       	subi	r18, 0xF6	; 246
     494:	3f 4f       	sbci	r19, 0xFF	; 255
     496:	80 91 d4 00 	lds	r24, 0x00D4
     49a:	90 91 d5 00 	lds	r25, 0x00D5
     49e:	28 17       	cp	r18, r24
     4a0:	39 07       	cpc	r19, r25
     4a2:	30 f4       	brcc	.+12     	; 0x4b0 <__stack+0x251>
     4a4:	80 91 81 00 	lds	r24, 0x0081
     4a8:	88 23       	and	r24, r24
     4aa:	11 f0       	breq	.+4      	; 0x4b0 <__stack+0x251>
     4ac:	10 92 81 00 	sts	0x0081, r1

      if ((Dt5<=array[3]-(Hyst_t+20))&&(!Dt5_37)) Dt5_37=1;  //выше 44.5 градусов
     4b0:	80 91 cc 00 	lds	r24, 0x00CC
     4b4:	90 91 cd 00 	lds	r25, 0x00CD
     4b8:	9c 01       	movw	r18, r24
     4ba:	2e 51       	subi	r18, 0x1E	; 30
     4bc:	30 40       	sbci	r19, 0x00	; 0
     4be:	80 91 7b 00 	lds	r24, 0x007B
     4c2:	90 91 7c 00 	lds	r25, 0x007C
     4c6:	28 17       	cp	r18, r24
     4c8:	39 07       	cpc	r19, r25
     4ca:	38 f0       	brcs	.+14     	; 0x4da <__stack+0x27b>
     4cc:	80 91 b4 00 	lds	r24, 0x00B4
     4d0:	88 23       	and	r24, r24
     4d2:	19 f4       	brne	.+6      	; 0x4da <__stack+0x27b>
     4d4:	81 e0       	ldi	r24, 0x01	; 1
     4d6:	80 93 b4 00 	sts	0x00B4, r24
      if ((Dt5>array[3])&&(Dt5_37))               Dt5_37=0;  //ниже 37 градусов направление срабатывания - вверх
     4da:	20 91 cc 00 	lds	r18, 0x00CC
     4de:	30 91 cd 00 	lds	r19, 0x00CD
     4e2:	80 91 7b 00 	lds	r24, 0x007B
     4e6:	90 91 7c 00 	lds	r25, 0x007C
     4ea:	28 17       	cp	r18, r24
     4ec:	39 07       	cpc	r19, r25
     4ee:	30 f4       	brcc	.+12     	; 0x4fc <__stack+0x29d>
     4f0:	80 91 b4 00 	lds	r24, 0x00B4
     4f4:	88 23       	and	r24, r24
     4f6:	11 f0       	breq	.+4      	; 0x4fc <__stack+0x29d>
     4f8:	10 92 b4 00 	sts	0x00B4, r1

      if ((Dt5<=array[4])&&(!Dt5_95))             Dt5_95=1;  //выше 95 градусов
     4fc:	20 91 ce 00 	lds	r18, 0x00CE
     500:	30 91 cf 00 	lds	r19, 0x00CF
     504:	80 91 7b 00 	lds	r24, 0x007B
     508:	90 91 7c 00 	lds	r25, 0x007C
     50c:	28 17       	cp	r18, r24
     50e:	39 07       	cpc	r19, r25
     510:	38 f0       	brcs	.+14     	; 0x520 <__stack+0x2c1>
     512:	80 91 b1 00 	lds	r24, 0x00B1
     516:	88 23       	and	r24, r24
     518:	19 f4       	brne	.+6      	; 0x520 <__stack+0x2c1>
     51a:	81 e0       	ldi	r24, 0x01	; 1
     51c:	80 93 b1 00 	sts	0x00B1, r24
      if ((Dt5>(array[4]+Hyst_t))&&(Dt5_95))      Dt5_95=0;  //ниже 93.5 градусов направление срабатывания - вверх
     520:	80 91 ce 00 	lds	r24, 0x00CE
     524:	90 91 cf 00 	lds	r25, 0x00CF
     528:	9c 01       	movw	r18, r24
     52a:	26 5f       	subi	r18, 0xF6	; 246
     52c:	3f 4f       	sbci	r19, 0xFF	; 255
     52e:	80 91 7b 00 	lds	r24, 0x007B
     532:	90 91 7c 00 	lds	r25, 0x007C
     536:	28 17       	cp	r18, r24
     538:	39 07       	cpc	r19, r25
     53a:	30 f4       	brcc	.+12     	; 0x548 <__stack+0x2e9>
     53c:	80 91 b1 00 	lds	r24, 0x00B1
     540:	88 23       	and	r24, r24
     542:	11 f0       	breq	.+4      	; 0x548 <__stack+0x2e9>
     544:	10 92 b1 00 	sts	0x00B1, r1

      if ((Dt6<=array[5])&&(!Dt6_115))            Dt6_115=1; //выше 115 градусов
     548:	20 91 d0 00 	lds	r18, 0x00D0
     54c:	30 91 d1 00 	lds	r19, 0x00D1
     550:	80 91 82 00 	lds	r24, 0x0082
     554:	90 91 83 00 	lds	r25, 0x0083
     558:	28 17       	cp	r18, r24
     55a:	39 07       	cpc	r19, r25
     55c:	38 f0       	brcs	.+14     	; 0x56c <__stack+0x30d>
     55e:	80 91 76 00 	lds	r24, 0x0076
     562:	88 23       	and	r24, r24
     564:	19 f4       	brne	.+6      	; 0x56c <__stack+0x30d>
     566:	81 e0       	ldi	r24, 0x01	; 1
     568:	80 93 76 00 	sts	0x0076, r24
      if ((Dt6>(array[5]+Hyst_t))&&(Dt6_115))     Dt6_115=0; //ниже 113.5 градусов направление срабатывания - вверх
     56c:	80 91 d0 00 	lds	r24, 0x00D0
     570:	90 91 d1 00 	lds	r25, 0x00D1
     574:	9c 01       	movw	r18, r24
     576:	26 5f       	subi	r18, 0xF6	; 246
     578:	3f 4f       	sbci	r19, 0xFF	; 255
     57a:	80 91 82 00 	lds	r24, 0x0082
     57e:	90 91 83 00 	lds	r25, 0x0083
     582:	28 17       	cp	r18, r24
     584:	39 07       	cpc	r19, r25
     586:	30 f4       	brcc	.+12     	; 0x594 <__stack+0x335>
     588:	80 91 76 00 	lds	r24, 0x0076
     58c:	88 23       	and	r24, r24
     58e:	11 f0       	breq	.+4      	; 0x594 <__stack+0x335>
     590:	10 92 76 00 	sts	0x0076, r1

      if ((Dt5<=array[6])&&(!Dt5_118))            Dt5_118=1; //выше 118 градусов
     594:	20 91 d2 00 	lds	r18, 0x00D2
     598:	30 91 d3 00 	lds	r19, 0x00D3
     59c:	80 91 7b 00 	lds	r24, 0x007B
     5a0:	90 91 7c 00 	lds	r25, 0x007C
     5a4:	28 17       	cp	r18, r24
     5a6:	39 07       	cpc	r19, r25
     5a8:	38 f0       	brcs	.+14     	; 0x5b8 <__stack+0x359>
     5aa:	80 91 d8 00 	lds	r24, 0x00D8
     5ae:	88 23       	and	r24, r24
     5b0:	19 f4       	brne	.+6      	; 0x5b8 <__stack+0x359>
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	80 93 d8 00 	sts	0x00D8, r24
      if ((Dt5>(array[6]+Hyst_t))&&(Dt5_118))     Dt5_118=0; //ниже 116.5 градусов направление срабатывания - вверх
     5b8:	80 91 d2 00 	lds	r24, 0x00D2
     5bc:	90 91 d3 00 	lds	r25, 0x00D3
     5c0:	9c 01       	movw	r18, r24
     5c2:	26 5f       	subi	r18, 0xF6	; 246
     5c4:	3f 4f       	sbci	r19, 0xFF	; 255
     5c6:	80 91 7b 00 	lds	r24, 0x007B
     5ca:	90 91 7c 00 	lds	r25, 0x007C
     5ce:	28 17       	cp	r18, r24
     5d0:	39 07       	cpc	r19, r25
     5d2:	30 f4       	brcc	.+12     	; 0x5e0 <__stack+0x381>
     5d4:	80 91 d8 00 	lds	r24, 0x00D8
     5d8:	88 23       	and	r24, r24
     5da:	11 f0       	breq	.+4      	; 0x5e0 <__stack+0x381>
     5dc:	10 92 d8 00 	sts	0x00D8, r1
      Если значение датчика давления стало больше или равно 1 кг/см^2 и флаг датчика давления по порогу 1 был сброшен (означает,
      что значение датчика давления было до этого меньше 1 кг/см^2), то установить флаг датчика давления по порогу 1 (означает 
      превышение порога 1).
      Если значение датчика давления стало меньше 1 кг/см^2 и флаг датчика давления по порогу 1 был установлен, то флаг сбросить.
*/
      if ((Dd1>=d1_1)&&(!Dd1_1))                  Dd1_1=1;   //выше 1 кг/см кв определить пределы направление срабатывания - вверх
     5e0:	80 91 b2 00 	lds	r24, 0x00B2
     5e4:	90 91 b3 00 	lds	r25, 0x00B3
     5e8:	82 37       	cpi	r24, 0x72	; 114
     5ea:	91 05       	cpc	r25, r1
     5ec:	38 f0       	brcs	.+14     	; 0x5fc <__stack+0x39d>
     5ee:	80 91 7d 00 	lds	r24, 0x007D
     5f2:	88 23       	and	r24, r24
     5f4:	19 f4       	brne	.+6      	; 0x5fc <__stack+0x39d>
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	80 93 7d 00 	sts	0x007D, r24
      if ((Dd1<d1_1-Hyst_p)&&(Dd1_1))             Dd1_1=0;   //ниже 1 кг/см кв
     5fc:	80 91 b2 00 	lds	r24, 0x00B2
     600:	90 91 b3 00 	lds	r25, 0x00B3
     604:	88 36       	cpi	r24, 0x68	; 104
     606:	91 05       	cpc	r25, r1
     608:	30 f4       	brcc	.+12     	; 0x616 <__stack+0x3b7>
     60a:	80 91 7d 00 	lds	r24, 0x007D
     60e:	88 23       	and	r24, r24
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x3b7>
     612:	10 92 7d 00 	sts	0x007D, r1

      if ((Dd1>=d1_4+Hyst_p)&&(!Dd1_4))           Dd1_4=1;   //выше 4 кг/см кв определить пределы
     616:	80 91 b2 00 	lds	r24, 0x00B2
     61a:	90 91 b3 00 	lds	r25, 0x00B3
     61e:	8f 3d       	cpi	r24, 0xDF	; 223
     620:	91 05       	cpc	r25, r1
     622:	38 f0       	brcs	.+14     	; 0x632 <__stack+0x3d3>
     624:	80 91 89 00 	lds	r24, 0x0089
     628:	88 23       	and	r24, r24
     62a:	19 f4       	brne	.+6      	; 0x632 <__stack+0x3d3>
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	80 93 89 00 	sts	0x0089, r24
      if ((Dd1<d1_4)&&(Dd1_4))                    Dd1_4=0;   //ниже 4 кг/см кв определить пределы 10 - гистерезис вниз направление срабатывания - вниз
     632:	80 91 b2 00 	lds	r24, 0x00B2
     636:	90 91 b3 00 	lds	r25, 0x00B3
     63a:	85 3d       	cpi	r24, 0xD5	; 213
     63c:	91 05       	cpc	r25, r1
     63e:	30 f4       	brcc	.+12     	; 0x64c <__stack+0x3ed>
     640:	80 91 89 00 	lds	r24, 0x0089
     644:	88 23       	and	r24, r24
     646:	11 f0       	breq	.+4      	; 0x64c <__stack+0x3ed>
     648:	10 92 89 00 	sts	0x0089, r1
      Условия задания флагов по порогу 500.
      Если число оборотов маховика коленвала дизеля больше или равно 500 и флаг датчика частоты оборотов был сброшен (означает,
      что число оборотов было менше 500), то установить флаг датчика частоты оборотов (означает превышение порога 500).
      Если число оборотов меньше 400 и флаг датчика частоты оборотов был установлен, то сбросить флаг датчика частоты оборотов.
*/
      if ((NDiz>=500)&&(!Nd_500))                 Nd_500=1;  //100 оборотов гистерезис
     64c:	80 91 b7 00 	lds	r24, 0x00B7
     650:	90 91 b8 00 	lds	r25, 0x00B8
     654:	21 e0       	ldi	r18, 0x01	; 1
     656:	84 3f       	cpi	r24, 0xF4	; 244
     658:	92 07       	cpc	r25, r18
     65a:	38 f0       	brcs	.+14     	; 0x66a <__stack+0x40b>
     65c:	80 91 ff 00 	lds	r24, 0x00FF
     660:	88 23       	and	r24, r24
     662:	19 f4       	brne	.+6      	; 0x66a <__stack+0x40b>
     664:	81 e0       	ldi	r24, 0x01	; 1
     666:	80 93 ff 00 	sts	0x00FF, r24
      if ((NDiz<400)&&(Nd_500))                   Nd_500=0;
     66a:	80 91 b7 00 	lds	r24, 0x00B7
     66e:	90 91 b8 00 	lds	r25, 0x00B8
     672:	21 e0       	ldi	r18, 0x01	; 1
     674:	80 39       	cpi	r24, 0x90	; 144
     676:	92 07       	cpc	r25, r18
     678:	30 f4       	brcc	.+12     	; 0x686 <__stack+0x427>
     67a:	80 91 ff 00 	lds	r24, 0x00FF
     67e:	88 23       	and	r24, r24
     680:	11 f0       	breq	.+4      	; 0x686 <__stack+0x427>
     682:	10 92 ff 00 	sts	0x00FF, r1

      if ((NDiz>=1450)&&(!Nd_1450))               Nd_1450=1;
     686:	80 91 b7 00 	lds	r24, 0x00B7
     68a:	90 91 b8 00 	lds	r25, 0x00B8
     68e:	25 e0       	ldi	r18, 0x05	; 5
     690:	8a 3a       	cpi	r24, 0xAA	; 170
     692:	92 07       	cpc	r25, r18
     694:	38 f0       	brcs	.+14     	; 0x6a4 <__stack+0x445>
     696:	80 91 bc 00 	lds	r24, 0x00BC
     69a:	88 23       	and	r24, r24
     69c:	19 f4       	brne	.+6      	; 0x6a4 <__stack+0x445>
     69e:	81 e0       	ldi	r24, 0x01	; 1
     6a0:	80 93 bc 00 	sts	0x00BC, r24
      if ((NDiz<1350)&&(Nd_1450))                 Nd_1450=0;
     6a4:	80 91 b7 00 	lds	r24, 0x00B7
     6a8:	90 91 b8 00 	lds	r25, 0x00B8
     6ac:	25 e0       	ldi	r18, 0x05	; 5
     6ae:	86 34       	cpi	r24, 0x46	; 70
     6b0:	92 07       	cpc	r25, r18
     6b2:	30 f4       	brcc	.+12     	; 0x6c0 <__stack+0x461>
     6b4:	80 91 bc 00 	lds	r24, 0x00BC
     6b8:	88 23       	and	r24, r24
     6ba:	11 f0       	breq	.+4      	; 0x6c0 <__stack+0x461>
     6bc:	10 92 bc 00 	sts	0x00BC, r1

      if ((NDiz>=1750)&&(!Nd_1750))               Nd_1750=1;
     6c0:	80 91 b7 00 	lds	r24, 0x00B7
     6c4:	90 91 b8 00 	lds	r25, 0x00B8
     6c8:	26 e0       	ldi	r18, 0x06	; 6
     6ca:	86 3d       	cpi	r24, 0xD6	; 214
     6cc:	92 07       	cpc	r25, r18
     6ce:	38 f0       	brcs	.+14     	; 0x6de <__stack+0x47f>
     6d0:	80 91 85 00 	lds	r24, 0x0085
     6d4:	88 23       	and	r24, r24
     6d6:	19 f4       	brne	.+6      	; 0x6de <__stack+0x47f>
     6d8:	81 e0       	ldi	r24, 0x01	; 1
     6da:	80 93 85 00 	sts	0x0085, r24
      if ((NDiz<1650)&&(Nd_1750))                 Nd_1750=0; 
     6de:	80 91 b7 00 	lds	r24, 0x00B7
     6e2:	90 91 b8 00 	lds	r25, 0x00B8
     6e6:	26 e0       	ldi	r18, 0x06	; 6
     6e8:	82 37       	cpi	r24, 0x72	; 114
     6ea:	92 07       	cpc	r25, r18
     6ec:	30 f4       	brcc	.+12     	; 0x6fa <__stack+0x49b>
     6ee:	80 91 85 00 	lds	r24, 0x0085
     6f2:	88 23       	and	r24, r24
     6f4:	11 f0       	breq	.+4      	; 0x6fa <__stack+0x49b>
     6f6:	10 92 85 00 	sts	0x0085, r1

//    Объявление портов и задание их логики (светодиодная индикация):
      if (!Dt4_8)   PORTD &= ~(1<<PORTD5); else PORTD |= (1<<PORTD5); //PD5 - выше 8 град
     6fa:	80 91 d7 00 	lds	r24, 0x00D7
     6fe:	88 23       	and	r24, r24
     700:	41 f4       	brne	.+16     	; 0x712 <__stack+0x4b3>
     702:	a2 e3       	ldi	r26, 0x32	; 50
     704:	b0 e0       	ldi	r27, 0x00	; 0
     706:	e2 e3       	ldi	r30, 0x32	; 50
     708:	f0 e0       	ldi	r31, 0x00	; 0
     70a:	80 81       	ld	r24, Z
     70c:	8f 7d       	andi	r24, 0xDF	; 223
     70e:	8c 93       	st	X, r24
     710:	07 c0       	rjmp	.+14     	; 0x720 <__stack+0x4c1>
     712:	a2 e3       	ldi	r26, 0x32	; 50
     714:	b0 e0       	ldi	r27, 0x00	; 0
     716:	e2 e3       	ldi	r30, 0x32	; 50
     718:	f0 e0       	ldi	r31, 0x00	; 0
     71a:	80 81       	ld	r24, Z
     71c:	80 62       	ori	r24, 0x20	; 32
     71e:	8c 93       	st	X, r24
      if (Dt4_30)   PORTD &= ~(1<<PORTD3); else PORTD |= (1<<PORTD3); //PD3 - ниже 30 град
     720:	80 91 8b 00 	lds	r24, 0x008B
     724:	88 23       	and	r24, r24
     726:	41 f0       	breq	.+16     	; 0x738 <__stack+0x4d9>
     728:	a2 e3       	ldi	r26, 0x32	; 50
     72a:	b0 e0       	ldi	r27, 0x00	; 0
     72c:	e2 e3       	ldi	r30, 0x32	; 50
     72e:	f0 e0       	ldi	r31, 0x00	; 0
     730:	80 81       	ld	r24, Z
     732:	87 7f       	andi	r24, 0xF7	; 247
     734:	8c 93       	st	X, r24
     736:	07 c0       	rjmp	.+14     	; 0x746 <__stack+0x4e7>
     738:	a2 e3       	ldi	r26, 0x32	; 50
     73a:	b0 e0       	ldi	r27, 0x00	; 0
     73c:	e2 e3       	ldi	r30, 0x32	; 50
     73e:	f0 e0       	ldi	r31, 0x00	; 0
     740:	80 81       	ld	r24, Z
     742:	88 60       	ori	r24, 0x08	; 8
     744:	8c 93       	st	X, r24
      if (!Dt4_37)  PORTC &= ~(1<<PORTC2); else PORTC |= (1<<PORTC2); //PС2 - ниже 37 град 37+красн
     746:	80 91 81 00 	lds	r24, 0x0081
     74a:	88 23       	and	r24, r24
     74c:	41 f4       	brne	.+16     	; 0x75e <__stack+0x4ff>
     74e:	a5 e3       	ldi	r26, 0x35	; 53
     750:	b0 e0       	ldi	r27, 0x00	; 0
     752:	e5 e3       	ldi	r30, 0x35	; 53
     754:	f0 e0       	ldi	r31, 0x00	; 0
     756:	80 81       	ld	r24, Z
     758:	8b 7f       	andi	r24, 0xFB	; 251
     75a:	8c 93       	st	X, r24
     75c:	07 c0       	rjmp	.+14     	; 0x76c <__stack+0x50d>
     75e:	a5 e3       	ldi	r26, 0x35	; 53
     760:	b0 e0       	ldi	r27, 0x00	; 0
     762:	e5 e3       	ldi	r30, 0x35	; 53
     764:	f0 e0       	ldi	r31, 0x00	; 0
     766:	80 81       	ld	r24, Z
     768:	84 60       	ori	r24, 0x04	; 4
     76a:	8c 93       	st	X, r24

      if (Dt5_37)   PORTC &= ~(1<<PORTC4); else PORTC |= (1<<PORTC4); //PC4 - выше 45 град зеленый
     76c:	80 91 b4 00 	lds	r24, 0x00B4
     770:	88 23       	and	r24, r24
     772:	41 f0       	breq	.+16     	; 0x784 <__stack+0x525>
     774:	a5 e3       	ldi	r26, 0x35	; 53
     776:	b0 e0       	ldi	r27, 0x00	; 0
     778:	e5 e3       	ldi	r30, 0x35	; 53
     77a:	f0 e0       	ldi	r31, 0x00	; 0
     77c:	80 81       	ld	r24, Z
     77e:	8f 7e       	andi	r24, 0xEF	; 239
     780:	8c 93       	st	X, r24
     782:	07 c0       	rjmp	.+14     	; 0x792 <__stack+0x533>
     784:	a5 e3       	ldi	r26, 0x35	; 53
     786:	b0 e0       	ldi	r27, 0x00	; 0
     788:	e5 e3       	ldi	r30, 0x35	; 53
     78a:	f0 e0       	ldi	r31, 0x00	; 0
     78c:	80 81       	ld	r24, Z
     78e:	80 61       	ori	r24, 0x10	; 16
     790:	8c 93       	st	X, r24
      if (!Dt5_95)  PORTC &= ~(1<<PORTC0); else PORTC |= (1<<PORTC0); //PC0 - выше 95 град
     792:	80 91 b1 00 	lds	r24, 0x00B1
     796:	88 23       	and	r24, r24
     798:	41 f4       	brne	.+16     	; 0x7aa <__stack+0x54b>
     79a:	a5 e3       	ldi	r26, 0x35	; 53
     79c:	b0 e0       	ldi	r27, 0x00	; 0
     79e:	e5 e3       	ldi	r30, 0x35	; 53
     7a0:	f0 e0       	ldi	r31, 0x00	; 0
     7a2:	80 81       	ld	r24, Z
     7a4:	8e 7f       	andi	r24, 0xFE	; 254
     7a6:	8c 93       	st	X, r24
     7a8:	07 c0       	rjmp	.+14     	; 0x7b8 <__stack+0x559>
     7aa:	a5 e3       	ldi	r26, 0x35	; 53
     7ac:	b0 e0       	ldi	r27, 0x00	; 0
     7ae:	e5 e3       	ldi	r30, 0x35	; 53
     7b0:	f0 e0       	ldi	r31, 0x00	; 0
     7b2:	80 81       	ld	r24, Z
     7b4:	81 60       	ori	r24, 0x01	; 1
     7b6:	8c 93       	st	X, r24
      if (Dt6_115)  PORTC &= ~(1<<PORTC3); else PORTC |= (1<<PORTC3); //PС3 - выше 115 град и 115 гр. инверсная
     7b8:	80 91 76 00 	lds	r24, 0x0076
     7bc:	88 23       	and	r24, r24
     7be:	41 f0       	breq	.+16     	; 0x7d0 <__stack+0x571>
     7c0:	a5 e3       	ldi	r26, 0x35	; 53
     7c2:	b0 e0       	ldi	r27, 0x00	; 0
     7c4:	e5 e3       	ldi	r30, 0x35	; 53
     7c6:	f0 e0       	ldi	r31, 0x00	; 0
     7c8:	80 81       	ld	r24, Z
     7ca:	87 7f       	andi	r24, 0xF7	; 247
     7cc:	8c 93       	st	X, r24
     7ce:	07 c0       	rjmp	.+14     	; 0x7de <__stack+0x57f>
     7d0:	a5 e3       	ldi	r26, 0x35	; 53
     7d2:	b0 e0       	ldi	r27, 0x00	; 0
     7d4:	e5 e3       	ldi	r30, 0x35	; 53
     7d6:	f0 e0       	ldi	r31, 0x00	; 0
     7d8:	80 81       	ld	r24, Z
     7da:	88 60       	ori	r24, 0x08	; 8
     7dc:	8c 93       	st	X, r24
      if (Dt5_118)  PORTC &= ~(1<<PORTC1); else PORTC |= (1<<PORTC1); //PC1 - выше 118 град логика работы 118гр.
     7de:	80 91 d8 00 	lds	r24, 0x00D8
     7e2:	88 23       	and	r24, r24
     7e4:	41 f0       	breq	.+16     	; 0x7f6 <__stack+0x597>
     7e6:	a5 e3       	ldi	r26, 0x35	; 53
     7e8:	b0 e0       	ldi	r27, 0x00	; 0
     7ea:	e5 e3       	ldi	r30, 0x35	; 53
     7ec:	f0 e0       	ldi	r31, 0x00	; 0
     7ee:	80 81       	ld	r24, Z
     7f0:	8d 7f       	andi	r24, 0xFD	; 253
     7f2:	8c 93       	st	X, r24
     7f4:	07 c0       	rjmp	.+14     	; 0x804 <__stack+0x5a5>
     7f6:	a5 e3       	ldi	r26, 0x35	; 53
     7f8:	b0 e0       	ldi	r27, 0x00	; 0
     7fa:	e5 e3       	ldi	r30, 0x35	; 53
     7fc:	f0 e0       	ldi	r31, 0x00	; 0
     7fe:	80 81       	ld	r24, Z
     800:	82 60       	ori	r24, 0x02	; 2
     802:	8c 93       	st	X, r24

      if (!Dd1_1)   PORTD &= ~(1<<PORTD0); else PORTD |= (1<<PORTD0); //PD0 - выше 1 кг
     804:	80 91 7d 00 	lds	r24, 0x007D
     808:	88 23       	and	r24, r24
     80a:	41 f4       	brne	.+16     	; 0x81c <__stack+0x5bd>
     80c:	a2 e3       	ldi	r26, 0x32	; 50
     80e:	b0 e0       	ldi	r27, 0x00	; 0
     810:	e2 e3       	ldi	r30, 0x32	; 50
     812:	f0 e0       	ldi	r31, 0x00	; 0
     814:	80 81       	ld	r24, Z
     816:	8e 7f       	andi	r24, 0xFE	; 254
     818:	8c 93       	st	X, r24
     81a:	07 c0       	rjmp	.+14     	; 0x82a <__stack+0x5cb>
     81c:	a2 e3       	ldi	r26, 0x32	; 50
     81e:	b0 e0       	ldi	r27, 0x00	; 0
     820:	e2 e3       	ldi	r30, 0x32	; 50
     822:	f0 e0       	ldi	r31, 0x00	; 0
     824:	80 81       	ld	r24, Z
     826:	81 60       	ori	r24, 0x01	; 1
     828:	8c 93       	st	X, r24
      if (Dd1_4)    PORTD &= ~(1<<PORTD1); else PORTD |= (1<<PORTD1); //PD1 - ниже 4 кг
     82a:	80 91 89 00 	lds	r24, 0x0089
     82e:	88 23       	and	r24, r24
     830:	41 f0       	breq	.+16     	; 0x842 <__stack+0x5e3>
     832:	a2 e3       	ldi	r26, 0x32	; 50
     834:	b0 e0       	ldi	r27, 0x00	; 0
     836:	e2 e3       	ldi	r30, 0x32	; 50
     838:	f0 e0       	ldi	r31, 0x00	; 0
     83a:	80 81       	ld	r24, Z
     83c:	8d 7f       	andi	r24, 0xFD	; 253
     83e:	8c 93       	st	X, r24
     840:	07 c0       	rjmp	.+14     	; 0x850 <__stack+0x5f1>
     842:	a2 e3       	ldi	r26, 0x32	; 50
     844:	b0 e0       	ldi	r27, 0x00	; 0
     846:	e2 e3       	ldi	r30, 0x32	; 50
     848:	f0 e0       	ldi	r31, 0x00	; 0
     84a:	80 81       	ld	r24, Z
     84c:	82 60       	ori	r24, 0x02	; 2
     84e:	8c 93       	st	X, r24
   
      if (!Nd_500)  PORTD &= ~(1<<PORTD2); else PORTD |= (1<<PORTD2); //PD2 - выше 500
     850:	80 91 ff 00 	lds	r24, 0x00FF
     854:	88 23       	and	r24, r24
     856:	41 f4       	brne	.+16     	; 0x868 <__stack+0x609>
     858:	a2 e3       	ldi	r26, 0x32	; 50
     85a:	b0 e0       	ldi	r27, 0x00	; 0
     85c:	e2 e3       	ldi	r30, 0x32	; 50
     85e:	f0 e0       	ldi	r31, 0x00	; 0
     860:	80 81       	ld	r24, Z
     862:	8b 7f       	andi	r24, 0xFB	; 251
     864:	8c 93       	st	X, r24
     866:	07 c0       	rjmp	.+14     	; 0x876 <__stack+0x617>
     868:	a2 e3       	ldi	r26, 0x32	; 50
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	e2 e3       	ldi	r30, 0x32	; 50
     86e:	f0 e0       	ldi	r31, 0x00	; 0
     870:	80 81       	ld	r24, Z
     872:	84 60       	ori	r24, 0x04	; 4
     874:	8c 93       	st	X, r24
      if (!Nd_1450) PORTD &= ~(1<<PORTD4); else PORTD |= (1<<PORTD4); //PD4 - выше 1450
     876:	80 91 bc 00 	lds	r24, 0x00BC
     87a:	88 23       	and	r24, r24
     87c:	41 f4       	brne	.+16     	; 0x88e <__stack+0x62f>
     87e:	a2 e3       	ldi	r26, 0x32	; 50
     880:	b0 e0       	ldi	r27, 0x00	; 0
     882:	e2 e3       	ldi	r30, 0x32	; 50
     884:	f0 e0       	ldi	r31, 0x00	; 0
     886:	80 81       	ld	r24, Z
     888:	8f 7e       	andi	r24, 0xEF	; 239
     88a:	8c 93       	st	X, r24
     88c:	07 c0       	rjmp	.+14     	; 0x89c <__stack+0x63d>
     88e:	a2 e3       	ldi	r26, 0x32	; 50
     890:	b0 e0       	ldi	r27, 0x00	; 0
     892:	e2 e3       	ldi	r30, 0x32	; 50
     894:	f0 e0       	ldi	r31, 0x00	; 0
     896:	80 81       	ld	r24, Z
     898:	80 61       	ori	r24, 0x10	; 16
     89a:	8c 93       	st	X, r24
      if (Nd_1750)  PORTC &= ~(1<<PORTC5); else PORTC |= (1<<PORTC5); //PC5 - выше 1750
     89c:	80 91 85 00 	lds	r24, 0x0085
     8a0:	88 23       	and	r24, r24
     8a2:	41 f0       	breq	.+16     	; 0x8b4 <__stack+0x655>
     8a4:	a5 e3       	ldi	r26, 0x35	; 53
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	e5 e3       	ldi	r30, 0x35	; 53
     8aa:	f0 e0       	ldi	r31, 0x00	; 0
     8ac:	80 81       	ld	r24, Z
     8ae:	8f 7d       	andi	r24, 0xDF	; 223
     8b0:	8c 93       	st	X, r24
     8b2:	89 cd       	rjmp	.-1262   	; 0x3c6 <__stack+0x167>
     8b4:	a5 e3       	ldi	r26, 0x35	; 53
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	e5 e3       	ldi	r30, 0x35	; 53
     8ba:	f0 e0       	ldi	r31, 0x00	; 0
     8bc:	80 81       	ld	r24, Z
     8be:	80 62       	ori	r24, 0x20	; 32
     8c0:	8c 93       	st	X, r24
     8c2:	81 cd       	rjmp	.-1278   	; 0x3c6 <__stack+0x167>

000008c4 <InitAd>:
    }
  }
}

void InitAd(void)
{
     8c4:	df 93       	push	r29
     8c6:	cf 93       	push	r28
     8c8:	cd b7       	in	r28, 0x3d	; 61
     8ca:	de b7       	in	r29, 0x3e	; 62
  ADMUX = (1<<REFS0);                        //internal Aref with capacitor 0100 0000 (ADC0, single-ended, gain=1)
     8cc:	e7 e2       	ldi	r30, 0x27	; 39
     8ce:	f0 e0       	ldi	r31, 0x00	; 0
     8d0:	80 e4       	ldi	r24, 0x40	; 64
     8d2:	80 83       	st	Z, r24
  CtAd = CtAd0;                              //63
     8d4:	8f e3       	ldi	r24, 0x3F	; 63
     8d6:	80 93 d6 00 	sts	0x00D6, r24
  NumberAd = 0;
     8da:	10 92 80 00 	sts	0x0080, r1
  ADCSRA = 0; 
     8de:	e6 e2       	ldi	r30, 0x26	; 38
     8e0:	f0 e0       	ldi	r31, 0x00	; 0
     8e2:	10 82       	st	Z, r1
  ADCSRA |=(1<<ADEN);                        //enable AD
     8e4:	a6 e2       	ldi	r26, 0x26	; 38
     8e6:	b0 e0       	ldi	r27, 0x00	; 0
     8e8:	e6 e2       	ldi	r30, 0x26	; 38
     8ea:	f0 e0       	ldi	r31, 0x00	; 0
     8ec:	80 81       	ld	r24, Z
     8ee:	80 68       	ori	r24, 0x80	; 128
     8f0:	8c 93       	st	X, r24
  ADCSRA |=(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //1/128 - 125 kHz
     8f2:	a6 e2       	ldi	r26, 0x26	; 38
     8f4:	b0 e0       	ldi	r27, 0x00	; 0
     8f6:	e6 e2       	ldi	r30, 0x26	; 38
     8f8:	f0 e0       	ldi	r31, 0x00	; 0
     8fa:	80 81       	ld	r24, Z
     8fc:	87 60       	ori	r24, 0x07	; 7
     8fe:	8c 93       	st	X, r24
  ADCSRA |=(1<<ADSC);                        //Start
     900:	a6 e2       	ldi	r26, 0x26	; 38
     902:	b0 e0       	ldi	r27, 0x00	; 0
     904:	e6 e2       	ldi	r30, 0x26	; 38
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	80 81       	ld	r24, Z
     90a:	80 64       	ori	r24, 0x40	; 64
     90c:	8c 93       	st	X, r24
}
     90e:	cf 91       	pop	r28
     910:	df 91       	pop	r29
     912:	08 95       	ret

00000914 <AccountNDiz>:

void AccountNDiz(void)          //подпрограмма вычисления частоты вращения маховика коленвала дизеля
{
     914:	df 93       	push	r29
     916:	cf 93       	push	r28
     918:	00 d0       	rcall	.+0      	; 0x91a <AccountNDiz+0x6>
     91a:	00 d0       	rcall	.+0      	; 0x91c <AccountNDiz+0x8>
     91c:	00 d0       	rcall	.+0      	; 0x91e <AccountNDiz+0xa>
     91e:	cd b7       	in	r28, 0x3d	; 61
     920:	de b7       	in	r29, 0x3e	; 62
  unsigned long R1;             //переменная количества оборотов
  unsigned char R0;             //номер элемента массива выборок количества оборотов
  unsigned char NDiz_invalid=0; //флаг неправильной работы
     922:	19 82       	std	Y+1, r1	; 0x01
  {
    R1=0;
     924:	1b 82       	std	Y+3, r1	; 0x03
     926:	1c 82       	std	Y+4, r1	; 0x04
     928:	1d 82       	std	Y+5, r1	; 0x05
     92a:	1e 82       	std	Y+6, r1	; 0x06
    for (R0=0; R0<=15; ++R0)
     92c:	1a 82       	std	Y+2, r1	; 0x02
     92e:	38 c0       	rjmp	.+112    	; 0x9a0 <AccountNDiz+0x8c>
    {
      if ((TDizTemp[R0]==0xffff)||(TDizTemp[R0]==0)) NDiz_invalid=1; //выставление флага если расчет кол-ва оборотов будет неверный
     930:	8a 81       	ldd	r24, Y+2	; 0x02
     932:	88 2f       	mov	r24, r24
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	88 0f       	add	r24, r24
     938:	99 1f       	adc	r25, r25
     93a:	fc 01       	movw	r30, r24
     93c:	e4 57       	subi	r30, 0x74	; 116
     93e:	ff 4f       	sbci	r31, 0xFF	; 255
     940:	80 81       	ld	r24, Z
     942:	91 81       	ldd	r25, Z+1	; 0x01
     944:	2f ef       	ldi	r18, 0xFF	; 255
     946:	8f 3f       	cpi	r24, 0xFF	; 255
     948:	92 07       	cpc	r25, r18
     94a:	61 f0       	breq	.+24     	; 0x964 <AccountNDiz+0x50>
     94c:	8a 81       	ldd	r24, Y+2	; 0x02
     94e:	88 2f       	mov	r24, r24
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	88 0f       	add	r24, r24
     954:	99 1f       	adc	r25, r25
     956:	fc 01       	movw	r30, r24
     958:	e4 57       	subi	r30, 0x74	; 116
     95a:	ff 4f       	sbci	r31, 0xFF	; 255
     95c:	80 81       	ld	r24, Z
     95e:	91 81       	ldd	r25, Z+1	; 0x01
     960:	00 97       	sbiw	r24, 0x00	; 0
     962:	11 f4       	brne	.+4      	; 0x968 <AccountNDiz+0x54>
     964:	81 e0       	ldi	r24, 0x01	; 1
     966:	89 83       	std	Y+1, r24	; 0x01
      R1+=TDizTemp[R0]; //суммирование всех 16 выборок
     968:	8a 81       	ldd	r24, Y+2	; 0x02
     96a:	88 2f       	mov	r24, r24
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	88 0f       	add	r24, r24
     970:	99 1f       	adc	r25, r25
     972:	fc 01       	movw	r30, r24
     974:	e4 57       	subi	r30, 0x74	; 116
     976:	ff 4f       	sbci	r31, 0xFF	; 255
     978:	80 81       	ld	r24, Z
     97a:	91 81       	ldd	r25, Z+1	; 0x01
     97c:	9c 01       	movw	r18, r24
     97e:	40 e0       	ldi	r20, 0x00	; 0
     980:	50 e0       	ldi	r21, 0x00	; 0
     982:	8b 81       	ldd	r24, Y+3	; 0x03
     984:	9c 81       	ldd	r25, Y+4	; 0x04
     986:	ad 81       	ldd	r26, Y+5	; 0x05
     988:	be 81       	ldd	r27, Y+6	; 0x06
     98a:	82 0f       	add	r24, r18
     98c:	93 1f       	adc	r25, r19
     98e:	a4 1f       	adc	r26, r20
     990:	b5 1f       	adc	r27, r21
     992:	8b 83       	std	Y+3, r24	; 0x03
     994:	9c 83       	std	Y+4, r25	; 0x04
     996:	ad 83       	std	Y+5, r26	; 0x05
     998:	be 83       	std	Y+6, r27	; 0x06
  unsigned long R1;             //переменная количества оборотов
  unsigned char R0;             //номер элемента массива выборок количества оборотов
  unsigned char NDiz_invalid=0; //флаг неправильной работы
  {
    R1=0;
    for (R0=0; R0<=15; ++R0)
     99a:	8a 81       	ldd	r24, Y+2	; 0x02
     99c:	8f 5f       	subi	r24, 0xFF	; 255
     99e:	8a 83       	std	Y+2, r24	; 0x02
     9a0:	8a 81       	ldd	r24, Y+2	; 0x02
     9a2:	80 31       	cpi	r24, 0x10	; 16
     9a4:	28 f2       	brcs	.-118    	; 0x930 <AccountNDiz+0x1c>
    {
      if ((TDizTemp[R0]==0xffff)||(TDizTemp[R0]==0)) NDiz_invalid=1; //выставление флага если расчет кол-ва оборотов будет неверный
      R1+=TDizTemp[R0]; //суммирование всех 16 выборок
    }
    R1>>=4; //вычисление среднего значения
     9a6:	8b 81       	ldd	r24, Y+3	; 0x03
     9a8:	9c 81       	ldd	r25, Y+4	; 0x04
     9aa:	ad 81       	ldd	r26, Y+5	; 0x05
     9ac:	be 81       	ldd	r27, Y+6	; 0x06
     9ae:	68 94       	set
     9b0:	13 f8       	bld	r1, 3
     9b2:	b6 95       	lsr	r27
     9b4:	a7 95       	ror	r26
     9b6:	97 95       	ror	r25
     9b8:	87 95       	ror	r24
     9ba:	16 94       	lsr	r1
     9bc:	d1 f7       	brne	.-12     	; 0x9b2 <AccountNDiz+0x9e>
     9be:	8b 83       	std	Y+3, r24	; 0x03
     9c0:	9c 83       	std	Y+4, r25	; 0x04
     9c2:	ad 83       	std	Y+5, r26	; 0x05
     9c4:	be 83       	std	Y+6, r27	; 0x06
    if((R1>62330)||(NDiz_Overflow==1)) // если результат больше 62330 или установлен флаг переполнения, то обороты = 0
     9c6:	8b 81       	ldd	r24, Y+3	; 0x03
     9c8:	9c 81       	ldd	r25, Y+4	; 0x04
     9ca:	ad 81       	ldd	r26, Y+5	; 0x05
     9cc:	be 81       	ldd	r27, Y+6	; 0x06
     9ce:	8b 37       	cpi	r24, 0x7B	; 123
     9d0:	23 ef       	ldi	r18, 0xF3	; 243
     9d2:	92 07       	cpc	r25, r18
     9d4:	20 e0       	ldi	r18, 0x00	; 0
     9d6:	a2 07       	cpc	r26, r18
     9d8:	20 e0       	ldi	r18, 0x00	; 0
     9da:	b2 07       	cpc	r27, r18
     9dc:	20 f4       	brcc	.+8      	; 0x9e6 <AccountNDiz+0xd2>
     9de:	80 91 72 00 	lds	r24, 0x0072
     9e2:	81 30       	cpi	r24, 0x01	; 1
     9e4:	29 f4       	brne	.+10     	; 0x9f0 <AccountNDiz+0xdc>
      NDiz=0;
     9e6:	10 92 b8 00 	sts	0x00B8, r1
     9ea:	10 92 b7 00 	sts	0x00B7, r1
     9ee:	33 c0       	rjmp	.+102    	; 0xa56 <AccountNDiz+0x142>

    else
    {
      if (!NDiz_invalid)
     9f0:	89 81       	ldd	r24, Y+1	; 0x01
     9f2:	88 23       	and	r24, r24
     9f4:	c9 f4       	brne	.+50     	; 0xa28 <AccountNDiz+0x114>
      {
        R1=8421000/R1;  //R1 = 62330 - 140 оборотов в минуту или 2,33(3) в сек
     9f6:	88 e8       	ldi	r24, 0x88	; 136
     9f8:	9e e7       	ldi	r25, 0x7E	; 126
     9fa:	a0 e8       	ldi	r26, 0x80	; 128
     9fc:	b0 e0       	ldi	r27, 0x00	; 0
     9fe:	2b 81       	ldd	r18, Y+3	; 0x03
     a00:	3c 81       	ldd	r19, Y+4	; 0x04
     a02:	4d 81       	ldd	r20, Y+5	; 0x05
     a04:	5e 81       	ldd	r21, Y+6	; 0x06
     a06:	bc 01       	movw	r22, r24
     a08:	cd 01       	movw	r24, r26
     a0a:	fc d2       	rcall	.+1528   	; 0x1004 <__udivmodsi4>
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8b 83       	std	Y+3, r24	; 0x03
     a12:	9c 83       	std	Y+4, r25	; 0x04
     a14:	ad 83       	std	Y+5, r26	; 0x05
     a16:	be 83       	std	Y+6, r27	; 0x06
        NDiz=R1;
     a18:	8b 81       	ldd	r24, Y+3	; 0x03
     a1a:	9c 81       	ldd	r25, Y+4	; 0x04
     a1c:	90 93 b8 00 	sts	0x00B8, r25
     a20:	80 93 b7 00 	sts	0x00B7, r24
        InvCounter=0;   //обнуление счетчика инвалидности
     a24:	10 92 7e 00 	sts	0x007E, r1
      }                 //R1 = 2909 - 3000оборотов в минуту или 50 в секунду
      if (NDiz_invalid)
     a28:	89 81       	ldd	r24, Y+1	; 0x01
     a2a:	88 23       	and	r24, r24
     a2c:	a1 f0       	breq	.+40     	; 0xa56 <AccountNDiz+0x142>
      {
        InvCounter++;
     a2e:	80 91 7e 00 	lds	r24, 0x007E
     a32:	8f 5f       	subi	r24, 0xFF	; 255
     a34:	80 93 7e 00 	sts	0x007E, r24
        if (InvCounter>=10)
     a38:	80 91 7e 00 	lds	r24, 0x007E
     a3c:	8a 30       	cpi	r24, 0x0A	; 10
     a3e:	58 f0       	brcs	.+22     	; 0xa56 <AccountNDiz+0x142>
        {
          if (InvCounter>=250) InvCounter = 4; //колцевание
     a40:	80 91 7e 00 	lds	r24, 0x007E
     a44:	8a 3f       	cpi	r24, 0xFA	; 250
     a46:	18 f0       	brcs	.+6      	; 0xa4e <AccountNDiz+0x13a>
     a48:	84 e0       	ldi	r24, 0x04	; 4
     a4a:	80 93 7e 00 	sts	0x007E, r24
          NDiz = 0;
     a4e:	10 92 b8 00 	sts	0x00B8, r1
     a52:	10 92 b7 00 	sts	0x00B7, r1
        }
      }
    }
  }
}
     a56:	26 96       	adiw	r28, 0x06	; 6
     a58:	0f b6       	in	r0, 0x3f	; 63
     a5a:	f8 94       	cli
     a5c:	de bf       	out	0x3e, r29	; 62
     a5e:	0f be       	out	0x3f, r0	; 63
     a60:	cd bf       	out	0x3d, r28	; 61
     a62:	cf 91       	pop	r28
     a64:	df 91       	pop	r29
     a66:	08 95       	ret

00000a68 <AccountADC>:
//для УД-45 частота импульсов на 1500оборотов=2850
//таймер досчитывает до 5614
//коэффициент деления=

void AccountADC(void)
{
     a68:	df 93       	push	r29
     a6a:	cf 93       	push	r28
     a6c:	cd b7       	in	r28, 0x3d	; 61
     a6e:	de b7       	in	r29, 0x3e	; 62
  Dd1=AdResult[0];
     a70:	80 91 e7 00 	lds	r24, 0x00E7
     a74:	90 91 e8 00 	lds	r25, 0x00E8
     a78:	90 93 b3 00 	sts	0x00B3, r25
     a7c:	80 93 b2 00 	sts	0x00B2, r24
  Dt4=AdResult[1];
     a80:	80 91 e9 00 	lds	r24, 0x00E9
     a84:	90 91 ea 00 	lds	r25, 0x00EA
     a88:	90 93 d5 00 	sts	0x00D5, r25
     a8c:	80 93 d4 00 	sts	0x00D4, r24
  Dt5=AdResult[2];
     a90:	80 91 eb 00 	lds	r24, 0x00EB
     a94:	90 91 ec 00 	lds	r25, 0x00EC
     a98:	90 93 7c 00 	sts	0x007C, r25
     a9c:	80 93 7b 00 	sts	0x007B, r24
  Dt6=AdResult[3];
     aa0:	80 91 ed 00 	lds	r24, 0x00ED
     aa4:	90 91 ee 00 	lds	r25, 0x00EE
     aa8:	90 93 83 00 	sts	0x0083, r25
     aac:	80 93 82 00 	sts	0x0082, r24
}
     ab0:	cf 91       	pop	r28
     ab2:	df 91       	pop	r29
     ab4:	08 95       	ret

00000ab6 <switch_channel>:

unsigned int switch_channel(unsigned int channel)
{
     ab6:	df 93       	push	r29
     ab8:	cf 93       	push	r28
     aba:	00 d0       	rcall	.+0      	; 0xabc <switch_channel+0x6>
     abc:	00 d0       	rcall	.+0      	; 0xabe <switch_channel+0x8>
     abe:	cd b7       	in	r28, 0x3d	; 61
     ac0:	de b7       	in	r29, 0x3e	; 62
     ac2:	9a 83       	std	Y+2, r25	; 0x02
     ac4:	89 83       	std	Y+1, r24	; 0x01
       
   //алгоритм переключения индикации и записи оцифрованных значений датчиков в ОЗУ
   switch (count_channel)           //варианты индикации и записи оцифрованных значений датчиков в зависимости от канала
     ac6:	80 91 be 00 	lds	r24, 0x00BE
     aca:	90 91 bf 00 	lds	r25, 0x00BF
     ace:	9c 83       	std	Y+4, r25	; 0x04
     ad0:	8b 83       	std	Y+3, r24	; 0x03
     ad2:	8b 81       	ldd	r24, Y+3	; 0x03
     ad4:	9c 81       	ldd	r25, Y+4	; 0x04
     ad6:	83 30       	cpi	r24, 0x03	; 3
     ad8:	91 05       	cpc	r25, r1
     ada:	09 f4       	brne	.+2      	; 0xade <switch_channel+0x28>
     adc:	63 c0       	rjmp	.+198    	; 0xba4 <switch_channel+0xee>
     ade:	8b 81       	ldd	r24, Y+3	; 0x03
     ae0:	9c 81       	ldd	r25, Y+4	; 0x04
     ae2:	84 30       	cpi	r24, 0x04	; 4
     ae4:	91 05       	cpc	r25, r1
     ae6:	60 f4       	brcc	.+24     	; 0xb00 <switch_channel+0x4a>
     ae8:	8b 81       	ldd	r24, Y+3	; 0x03
     aea:	9c 81       	ldd	r25, Y+4	; 0x04
     aec:	81 30       	cpi	r24, 0x01	; 1
     aee:	91 05       	cpc	r25, r1
     af0:	79 f1       	breq	.+94     	; 0xb50 <switch_channel+0x9a>
     af2:	8b 81       	ldd	r24, Y+3	; 0x03
     af4:	9c 81       	ldd	r25, Y+4	; 0x04
     af6:	82 30       	cpi	r24, 0x02	; 2
     af8:	91 05       	cpc	r25, r1
     afa:	08 f0       	brcs	.+2      	; 0xafe <switch_channel+0x48>
     afc:	3e c0       	rjmp	.+124    	; 0xb7a <switch_channel+0xc4>
     afe:	13 c0       	rjmp	.+38     	; 0xb26 <switch_channel+0x70>
     b00:	8b 81       	ldd	r24, Y+3	; 0x03
     b02:	9c 81       	ldd	r25, Y+4	; 0x04
     b04:	85 30       	cpi	r24, 0x05	; 5
     b06:	91 05       	cpc	r25, r1
     b08:	09 f4       	brne	.+2      	; 0xb0c <switch_channel+0x56>
     b0a:	76 c0       	rjmp	.+236    	; 0xbf8 <switch_channel+0x142>
     b0c:	8b 81       	ldd	r24, Y+3	; 0x03
     b0e:	9c 81       	ldd	r25, Y+4	; 0x04
     b10:	85 30       	cpi	r24, 0x05	; 5
     b12:	91 05       	cpc	r25, r1
     b14:	08 f4       	brcc	.+2      	; 0xb18 <switch_channel+0x62>
     b16:	5b c0       	rjmp	.+182    	; 0xbce <switch_channel+0x118>
     b18:	8b 81       	ldd	r24, Y+3	; 0x03
     b1a:	9c 81       	ldd	r25, Y+4	; 0x04
     b1c:	86 30       	cpi	r24, 0x06	; 6
     b1e:	91 05       	cpc	r25, r1
     b20:	09 f4       	brne	.+2      	; 0xb24 <switch_channel+0x6e>
     b22:	7f c0       	rjmp	.+254    	; 0xc22 <switch_channel+0x16c>
     b24:	91 c0       	rjmp	.+290    	; 0xc48 <switch_channel+0x192>
   {
    case 0:     
      mask_leds_c = 0x00;           //PORT C.X маска следующего канала
     b26:	10 92 b5 00 	sts	0x00B5, r1
      mask_leds_d = 0x08;           //PORT D.3  0x08       
     b2a:	88 e0       	ldi	r24, 0x08	; 8
     b2c:	80 93 74 00 	sts	0x0074, r24
      array[count_channel] = Dt4;
     b30:	80 91 be 00 	lds	r24, 0x00BE
     b34:	90 91 bf 00 	lds	r25, 0x00BF
     b38:	20 91 d4 00 	lds	r18, 0x00D4
     b3c:	30 91 d5 00 	lds	r19, 0x00D5
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	fc 01       	movw	r30, r24
     b46:	ea 53       	subi	r30, 0x3A	; 58
     b48:	ff 4f       	sbci	r31, 0xFF	; 255
     b4a:	31 83       	std	Z+1, r19	; 0x01
     b4c:	20 83       	st	Z, r18
     b4e:	7c c0       	rjmp	.+248    	; 0xc48 <switch_channel+0x192>
      break;
    case 1:
      mask_leds_c = 0x04;           //PORT C.2  0x04
     b50:	84 e0       	ldi	r24, 0x04	; 4
     b52:	80 93 b5 00 	sts	0x00B5, r24
      mask_leds_d = 0x00;           //PORT D.X
     b56:	10 92 74 00 	sts	0x0074, r1
      array[count_channel] = Dt4;
     b5a:	80 91 be 00 	lds	r24, 0x00BE
     b5e:	90 91 bf 00 	lds	r25, 0x00BF
     b62:	20 91 d4 00 	lds	r18, 0x00D4
     b66:	30 91 d5 00 	lds	r19, 0x00D5
     b6a:	88 0f       	add	r24, r24
     b6c:	99 1f       	adc	r25, r25
     b6e:	fc 01       	movw	r30, r24
     b70:	ea 53       	subi	r30, 0x3A	; 58
     b72:	ff 4f       	sbci	r31, 0xFF	; 255
     b74:	31 83       	std	Z+1, r19	; 0x01
     b76:	20 83       	st	Z, r18
     b78:	67 c0       	rjmp	.+206    	; 0xc48 <switch_channel+0x192>
      break;
    case 2:
      mask_leds_c = 0x10;           //PORT C.4  0x10
     b7a:	80 e1       	ldi	r24, 0x10	; 16
     b7c:	80 93 b5 00 	sts	0x00B5, r24
      mask_leds_d = 0x00;           //PORT D.X
     b80:	10 92 74 00 	sts	0x0074, r1
      array[count_channel] = Dt4;
     b84:	80 91 be 00 	lds	r24, 0x00BE
     b88:	90 91 bf 00 	lds	r25, 0x00BF
     b8c:	20 91 d4 00 	lds	r18, 0x00D4
     b90:	30 91 d5 00 	lds	r19, 0x00D5
     b94:	88 0f       	add	r24, r24
     b96:	99 1f       	adc	r25, r25
     b98:	fc 01       	movw	r30, r24
     b9a:	ea 53       	subi	r30, 0x3A	; 58
     b9c:	ff 4f       	sbci	r31, 0xFF	; 255
     b9e:	31 83       	std	Z+1, r19	; 0x01
     ba0:	20 83       	st	Z, r18
     ba2:	52 c0       	rjmp	.+164    	; 0xc48 <switch_channel+0x192>
      break;
    case 3:
      mask_leds_c = 0x01;           //PORT C.0  0x01
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	80 93 b5 00 	sts	0x00B5, r24
      mask_leds_d = 0x00;           //PORT D.X
     baa:	10 92 74 00 	sts	0x0074, r1
      array[count_channel] = Dt5;
     bae:	80 91 be 00 	lds	r24, 0x00BE
     bb2:	90 91 bf 00 	lds	r25, 0x00BF
     bb6:	20 91 7b 00 	lds	r18, 0x007B
     bba:	30 91 7c 00 	lds	r19, 0x007C
     bbe:	88 0f       	add	r24, r24
     bc0:	99 1f       	adc	r25, r25
     bc2:	fc 01       	movw	r30, r24
     bc4:	ea 53       	subi	r30, 0x3A	; 58
     bc6:	ff 4f       	sbci	r31, 0xFF	; 255
     bc8:	31 83       	std	Z+1, r19	; 0x01
     bca:	20 83       	st	Z, r18
     bcc:	3d c0       	rjmp	.+122    	; 0xc48 <switch_channel+0x192>
      break;
    case 4:
      mask_leds_c = 0x08;           //PORT C.3  0x08
     bce:	88 e0       	ldi	r24, 0x08	; 8
     bd0:	80 93 b5 00 	sts	0x00B5, r24
      mask_leds_d = 0x00;           //PORT D.X
     bd4:	10 92 74 00 	sts	0x0074, r1
      array[count_channel] = Dt5;
     bd8:	80 91 be 00 	lds	r24, 0x00BE
     bdc:	90 91 bf 00 	lds	r25, 0x00BF
     be0:	20 91 7b 00 	lds	r18, 0x007B
     be4:	30 91 7c 00 	lds	r19, 0x007C
     be8:	88 0f       	add	r24, r24
     bea:	99 1f       	adc	r25, r25
     bec:	fc 01       	movw	r30, r24
     bee:	ea 53       	subi	r30, 0x3A	; 58
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	31 83       	std	Z+1, r19	; 0x01
     bf4:	20 83       	st	Z, r18
     bf6:	28 c0       	rjmp	.+80     	; 0xc48 <switch_channel+0x192>
      break;
    case 5:
      mask_leds_c = 0x02;           //PORT C.1  0x02
     bf8:	82 e0       	ldi	r24, 0x02	; 2
     bfa:	80 93 b5 00 	sts	0x00B5, r24
      mask_leds_d = 0x00;           //PORT D.X
     bfe:	10 92 74 00 	sts	0x0074, r1
      array[count_channel] = Dt6;
     c02:	80 91 be 00 	lds	r24, 0x00BE
     c06:	90 91 bf 00 	lds	r25, 0x00BF
     c0a:	20 91 82 00 	lds	r18, 0x0082
     c0e:	30 91 83 00 	lds	r19, 0x0083
     c12:	88 0f       	add	r24, r24
     c14:	99 1f       	adc	r25, r25
     c16:	fc 01       	movw	r30, r24
     c18:	ea 53       	subi	r30, 0x3A	; 58
     c1a:	ff 4f       	sbci	r31, 0xFF	; 255
     c1c:	31 83       	std	Z+1, r19	; 0x01
     c1e:	20 83       	st	Z, r18
     c20:	13 c0       	rjmp	.+38     	; 0xc48 <switch_channel+0x192>
      break;
    case 6:
      mask_leds_c = 0x00;           //PORT C.X и PORT D.X- индикация выхода из режима калибровки
     c22:	10 92 b5 00 	sts	0x00B5, r1
      mask_leds_d = 0x00;
     c26:	10 92 74 00 	sts	0x0074, r1
      array[count_channel] = Dt5;
     c2a:	80 91 be 00 	lds	r24, 0x00BE
     c2e:	90 91 bf 00 	lds	r25, 0x00BF
     c32:	20 91 7b 00 	lds	r18, 0x007B
     c36:	30 91 7c 00 	lds	r19, 0x007C
     c3a:	88 0f       	add	r24, r24
     c3c:	99 1f       	adc	r25, r25
     c3e:	fc 01       	movw	r30, r24
     c40:	ea 53       	subi	r30, 0x3A	; 58
     c42:	ff 4f       	sbci	r31, 0xFF	; 255
     c44:	31 83       	std	Z+1, r19	; 0x01
     c46:	20 83       	st	Z, r18
      break;
   }  
   return(array[count_channel]);
     c48:	80 91 be 00 	lds	r24, 0x00BE
     c4c:	90 91 bf 00 	lds	r25, 0x00BF
     c50:	88 0f       	add	r24, r24
     c52:	99 1f       	adc	r25, r25
     c54:	fc 01       	movw	r30, r24
     c56:	ea 53       	subi	r30, 0x3A	; 58
     c58:	ff 4f       	sbci	r31, 0xFF	; 255
     c5a:	80 81       	ld	r24, Z
     c5c:	91 81       	ldd	r25, Z+1	; 0x01
}
     c5e:	0f 90       	pop	r0
     c60:	0f 90       	pop	r0
     c62:	0f 90       	pop	r0
     c64:	0f 90       	pop	r0
     c66:	cf 91       	pop	r28
     c68:	df 91       	pop	r29
     c6a:	08 95       	ret

00000c6c <__vector_5>:

SIGNAL(SIG_INPUT_CAPTURE1)
{
     c6c:	1f 92       	push	r1
     c6e:	0f 92       	push	r0
     c70:	0f b6       	in	r0, 0x3f	; 63
     c72:	0f 92       	push	r0
     c74:	11 24       	eor	r1, r1
     c76:	2f 93       	push	r18
     c78:	3f 93       	push	r19
     c7a:	4f 93       	push	r20
     c7c:	5f 93       	push	r21
     c7e:	8f 93       	push	r24
     c80:	9f 93       	push	r25
     c82:	ef 93       	push	r30
     c84:	ff 93       	push	r31
     c86:	df 93       	push	r29
     c88:	cf 93       	push	r28
     c8a:	cd b7       	in	r28, 0x3d	; 61
     c8c:	de b7       	in	r29, 0x3e	; 62
  ICR1_value=ICR1; //чтение значения как можно раньше
     c8e:	e6 e4       	ldi	r30, 0x46	; 70
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	80 81       	ld	r24, Z
     c94:	91 81       	ldd	r25, Z+1	; 0x01
     c96:	90 93 c1 00 	sts	0x00C1, r25
     c9a:	80 93 c0 00 	sts	0x00C0, r24

  if ((ICR1_value>ICR1Old)&&(CtOverLow==16))
     c9e:	20 91 c0 00 	lds	r18, 0x00C0
     ca2:	30 91 c1 00 	lds	r19, 0x00C1
     ca6:	80 91 86 00 	lds	r24, 0x0086
     caa:	90 91 87 00 	lds	r25, 0x0087
     cae:	82 17       	cp	r24, r18
     cb0:	93 07       	cpc	r25, r19
     cb2:	08 f0       	brcs	.+2      	; 0xcb6 <__vector_5+0x4a>
     cb4:	43 c0       	rjmp	.+134    	; 0xd3c <__vector_5+0xd0>
     cb6:	80 91 7f 00 	lds	r24, 0x007F
     cba:	80 31       	cpi	r24, 0x10	; 16
     cbc:	09 f0       	breq	.+2      	; 0xcc0 <__vector_5+0x54>
     cbe:	3e c0       	rjmp	.+124    	; 0xd3c <__vector_5+0xd0>
  {
    TDizTemp[CtTDiz]=ICR1_value-ICR1Old; //разница между двумя измерениями
     cc0:	80 91 84 00 	lds	r24, 0x0084
     cc4:	48 2f       	mov	r20, r24
     cc6:	50 e0       	ldi	r21, 0x00	; 0
     cc8:	20 91 c0 00 	lds	r18, 0x00C0
     ccc:	30 91 c1 00 	lds	r19, 0x00C1
     cd0:	80 91 86 00 	lds	r24, 0x0086
     cd4:	90 91 87 00 	lds	r25, 0x0087
     cd8:	28 1b       	sub	r18, r24
     cda:	39 0b       	sbc	r19, r25
     cdc:	ca 01       	movw	r24, r20
     cde:	88 0f       	add	r24, r24
     ce0:	99 1f       	adc	r25, r25
     ce2:	fc 01       	movw	r30, r24
     ce4:	e4 57       	subi	r30, 0x74	; 116
     ce6:	ff 4f       	sbci	r31, 0xFF	; 255
     ce8:	31 83       	std	Z+1, r19	; 0x01
     cea:	20 83       	st	Z, r18
    if (TDizTemp[CtTDiz]<100)
     cec:	80 91 84 00 	lds	r24, 0x0084
     cf0:	88 2f       	mov	r24, r24
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	88 0f       	add	r24, r24
     cf6:	99 1f       	adc	r25, r25
     cf8:	fc 01       	movw	r30, r24
     cfa:	e4 57       	subi	r30, 0x74	; 116
     cfc:	ff 4f       	sbci	r31, 0xFF	; 255
     cfe:	80 81       	ld	r24, Z
     d00:	91 81       	ldd	r25, Z+1	; 0x01
     d02:	84 36       	cpi	r24, 0x64	; 100
     d04:	91 05       	cpc	r25, r1
     d06:	68 f4       	brcc	.+26     	; 0xd22 <__vector_5+0xb6>
      TDizTemp[CtTDiz]=0xffff; //FFFF - невозможное значение
     d08:	80 91 84 00 	lds	r24, 0x0084
     d0c:	88 2f       	mov	r24, r24
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	88 0f       	add	r24, r24
     d12:	99 1f       	adc	r25, r25
     d14:	fc 01       	movw	r30, r24
     d16:	e4 57       	subi	r30, 0x74	; 116
     d18:	ff 4f       	sbci	r31, 0xFF	; 255
     d1a:	8f ef       	ldi	r24, 0xFF	; 255
     d1c:	9f ef       	ldi	r25, 0xFF	; 255
     d1e:	91 83       	std	Z+1, r25	; 0x01
     d20:	80 83       	st	Z, r24

    if (CtTDiz) --CtTDiz;
     d22:	80 91 84 00 	lds	r24, 0x0084
     d26:	88 23       	and	r24, r24
     d28:	31 f0       	breq	.+12     	; 0xd36 <__vector_5+0xca>
     d2a:	80 91 84 00 	lds	r24, 0x0084
     d2e:	81 50       	subi	r24, 0x01	; 1
     d30:	80 93 84 00 	sts	0x0084, r24
     d34:	03 c0       	rjmp	.+6      	; 0xd3c <__vector_5+0xd0>
    else        CtTDiz=15;     //16 выборок
     d36:	8f e0       	ldi	r24, 0x0F	; 15
     d38:	80 93 84 00 	sts	0x0084, r24
  }
  ICR1Old=ICR1_value;
     d3c:	80 91 c0 00 	lds	r24, 0x00C0
     d40:	90 91 c1 00 	lds	r25, 0x00C1
     d44:	90 93 87 00 	sts	0x0087, r25
     d48:	80 93 86 00 	sts	0x0086, r24
  CtOverLow=16; //16 - переполнений до установки флага 0 оборотов.
     d4c:	80 e1       	ldi	r24, 0x10	; 16
     d4e:	80 93 7f 00 	sts	0x007F, r24
  NDiz_Overflow=0;
     d52:	10 92 72 00 	sts	0x0072, r1
}
     d56:	cf 91       	pop	r28
     d58:	df 91       	pop	r29
     d5a:	ff 91       	pop	r31
     d5c:	ef 91       	pop	r30
     d5e:	9f 91       	pop	r25
     d60:	8f 91       	pop	r24
     d62:	5f 91       	pop	r21
     d64:	4f 91       	pop	r20
     d66:	3f 91       	pop	r19
     d68:	2f 91       	pop	r18
     d6a:	0f 90       	pop	r0
     d6c:	0f be       	out	0x3f, r0	; 63
     d6e:	0f 90       	pop	r0
     d70:	1f 90       	pop	r1
     d72:	18 95       	reti

00000d74 <__vector_8>:

SIGNAL(SIG_OVERFLOW1) //8.192 Mc = 65536*0.125us - время переполнения таймера
{
     d74:	1f 92       	push	r1
     d76:	0f 92       	push	r0
     d78:	0f b6       	in	r0, 0x3f	; 63
     d7a:	0f 92       	push	r0
     d7c:	11 24       	eor	r1, r1
     d7e:	8f 93       	push	r24
     d80:	9f 93       	push	r25
     d82:	af 93       	push	r26
     d84:	bf 93       	push	r27
     d86:	ef 93       	push	r30
     d88:	ff 93       	push	r31
     d8a:	df 93       	push	r29
     d8c:	cf 93       	push	r28
     d8e:	cd b7       	in	r28, 0x3d	; 61
     d90:	de b7       	in	r29, 0x3e	; 62
  if (CtOverLow) CtOverLow--;  //16 переполнений до установки флага переполнения NDiz_Overflow)
     d92:	80 91 7f 00 	lds	r24, 0x007F
     d96:	88 23       	and	r24, r24
     d98:	31 f0       	breq	.+12     	; 0xda6 <__vector_8+0x32>
     d9a:	80 91 7f 00 	lds	r24, 0x007F
     d9e:	81 50       	subi	r24, 0x01	; 1
     da0:	80 93 7f 00 	sts	0x007F, r24
     da4:	03 c0       	rjmp	.+6      	; 0xdac <__vector_8+0x38>
  else           NDiz_Overflow=1;
     da6:	81 e0       	ldi	r24, 0x01	; 1
     da8:	80 93 72 00 	sts	0x0072, r24

  if(timer_250 == 0)           //если прошло 250 мс без изменения индикации 
     dac:	80 91 ba 00 	lds	r24, 0x00BA
     db0:	88 23       	and	r24, r24
     db2:	b1 f4       	brne	.+44     	; 0xde0 <__vector_8+0x6c>
  {
    timer_250 = RELOAD;        //начать новый цикл с периодом 250 мс
     db4:	8f e1       	ldi	r24, 0x1F	; 31
     db6:	80 93 ba 00 	sts	0x00BA, r24
    PORTC ^= mask_leds_c;      //инвертировать сигнал, управляющий индикацией
     dba:	a5 e3       	ldi	r26, 0x35	; 53
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	e5 e3       	ldi	r30, 0x35	; 53
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	90 81       	ld	r25, Z
     dc4:	80 91 b5 00 	lds	r24, 0x00B5
     dc8:	89 27       	eor	r24, r25
     dca:	8c 93       	st	X, r24
    PORTD ^= mask_leds_d;
     dcc:	a2 e3       	ldi	r26, 0x32	; 50
     dce:	b0 e0       	ldi	r27, 0x00	; 0
     dd0:	e2 e3       	ldi	r30, 0x32	; 50
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	90 81       	ld	r25, Z
     dd6:	80 91 74 00 	lds	r24, 0x0074
     dda:	89 27       	eor	r24, r25
     ddc:	8c 93       	st	X, r24
     dde:	05 c0       	rjmp	.+10     	; 0xdea <__vector_8+0x76>
  }
  else timer_250--;
     de0:	80 91 ba 00 	lds	r24, 0x00BA
     de4:	81 50       	subi	r24, 0x01	; 1
     de6:	80 93 ba 00 	sts	0x00BA, r24

  //сканирование кнопок
  if(Key_Inp == KEY_EMPTY)                      
     dea:	80 91 8a 00 	lds	r24, 0x008A
     dee:	88 23       	and	r24, r24
     df0:	09 f0       	breq	.+2      	; 0xdf4 <__vector_8+0x80>
     df2:	50 c0       	rjmp	.+160    	; 0xe94 <__vector_8+0x120>
  {
    if((INKEY_PORT & KEY_MASK) != KEY_MASK)
     df4:	e6 e3       	ldi	r30, 0x36	; 54
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	88 2f       	mov	r24, r24
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	8c 70       	andi	r24, 0x0C	; 12
     e00:	90 70       	andi	r25, 0x00	; 0
     e02:	8c 30       	cpi	r24, 0x0C	; 12
     e04:	91 05       	cpc	r25, r1
     e06:	31 f0       	breq	.+12     	; 0xe14 <__vector_8+0xa0>
        Key_new = INKEY_PORT & KEY_MASK;
     e08:	e6 e3       	ldi	r30, 0x36	; 54
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	8c 70       	andi	r24, 0x0C	; 12
     e10:	80 93 ae 00 	sts	0x00AE, r24
    if (Key_new != 0xff)
     e14:	80 91 ae 00 	lds	r24, 0x00AE
     e18:	8f 3f       	cpi	r24, 0xFF	; 255
     e1a:	21 f1       	breq	.+72     	; 0xe64 <__vector_8+0xf0>
    {
      if(Key_new == Key_old)
     e1c:	90 91 ae 00 	lds	r25, 0x00AE
     e20:	80 91 ac 00 	lds	r24, 0x00AC
     e24:	98 17       	cp	r25, r24
     e26:	71 f4       	brne	.+28     	; 0xe44 <__vector_8+0xd0>
      {
        if(Count_on > KSTATE) Ff_key = 1;
     e28:	80 91 b6 00 	lds	r24, 0x00B6
     e2c:	86 30       	cpi	r24, 0x06	; 6
     e2e:	20 f0       	brcs	.+8      	; 0xe38 <__vector_8+0xc4>
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	80 93 88 00 	sts	0x0088, r24
     e36:	12 c0       	rjmp	.+36     	; 0xe5c <__vector_8+0xe8>
        else Count_on++;
     e38:	80 91 b6 00 	lds	r24, 0x00B6
     e3c:	8f 5f       	subi	r24, 0xFF	; 255
     e3e:	80 93 b6 00 	sts	0x00B6, r24
     e42:	0c c0       	rjmp	.+24     	; 0xe5c <__vector_8+0xe8>
      }
      else
      {
        Key_old = Key_new;
     e44:	80 91 ae 00 	lds	r24, 0x00AE
     e48:	80 93 ac 00 	sts	0x00AC, r24
        Count_on = Count_off = 0;
     e4c:	10 92 75 00 	sts	0x0075, r1
     e50:	80 91 75 00 	lds	r24, 0x0075
     e54:	80 93 b6 00 	sts	0x00B6, r24
        Ff_key = 0;
     e58:	10 92 88 00 	sts	0x0088, r1
      }
      Key_new = 0xff;
     e5c:	8f ef       	ldi	r24, 0xFF	; 255
     e5e:	80 93 ae 00 	sts	0x00AE, r24
     e62:	18 c0       	rjmp	.+48     	; 0xe94 <__vector_8+0x120>
    }
    else
    {
      if(Ff_key == 1)
     e64:	80 91 88 00 	lds	r24, 0x0088
     e68:	81 30       	cpi	r24, 0x01	; 1
     e6a:	89 f4       	brne	.+34     	; 0xe8e <__vector_8+0x11a>
      {
        if(Count_off > KSTATE)
     e6c:	80 91 75 00 	lds	r24, 0x0075
     e70:	86 30       	cpi	r24, 0x06	; 6
     e72:	38 f0       	brcs	.+14     	; 0xe82 <__vector_8+0x10e>
        {
          Ff_key = 0;
     e74:	10 92 88 00 	sts	0x0088, r1
          Key_Inp = Key_old;
     e78:	80 91 ac 00 	lds	r24, 0x00AC
     e7c:	80 93 8a 00 	sts	0x008A, r24
     e80:	09 c0       	rjmp	.+18     	; 0xe94 <__vector_8+0x120>
        }
        else Count_off++;
     e82:	80 91 75 00 	lds	r24, 0x0075
     e86:	8f 5f       	subi	r24, 0xFF	; 255
     e88:	80 93 75 00 	sts	0x0075, r24
     e8c:	03 c0       	rjmp	.+6      	; 0xe94 <__vector_8+0x120>
      }
      else Key_old = 0x55;
     e8e:	85 e5       	ldi	r24, 0x55	; 85
     e90:	80 93 ac 00 	sts	0x00AC, r24
    }
  }
}
     e94:	cf 91       	pop	r28
     e96:	df 91       	pop	r29
     e98:	ff 91       	pop	r31
     e9a:	ef 91       	pop	r30
     e9c:	bf 91       	pop	r27
     e9e:	af 91       	pop	r26
     ea0:	9f 91       	pop	r25
     ea2:	8f 91       	pop	r24
     ea4:	0f 90       	pop	r0
     ea6:	0f be       	out	0x3f, r0	; 63
     ea8:	0f 90       	pop	r0
     eaa:	1f 90       	pop	r1
     eac:	18 95       	reti

00000eae <__vector_14>:

SIGNAL(SIG_ADC)
{
     eae:	1f 92       	push	r1
     eb0:	0f 92       	push	r0
     eb2:	0f b6       	in	r0, 0x3f	; 63
     eb4:	0f 92       	push	r0
     eb6:	11 24       	eor	r1, r1
     eb8:	2f 93       	push	r18
     eba:	3f 93       	push	r19
     ebc:	4f 93       	push	r20
     ebe:	5f 93       	push	r21
     ec0:	8f 93       	push	r24
     ec2:	9f 93       	push	r25
     ec4:	af 93       	push	r26
     ec6:	bf 93       	push	r27
     ec8:	ef 93       	push	r30
     eca:	ff 93       	push	r31
     ecc:	df 93       	push	r29
     ece:	cf 93       	push	r28
     ed0:	00 d0       	rcall	.+0      	; 0xed2 <__vector_14+0x24>
     ed2:	cd b7       	in	r28, 0x3d	; 61
     ed4:	de b7       	in	r29, 0x3e	; 62
  unsigned int RegInt0;
  RegInt0=ADC;
     ed6:	e4 e2       	ldi	r30, 0x24	; 36
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	91 81       	ldd	r25, Z+1	; 0x01
     ede:	9a 83       	std	Y+2, r25	; 0x02
     ee0:	89 83       	std	Y+1, r24	; 0x01

  if (CtAd)
     ee2:	80 91 d6 00 	lds	r24, 0x00D6
     ee6:	88 23       	and	r24, r24
     ee8:	b9 f0       	breq	.+46     	; 0xf18 <__vector_14+0x6a>
  {
    --CtAd; //64 измерения
     eea:	80 91 d6 00 	lds	r24, 0x00D6
     eee:	81 50       	subi	r24, 0x01	; 1
     ef0:	80 93 d6 00 	sts	0x00D6, r24
    if (CtAd<=CtAd0)
     ef4:	80 91 d6 00 	lds	r24, 0x00D6
     ef8:	80 34       	cpi	r24, 0x40	; 64
     efa:	08 f0       	brcs	.+2      	; 0xefe <__vector_14+0x50>
     efc:	4e c0       	rjmp	.+156    	; 0xf9a <__vector_14+0xec>
    {
      AdTemp +=RegInt0;
     efe:	80 91 77 00 	lds	r24, 0x0077
     f02:	90 91 78 00 	lds	r25, 0x0078
     f06:	29 81       	ldd	r18, Y+1	; 0x01
     f08:	3a 81       	ldd	r19, Y+2	; 0x02
     f0a:	82 0f       	add	r24, r18
     f0c:	93 1f       	adc	r25, r19
     f0e:	90 93 78 00 	sts	0x0078, r25
     f12:	80 93 77 00 	sts	0x0077, r24
     f16:	41 c0       	rjmp	.+130    	; 0xf9a <__vector_14+0xec>
    }
  }
  else
  {
    AdResult[NumberAd]=AdTemp;
     f18:	80 91 80 00 	lds	r24, 0x0080
     f1c:	88 2f       	mov	r24, r24
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	20 91 77 00 	lds	r18, 0x0077
     f24:	30 91 78 00 	lds	r19, 0x0078
     f28:	88 0f       	add	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	fc 01       	movw	r30, r24
     f2e:	e9 51       	subi	r30, 0x19	; 25
     f30:	ff 4f       	sbci	r31, 0xFF	; 255
     f32:	31 83       	std	Z+1, r19	; 0x01
     f34:	20 83       	st	Z, r18
    AdResult[NumberAd]>>=6;
     f36:	80 91 80 00 	lds	r24, 0x0080
     f3a:	48 2f       	mov	r20, r24
     f3c:	50 e0       	ldi	r21, 0x00	; 0
     f3e:	80 91 80 00 	lds	r24, 0x0080
     f42:	88 2f       	mov	r24, r24
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	88 0f       	add	r24, r24
     f48:	99 1f       	adc	r25, r25
     f4a:	fc 01       	movw	r30, r24
     f4c:	e9 51       	subi	r30, 0x19	; 25
     f4e:	ff 4f       	sbci	r31, 0xFF	; 255
     f50:	80 81       	ld	r24, Z
     f52:	91 81       	ldd	r25, Z+1	; 0x01
     f54:	9c 01       	movw	r18, r24
     f56:	00 24       	eor	r0, r0
     f58:	22 0f       	add	r18, r18
     f5a:	33 1f       	adc	r19, r19
     f5c:	00 1c       	adc	r0, r0
     f5e:	22 0f       	add	r18, r18
     f60:	33 1f       	adc	r19, r19
     f62:	00 1c       	adc	r0, r0
     f64:	23 2f       	mov	r18, r19
     f66:	30 2d       	mov	r19, r0
     f68:	ca 01       	movw	r24, r20
     f6a:	88 0f       	add	r24, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	fc 01       	movw	r30, r24
     f70:	e9 51       	subi	r30, 0x19	; 25
     f72:	ff 4f       	sbci	r31, 0xFF	; 255
     f74:	31 83       	std	Z+1, r19	; 0x01
     f76:	20 83       	st	Z, r18
    AdTemp=0;
     f78:	10 92 78 00 	sts	0x0078, r1
     f7c:	10 92 77 00 	sts	0x0077, r1
    CtAd=CtAd0+2;
     f80:	81 e4       	ldi	r24, 0x41	; 65
     f82:	80 93 d6 00 	sts	0x00D6, r24
    //if(NumberAd==11)
    NumberAd=NumberAdNew[NumberAd];
     f86:	80 91 80 00 	lds	r24, 0x0080
     f8a:	88 2f       	mov	r24, r24
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	fc 01       	movw	r30, r24
     f90:	e0 5a       	subi	r30, 0xA0	; 160
     f92:	ff 4f       	sbci	r31, 0xFF	; 255
     f94:	80 81       	ld	r24, Z
     f96:	80 93 80 00 	sts	0x0080, r24
  }

  RegInt0=ADMUX;
     f9a:	e7 e2       	ldi	r30, 0x27	; 39
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	88 2f       	mov	r24, r24
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	9a 83       	std	Y+2, r25	; 0x02
     fa6:	89 83       	std	Y+1, r24	; 0x01
  RegInt0 &=0xe0;     //обнуление MUX4..0
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	9a 81       	ldd	r25, Y+2	; 0x02
     fac:	80 7e       	andi	r24, 0xE0	; 224
     fae:	90 70       	andi	r25, 0x00	; 0
     fb0:	9a 83       	std	Y+2, r25	; 0x02
     fb2:	89 83       	std	Y+1, r24	; 0x01
  RegInt0 |=NumberAd; //выставление нового адреса канала ацп
     fb4:	80 91 80 00 	lds	r24, 0x0080
     fb8:	28 2f       	mov	r18, r24
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	9a 81       	ldd	r25, Y+2	; 0x02
     fc0:	82 2b       	or	r24, r18
     fc2:	93 2b       	or	r25, r19
     fc4:	9a 83       	std	Y+2, r25	; 0x02
     fc6:	89 83       	std	Y+1, r24	; 0x01
  ADMUX=RegInt0;
     fc8:	e7 e2       	ldi	r30, 0x27	; 39
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	89 81       	ldd	r24, Y+1	; 0x01
     fce:	80 83       	st	Z, r24

  ADCSRA |=(1<<ADSC); //start conversion
     fd0:	a6 e2       	ldi	r26, 0x26	; 38
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	e6 e2       	ldi	r30, 0x26	; 38
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	80 64       	ori	r24, 0x40	; 64
     fdc:	8c 93       	st	X, r24
}
     fde:	0f 90       	pop	r0
     fe0:	0f 90       	pop	r0
     fe2:	cf 91       	pop	r28
     fe4:	df 91       	pop	r29
     fe6:	ff 91       	pop	r31
     fe8:	ef 91       	pop	r30
     fea:	bf 91       	pop	r27
     fec:	af 91       	pop	r26
     fee:	9f 91       	pop	r25
     ff0:	8f 91       	pop	r24
     ff2:	5f 91       	pop	r21
     ff4:	4f 91       	pop	r20
     ff6:	3f 91       	pop	r19
     ff8:	2f 91       	pop	r18
     ffa:	0f 90       	pop	r0
     ffc:	0f be       	out	0x3f, r0	; 63
     ffe:	0f 90       	pop	r0
    1000:	1f 90       	pop	r1
    1002:	18 95       	reti

00001004 <__udivmodsi4>:
    1004:	a1 e2       	ldi	r26, 0x21	; 33
    1006:	1a 2e       	mov	r1, r26
    1008:	aa 1b       	sub	r26, r26
    100a:	bb 1b       	sub	r27, r27
    100c:	fd 01       	movw	r30, r26
    100e:	0d c0       	rjmp	.+26     	; 0x102a <__udivmodsi4_ep>

00001010 <__udivmodsi4_loop>:
    1010:	aa 1f       	adc	r26, r26
    1012:	bb 1f       	adc	r27, r27
    1014:	ee 1f       	adc	r30, r30
    1016:	ff 1f       	adc	r31, r31
    1018:	a2 17       	cp	r26, r18
    101a:	b3 07       	cpc	r27, r19
    101c:	e4 07       	cpc	r30, r20
    101e:	f5 07       	cpc	r31, r21
    1020:	20 f0       	brcs	.+8      	; 0x102a <__udivmodsi4_ep>
    1022:	a2 1b       	sub	r26, r18
    1024:	b3 0b       	sbc	r27, r19
    1026:	e4 0b       	sbc	r30, r20
    1028:	f5 0b       	sbc	r31, r21

0000102a <__udivmodsi4_ep>:
    102a:	66 1f       	adc	r22, r22
    102c:	77 1f       	adc	r23, r23
    102e:	88 1f       	adc	r24, r24
    1030:	99 1f       	adc	r25, r25
    1032:	1a 94       	dec	r1
    1034:	69 f7       	brne	.-38     	; 0x1010 <__udivmodsi4_loop>
    1036:	60 95       	com	r22
    1038:	70 95       	com	r23
    103a:	80 95       	com	r24
    103c:	90 95       	com	r25
    103e:	9b 01       	movw	r18, r22
    1040:	ac 01       	movw	r20, r24
    1042:	bd 01       	movw	r22, r26
    1044:	cf 01       	movw	r24, r30
    1046:	08 95       	ret

00001048 <__eerd_word_m8535>:
    1048:	a8 e1       	ldi	r26, 0x18	; 24
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	42 e0       	ldi	r20, 0x02	; 2
    104e:	50 e0       	ldi	r21, 0x00	; 0
    1050:	06 c0       	rjmp	.+12     	; 0x105e <__eerd_blraw_m8535>

00001052 <__eeupd_word_m8535>:
    1052:	01 96       	adiw	r24, 0x01	; 1
    1054:	27 2f       	mov	r18, r23
    1056:	12 d0       	rcall	.+36     	; 0x107c <__eeupd_r18_m8535>
    1058:	10 c0       	rjmp	.+32     	; 0x107a <__eeupd_byte_m8535>

0000105a <__eerd_block_m8535>:
    105a:	dc 01       	movw	r26, r24
    105c:	cb 01       	movw	r24, r22

0000105e <__eerd_blraw_m8535>:
    105e:	fc 01       	movw	r30, r24
    1060:	e1 99       	sbic	0x1c, 1	; 28
    1062:	fe cf       	rjmp	.-4      	; 0x1060 <__eerd_blraw_m8535+0x2>
    1064:	06 c0       	rjmp	.+12     	; 0x1072 <__eerd_blraw_m8535+0x14>
    1066:	ff bb       	out	0x1f, r31	; 31
    1068:	ee bb       	out	0x1e, r30	; 30
    106a:	e0 9a       	sbi	0x1c, 0	; 28
    106c:	31 96       	adiw	r30, 0x01	; 1
    106e:	0d b2       	in	r0, 0x1d	; 29
    1070:	0d 92       	st	X+, r0
    1072:	41 50       	subi	r20, 0x01	; 1
    1074:	50 40       	sbci	r21, 0x00	; 0
    1076:	b8 f7       	brcc	.-18     	; 0x1066 <__eerd_blraw_m8535+0x8>
    1078:	08 95       	ret

0000107a <__eeupd_byte_m8535>:
    107a:	26 2f       	mov	r18, r22

0000107c <__eeupd_r18_m8535>:
    107c:	e1 99       	sbic	0x1c, 1	; 28
    107e:	fe cf       	rjmp	.-4      	; 0x107c <__eeupd_r18_m8535>
    1080:	9f bb       	out	0x1f, r25	; 31
    1082:	8e bb       	out	0x1e, r24	; 30
    1084:	e0 9a       	sbi	0x1c, 0	; 28
    1086:	01 97       	sbiw	r24, 0x01	; 1
    1088:	0d b2       	in	r0, 0x1d	; 29
    108a:	02 16       	cp	r0, r18
    108c:	31 f0       	breq	.+12     	; 0x109a <__eeupd_r18_m8535+0x1e>
    108e:	2d bb       	out	0x1d, r18	; 29
    1090:	0f b6       	in	r0, 0x3f	; 63
    1092:	f8 94       	cli
    1094:	e2 9a       	sbi	0x1c, 2	; 28
    1096:	e1 9a       	sbi	0x1c, 1	; 28
    1098:	0f be       	out	0x3f, r0	; 63
    109a:	08 95       	ret

0000109c <_exit>:
    109c:	f8 94       	cli

0000109e <__stop_program>:
    109e:	ff cf       	rjmp	.-2      	; 0x109e <__stop_program>
