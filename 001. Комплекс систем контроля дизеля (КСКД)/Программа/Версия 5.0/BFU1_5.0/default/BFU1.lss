
BFU1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000121e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  0000121e  000012b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000008d  00800072  00800072  000012c4  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000012c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002df  00000000  00000000  000012e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000567  00000000  00000000  000015c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000144  00000000  00000000  00001b2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000073d  00000000  00000000  00001c6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  000023ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000296  00000000  00000000  0000243c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
       2:	2e c0       	rjmp	.+92     	; 0x60 <__bad_interrupt>
       4:	2d c0       	rjmp	.+90     	; 0x60 <__bad_interrupt>
       6:	2c c0       	rjmp	.+88     	; 0x60 <__bad_interrupt>
       8:	2b c0       	rjmp	.+86     	; 0x60 <__bad_interrupt>
       a:	f4 c6       	rjmp	.+3560   	; 0xdf4 <__vector_5>
       c:	29 c0       	rjmp	.+82     	; 0x60 <__bad_interrupt>
       e:	28 c0       	rjmp	.+80     	; 0x60 <__bad_interrupt>
      10:	75 c7       	rjmp	.+3818   	; 0xefc <__vector_8>
      12:	26 c0       	rjmp	.+76     	; 0x60 <__bad_interrupt>
      14:	25 c0       	rjmp	.+74     	; 0x60 <__bad_interrupt>
      16:	24 c0       	rjmp	.+72     	; 0x60 <__bad_interrupt>
      18:	23 c0       	rjmp	.+70     	; 0x60 <__bad_interrupt>
      1a:	22 c0       	rjmp	.+68     	; 0x60 <__bad_interrupt>
      1c:	0c c8       	rjmp	.-4072   	; 0xfffff036 <__eeprom_end+0xff7ef036>
      1e:	20 c0       	rjmp	.+64     	; 0x60 <__bad_interrupt>
      20:	1f c0       	rjmp	.+62     	; 0x60 <__bad_interrupt>
      22:	1e c0       	rjmp	.+60     	; 0x60 <__bad_interrupt>
      24:	1d c0       	rjmp	.+58     	; 0x60 <__bad_interrupt>
      26:	1c c0       	rjmp	.+56     	; 0x60 <__bad_interrupt>
      28:	1b c0       	rjmp	.+54     	; 0x60 <__bad_interrupt>

0000002a <__ctors_end>:
      2a:	11 24       	eor	r1, r1
      2c:	1f be       	out	0x3f, r1	; 63
      2e:	cf e5       	ldi	r28, 0x5F	; 95
      30:	d2 e0       	ldi	r29, 0x02	; 2
      32:	de bf       	out	0x3e, r29	; 62
      34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_copy_data>:
      36:	10 e0       	ldi	r17, 0x00	; 0
      38:	a0 e6       	ldi	r26, 0x60	; 96
      3a:	b0 e0       	ldi	r27, 0x00	; 0
      3c:	ee e1       	ldi	r30, 0x1E	; 30
      3e:	f2 e1       	ldi	r31, 0x12	; 18
      40:	02 c0       	rjmp	.+4      	; 0x46 <.do_copy_data_start>

00000042 <.do_copy_data_loop>:
      42:	05 90       	lpm	r0, Z+
      44:	0d 92       	st	X+, r0

00000046 <.do_copy_data_start>:
      46:	a2 37       	cpi	r26, 0x72	; 114
      48:	b1 07       	cpc	r27, r17
      4a:	d9 f7       	brne	.-10     	; 0x42 <.do_copy_data_loop>

0000004c <__do_clear_bss>:
      4c:	10 e0       	ldi	r17, 0x00	; 0
      4e:	a2 e7       	ldi	r26, 0x72	; 114
      50:	b0 e0       	ldi	r27, 0x00	; 0
      52:	01 c0       	rjmp	.+2      	; 0x56 <.do_clear_bss_start>

00000054 <.do_clear_bss_loop>:
      54:	1d 92       	st	X+, r1

00000056 <.do_clear_bss_start>:
      56:	af 3f       	cpi	r26, 0xFF	; 255
      58:	b1 07       	cpc	r27, r17
      5a:	e1 f7       	brne	.-8      	; 0x54 <.do_clear_bss_loop>
      5c:	02 d0       	rcall	.+4      	; 0x62 <main>
      5e:	dd c8       	rjmp	.-3654   	; 0xfffff21a <__eeprom_end+0xff7ef21a>

00000060 <__bad_interrupt>:
      60:	cf cf       	rjmp	.-98     	; 0x0 <__vectors>

00000062 <main>:
#include "main.h"
/*==========================================================================================================================*/
/*                                                  Главная функция программы                                               */
/*==========================================================================================================================*/
int main(void)
{
      62:	0f 93       	push	r16
      64:	1f 93       	push	r17
      66:	df 93       	push	r29
      68:	cf 93       	push	r28
      6a:	00 d0       	rcall	.+0      	; 0x6c <main+0xa>
      6c:	00 d0       	rcall	.+0      	; 0x6e <main+0xc>
      6e:	0f 92       	push	r0
      70:	cd b7       	in	r28, 0x3d	; 61
      72:	de b7       	in	r29, 0x3e	; 62
  unsigned char j;

  DDRA  = 0;           //ALL inputs
      74:	ea e3       	ldi	r30, 0x3A	; 58
      76:	f0 e0       	ldi	r31, 0x00	; 0
      78:	10 82       	st	Z, r1
  PORTA = 0;
      7a:	eb e3       	ldi	r30, 0x3B	; 59
      7c:	f0 e0       	ldi	r31, 0x00	; 0
      7e:	10 82       	st	Z, r1

  DDRB  = 0xe3;        //SAVE, TOGGLE и MODE - входы
      80:	e7 e3       	ldi	r30, 0x37	; 55
      82:	f0 e0       	ldi	r31, 0x00	; 0
      84:	83 ee       	ldi	r24, 0xE3	; 227
      86:	80 83       	st	Z, r24
  PORTB = 0xff;
      88:	e8 e3       	ldi	r30, 0x38	; 56
      8a:	f0 e0       	ldi	r31, 0x00	; 0
      8c:	8f ef       	ldi	r24, 0xFF	; 255
      8e:	80 83       	st	Z, r24

  DDRC  = 0xff;
      90:	e4 e3       	ldi	r30, 0x34	; 52
      92:	f0 e0       	ldi	r31, 0x00	; 0
      94:	8f ef       	ldi	r24, 0xFF	; 255
      96:	80 83       	st	Z, r24
  PORTC = 0xff;
      98:	e5 e3       	ldi	r30, 0x35	; 53
      9a:	f0 e0       	ldi	r31, 0x00	; 0
      9c:	8f ef       	ldi	r24, 0xFF	; 255
      9e:	80 83       	st	Z, r24

  DDRD  = 0xbf;        //PD6 - Input
      a0:	e1 e3       	ldi	r30, 0x31	; 49
      a2:	f0 e0       	ldi	r31, 0x00	; 0
      a4:	8f eb       	ldi	r24, 0xBF	; 191
      a6:	80 83       	st	Z, r24
  PORTD = 0xff;        //transmit=off
      a8:	e2 e3       	ldi	r30, 0x32	; 50
      aa:	f0 e0       	ldi	r31, 0x00	; 0
      ac:	8f ef       	ldi	r24, 0xFF	; 255
      ae:	80 83       	st	Z, r24

  _WDR();
      b0:	a8 95       	wdr

  InitAd();
      b2:	31 d4       	rcall	.+2146   	; 0x916 <InitAd>
  ADCSRA |= (1<<ADIE); //enable AD interrupt
      b4:	a6 e2       	ldi	r26, 0x26	; 38
      b6:	b0 e0       	ldi	r27, 0x00	; 0
      b8:	e6 e2       	ldi	r30, 0x26	; 38
      ba:	f0 e0       	ldi	r31, 0x00	; 0
      bc:	80 81       	ld	r24, Z
      be:	88 60       	ori	r24, 0x08	; 8
      c0:	8c 93       	st	X, r24
  sei();               //enable global interrupt
      c2:	78 94       	sei

  SPCR = 0;            //disable SPI
      c4:	ed e2       	ldi	r30, 0x2D	; 45
      c6:	f0 e0       	ldi	r31, 0x00	; 0
      c8:	10 82       	st	Z, r1
  SPSR = 0;
      ca:	ee e2       	ldi	r30, 0x2E	; 46
      cc:	f0 e0       	ldi	r31, 0x00	; 0
      ce:	10 82       	st	Z, r1

  TIMSK = TIMSK|0x20; //разрешение прерывания по событию «Захват» таймера/счетчика T1
      d0:	a9 e5       	ldi	r26, 0x59	; 89
      d2:	b0 e0       	ldi	r27, 0x00	; 0
      d4:	e9 e5       	ldi	r30, 0x59	; 89
      d6:	f0 e0       	ldi	r31, 0x00	; 0
      d8:	80 81       	ld	r24, Z
      da:	80 62       	ori	r24, 0x20	; 32
      dc:	8c 93       	st	X, r24
  TCCR1B = 0xc1;      //ICNC1 = 1 схема подавления помех включена и захват осуществляется только в случае 4-х одинаковых
      de:	ee e4       	ldi	r30, 0x4E	; 78
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	81 ec       	ldi	r24, 0xC1	; 193
      e4:	80 83       	st	Z, r24
  // выборок, соответствующих активному фронту сигнала
  //ICES1 = 1 cохранение счетного регистра в регистре захвата осуществляется по нарастающему фронту сигнала
  //CS10  = 1 нет предделения тактовой частоты контроллера для тактирования Т1, 0.0625мкс
  TIMSK = TIMSK|0x4;  //разрешение прерывания по переполнению таймера/счетчика T1
      e6:	a9 e5       	ldi	r26, 0x59	; 89
      e8:	b0 e0       	ldi	r27, 0x00	; 0
      ea:	e9 e5       	ldi	r30, 0x59	; 89
      ec:	f0 e0       	ldi	r31, 0x00	; 0
      ee:	80 81       	ld	r24, Z
      f0:	84 60       	ori	r24, 0x04	; 4
      f2:	8c 93       	st	X, r24

  Dt4_8 = Dt4_30 = Dt4_37 = Dt5_37 = Dt5_95 = Dt5_118 = Dt6_115 = Dd1_1 = Dd1_4 = Nd_500 = Nd_1450 = Nd_1750 = 0;
      f4:	10 92 85 00 	sts	0x0085, r1
      f8:	80 91 85 00 	lds	r24, 0x0085
      fc:	80 93 bb 00 	sts	0x00BB, r24
     100:	80 91 bb 00 	lds	r24, 0x00BB
     104:	80 93 fe 00 	sts	0x00FE, r24
     108:	80 91 fe 00 	lds	r24, 0x00FE
     10c:	80 93 89 00 	sts	0x0089, r24
     110:	80 91 89 00 	lds	r24, 0x0089
     114:	80 93 7d 00 	sts	0x007D, r24
     118:	80 91 7d 00 	lds	r24, 0x007D
     11c:	80 93 76 00 	sts	0x0076, r24
     120:	80 91 76 00 	lds	r24, 0x0076
     124:	80 93 d7 00 	sts	0x00D7, r24
     128:	80 91 d7 00 	lds	r24, 0x00D7
     12c:	80 93 b1 00 	sts	0x00B1, r24
     130:	80 91 b1 00 	lds	r24, 0x00B1
     134:	80 93 b4 00 	sts	0x00B4, r24
     138:	80 91 b4 00 	lds	r24, 0x00B4
     13c:	80 93 81 00 	sts	0x0081, r24
     140:	80 91 81 00 	lds	r24, 0x0081
     144:	80 93 8b 00 	sts	0x008B, r24
     148:	80 91 8b 00 	lds	r24, 0x008B
     14c:	80 93 d6 00 	sts	0x00D6, r24
  for(j=0; j<7; j++) {array[j] = 0; from_ee[j] = 0;}
     150:	1a 82       	std	Y+2, r1	; 0x02
     152:	17 c0       	rjmp	.+46     	; 0x182 <main+0x120>
     154:	8a 81       	ldd	r24, Y+2	; 0x02
     156:	88 2f       	mov	r24, r24
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	88 0f       	add	r24, r24
     15c:	99 1f       	adc	r25, r25
     15e:	fc 01       	movw	r30, r24
     160:	eb 53       	subi	r30, 0x3B	; 59
     162:	ff 4f       	sbci	r31, 0xFF	; 255
     164:	11 82       	std	Z+1, r1	; 0x01
     166:	10 82       	st	Z, r1
     168:	8a 81       	ldd	r24, Y+2	; 0x02
     16a:	88 2f       	mov	r24, r24
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	88 0f       	add	r24, r24
     170:	99 1f       	adc	r25, r25
     172:	fc 01       	movw	r30, r24
     174:	e8 52       	subi	r30, 0x28	; 40
     176:	ff 4f       	sbci	r31, 0xFF	; 255
     178:	11 82       	std	Z+1, r1	; 0x01
     17a:	10 82       	st	Z, r1
     17c:	8a 81       	ldd	r24, Y+2	; 0x02
     17e:	8f 5f       	subi	r24, 0xFF	; 255
     180:	8a 83       	std	Y+2, r24	; 0x02
     182:	8a 81       	ldd	r24, Y+2	; 0x02
     184:	87 30       	cpi	r24, 0x07	; 7
     186:	30 f3       	brcs	.-52     	; 0x154 <main+0xf2>

  NDiz=0;
     188:	10 92 b8 00 	sts	0x00B8, r1
     18c:	10 92 b7 00 	sts	0x00B7, r1
  CtTDiz=15;
     190:	8f e0       	ldi	r24, 0x0F	; 15
     192:	80 93 84 00 	sts	0x0084, r24
  InvCounter=0;
     196:	10 92 7e 00 	sts	0x007E, r1
  RegWait=30000;                         //старое значение - 300 //Вернуть!!
     19a:	80 e3       	ldi	r24, 0x30	; 48
     19c:	95 e7       	ldi	r25, 0x75	; 117
     19e:	90 93 b0 00 	sts	0x00B0, r25
     1a2:	80 93 af 00 	sts	0x00AF, r24
     1a6:	01 c0       	rjmp	.+2      	; 0x1aa <main+0x148>
  while (RegWait--)

    _WDR();
     1a8:	a8 95       	wdr

  NDiz=0;
  CtTDiz=15;
  InvCounter=0;
  RegWait=30000;                         //старое значение - 300 //Вернуть!!
  while (RegWait--)
     1aa:	80 91 af 00 	lds	r24, 0x00AF
     1ae:	90 91 b0 00 	lds	r25, 0x00B0
     1b2:	9d 83       	std	Y+5, r25	; 0x05
     1b4:	8c 83       	std	Y+4, r24	; 0x04
     1b6:	1b 82       	std	Y+3, r1	; 0x03
     1b8:	8c 81       	ldd	r24, Y+4	; 0x04
     1ba:	9d 81       	ldd	r25, Y+5	; 0x05
     1bc:	00 97       	sbiw	r24, 0x00	; 0
     1be:	11 f0       	breq	.+4      	; 0x1c4 <main+0x162>
     1c0:	91 e0       	ldi	r25, 0x01	; 1
     1c2:	9b 83       	std	Y+3, r25	; 0x03
     1c4:	8c 81       	ldd	r24, Y+4	; 0x04
     1c6:	9d 81       	ldd	r25, Y+5	; 0x05
     1c8:	01 97       	sbiw	r24, 0x01	; 1
     1ca:	90 93 b0 00 	sts	0x00B0, r25
     1ce:	80 93 af 00 	sts	0x00AF, r24
     1d2:	2b 81       	ldd	r18, Y+3	; 0x03
     1d4:	22 23       	and	r18, r18
     1d6:	41 f7       	brne	.-48     	; 0x1a8 <main+0x146>

    _WDR();

  mask_leds_c = 0x00;                    //PORT C.X в обычном режиме работы светодиоды не "моргают"
     1d8:	10 92 b5 00 	sts	0x00B5, r1
  mask_leds_d = 0x00;                    //PORT D.X
     1dc:	10 92 74 00 	sts	0x0074, r1

  Key_new=0xff;
     1e0:	8f ef       	ldi	r24, 0xFF	; 255
     1e2:	80 93 ae 00 	sts	0x00AE, r24
  Key_Inp = KEY_EMPTY;                   //кнопка не нажата
     1e6:	10 92 8a 00 	sts	0x008A, r1

  if(PINB & (1<<MODE))    mode = 1;      //выбор режима работы
     1ea:	e6 e3       	ldi	r30, 0x36	; 54
     1ec:	f0 e0       	ldi	r31, 0x00	; 0
     1ee:	80 81       	ld	r24, Z
     1f0:	88 2f       	mov	r24, r24
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	80 71       	andi	r24, 0x10	; 16
     1f6:	90 70       	andi	r25, 0x00	; 0
     1f8:	00 97       	sbiw	r24, 0x00	; 0
     1fa:	21 f0       	breq	.+8      	; 0x204 <main+0x1a2>
     1fc:	81 e0       	ldi	r24, 0x01	; 1
     1fe:	80 93 ad 00 	sts	0x00AD, r24
     202:	02 c0       	rjmp	.+4      	; 0x208 <main+0x1a6>
  else                    mode = 0;
     204:	10 92 ad 00 	sts	0x00AD, r1

  if(!mode)                              //работа в режиме калибровки
     208:	80 91 ad 00 	lds	r24, 0x00AD
     20c:	88 23       	and	r24, r24
     20e:	09 f0       	breq	.+2      	; 0x212 <main+0x1b0>
     210:	92 c0       	rjmp	.+292    	; 0x336 <__stack+0xd7>
  {
    //инициализация переменных функции калибровки:
    timer_250 = RELOAD;                  //начало нового цикла индикации длительностью 250 мс
     212:	8e e3       	ldi	r24, 0x3E	; 62
     214:	80 93 ba 00 	sts	0x00BA, r24
    count_channel = 0;                   //счёт начинается с 0-го канала
     218:	10 92 be 00 	sts	0x00BE, r1
     21c:	10 92 bd 00 	sts	0x00BD, r1
    const_write_ok = 0;                  //записи констант не было
     220:	10 92 79 00 	sts	0x0079, r1
    mask_leds_c = 0x00;                  //PORT C.X при входе в режим программирования "моргает" 0-й канал
     224:	10 92 b5 00 	sts	0x00B5, r1
    mask_leds_d = 0x20;                  //PORT D.5
     228:	80 e2       	ldi	r24, 0x20	; 32
     22a:	80 93 74 00 	sts	0x0074, r24

    while (1)
    {
      _WDR();
     22e:	a8 95       	wdr

      AccountADC();
     230:	44 d4       	rcall	.+2184   	; 0xaba <AccountADC>

      //алгоритм нужен???
      if(Key_Inp == KEY_BT)                                                     //если нажата кнопка "переключить канал"
     232:	80 91 8a 00 	lds	r24, 0x008A
     236:	88 30       	cpi	r24, 0x08	; 8
     238:	b9 f4       	brne	.+46     	; 0x268 <__stack+0x9>
      {
        switch_channel(count_channel);                                          
     23a:	80 91 bd 00 	lds	r24, 0x00BD
     23e:	90 91 be 00 	lds	r25, 0x00BE
     242:	62 d4       	rcall	.+2244   	; 0xb08 <switch_channel>

        if(count_channel < 7)
     244:	80 91 bd 00 	lds	r24, 0x00BD
     248:	90 91 be 00 	lds	r25, 0x00BE
     24c:	87 30       	cpi	r24, 0x07	; 7
     24e:	91 05       	cpc	r25, r1
     250:	48 f4       	brcc	.+18     	; 0x264 <__stack+0x5>
          count_channel++;                                                      //переключение на следующий канал
     252:	80 91 bd 00 	lds	r24, 0x00BD
     256:	90 91 be 00 	lds	r25, 0x00BE
     25a:	01 96       	adiw	r24, 0x01	; 1
     25c:	90 93 be 00 	sts	0x00BE, r25
     260:	80 93 bd 00 	sts	0x00BD, r24

        Key_Inp=KEY_EMPTY;                                                      //установить флаг кнопка не нажата
     264:	10 92 8a 00 	sts	0x008A, r1
      }

      //алгоритм записи и проверки записи калибровочных констант в EEPROM
      if(Key_Inp == KEY_BS)                                                     //если нажата кнопка "сохранить константу"
     268:	80 91 8a 00 	lds	r24, 0x008A
     26c:	84 30       	cpi	r24, 0x04	; 4
     26e:	f9 f6       	brne	.-66     	; 0x22e <main+0x1cc>
      {
        switch_channel(count_channel);                                          //переключение индикации и запись оцифрованного значения датчика в EEPROM
     270:	80 91 bd 00 	lds	r24, 0x00BD
     274:	90 91 be 00 	lds	r25, 0x00BE
     278:	47 d4       	rcall	.+2190   	; 0xb08 <switch_channel>

        if(count_channel < 7)
     27a:	80 91 bd 00 	lds	r24, 0x00BD
     27e:	90 91 be 00 	lds	r25, 0x00BE
     282:	87 30       	cpi	r24, 0x07	; 7
     284:	91 05       	cpc	r25, r1
     286:	08 f0       	brcs	.+2      	; 0x28a <__stack+0x2b>
     288:	53 c0       	rjmp	.+166    	; 0x330 <__stack+0xd1>
        {
          from_ee[count_channel] = eeprom_read_word((uint16_t *)(EEP_ADDR+ 2*count_channel)); //считать записанное значение для проверки
     28a:	00 91 bd 00 	lds	r16, 0x00BD
     28e:	10 91 be 00 	lds	r17, 0x00BE
     292:	80 91 bd 00 	lds	r24, 0x00BD
     296:	90 91 be 00 	lds	r25, 0x00BE
     29a:	49 96       	adiw	r24, 0x19	; 25
     29c:	88 0f       	add	r24, r24
     29e:	99 1f       	adc	r25, r25
     2a0:	97 d7       	rcall	.+3886   	; 0x11d0 <__eerd_word_m8535>
     2a2:	9c 01       	movw	r18, r24
     2a4:	c8 01       	movw	r24, r16
     2a6:	88 0f       	add	r24, r24
     2a8:	99 1f       	adc	r25, r25
     2aa:	fc 01       	movw	r30, r24
     2ac:	e8 52       	subi	r30, 0x28	; 40
     2ae:	ff 4f       	sbci	r31, 0xFF	; 255
     2b0:	31 83       	std	Z+1, r19	; 0x01
     2b2:	20 83       	st	Z, r18

          //проверка успешной записи
          if((from_ee[count_channel] == array[count_channel])&&(from_ee[count_channel] != 0xFFFF)&&(from_ee[count_channel] != 0x0))
     2b4:	80 91 bd 00 	lds	r24, 0x00BD
     2b8:	90 91 be 00 	lds	r25, 0x00BE
     2bc:	88 0f       	add	r24, r24
     2be:	99 1f       	adc	r25, r25
     2c0:	fc 01       	movw	r30, r24
     2c2:	e8 52       	subi	r30, 0x28	; 40
     2c4:	ff 4f       	sbci	r31, 0xFF	; 255
     2c6:	20 81       	ld	r18, Z
     2c8:	31 81       	ldd	r19, Z+1	; 0x01
     2ca:	80 91 bd 00 	lds	r24, 0x00BD
     2ce:	90 91 be 00 	lds	r25, 0x00BE
     2d2:	88 0f       	add	r24, r24
     2d4:	99 1f       	adc	r25, r25
     2d6:	fc 01       	movw	r30, r24
     2d8:	eb 53       	subi	r30, 0x3B	; 59
     2da:	ff 4f       	sbci	r31, 0xFF	; 255
     2dc:	80 81       	ld	r24, Z
     2de:	91 81       	ldd	r25, Z+1	; 0x01
     2e0:	28 17       	cp	r18, r24
     2e2:	39 07       	cpc	r19, r25
     2e4:	29 f5       	brne	.+74     	; 0x330 <__stack+0xd1>
     2e6:	80 91 bd 00 	lds	r24, 0x00BD
     2ea:	90 91 be 00 	lds	r25, 0x00BE
     2ee:	88 0f       	add	r24, r24
     2f0:	99 1f       	adc	r25, r25
     2f2:	fc 01       	movw	r30, r24
     2f4:	e8 52       	subi	r30, 0x28	; 40
     2f6:	ff 4f       	sbci	r31, 0xFF	; 255
     2f8:	80 81       	ld	r24, Z
     2fa:	91 81       	ldd	r25, Z+1	; 0x01
     2fc:	2f ef       	ldi	r18, 0xFF	; 255
     2fe:	8f 3f       	cpi	r24, 0xFF	; 255
     300:	92 07       	cpc	r25, r18
     302:	b1 f0       	breq	.+44     	; 0x330 <__stack+0xd1>
     304:	80 91 bd 00 	lds	r24, 0x00BD
     308:	90 91 be 00 	lds	r25, 0x00BE
     30c:	88 0f       	add	r24, r24
     30e:	99 1f       	adc	r25, r25
     310:	fc 01       	movw	r30, r24
     312:	e8 52       	subi	r30, 0x28	; 40
     314:	ff 4f       	sbci	r31, 0xFF	; 255
     316:	80 81       	ld	r24, Z
     318:	91 81       	ldd	r25, Z+1	; 0x01
     31a:	00 97       	sbiw	r24, 0x00	; 0
     31c:	49 f0       	breq	.+18     	; 0x330 <__stack+0xd1>
            count_channel++;                                                    //переключение на следующий канал
     31e:	80 91 bd 00 	lds	r24, 0x00BD
     322:	90 91 be 00 	lds	r25, 0x00BE
     326:	01 96       	adiw	r24, 0x01	; 1
     328:	90 93 be 00 	sts	0x00BE, r25
     32c:	80 93 bd 00 	sts	0x00BD, r24
        }
        Key_Inp=KEY_EMPTY;                                                      //установить флаг кнопка не нажата
     330:	10 92 8a 00 	sts	0x008A, r1
     334:	7c cf       	rjmp	.-264    	; 0x22e <main+0x1cc>
  else    //обычный режим работы
  {
    unsigned char i;

    //алгоритм проверки наличия констант в EEPROM (при первом включении) и записи констант в ОЗУ
    for (i=0; i<7; i++)                 
     336:	19 82       	std	Y+1, r1	; 0x01
     338:	6b c0       	rjmp	.+214    	; 0x410 <__stack+0x1b1>
    {
      eeprom_busy_wait();
     33a:	ec e3       	ldi	r30, 0x3C	; 60
     33c:	f0 e0       	ldi	r31, 0x00	; 0
     33e:	80 81       	ld	r24, Z
     340:	88 2f       	mov	r24, r24
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	82 70       	andi	r24, 0x02	; 2
     346:	90 70       	andi	r25, 0x00	; 0
     348:	00 97       	sbiw	r24, 0x00	; 0
     34a:	b9 f7       	brne	.-18     	; 0x33a <__stack+0xdb>
      array[i] = eeprom_read_word((uint16_t *)(EEP_ADDR+ 2*i));                   //считывание массива уставок из EEPROM в ОЗУ
     34c:	89 81       	ldd	r24, Y+1	; 0x01
     34e:	08 2f       	mov	r16, r24
     350:	10 e0       	ldi	r17, 0x00	; 0
     352:	89 81       	ldd	r24, Y+1	; 0x01
     354:	88 2f       	mov	r24, r24
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	49 96       	adiw	r24, 0x19	; 25
     35a:	88 0f       	add	r24, r24
     35c:	99 1f       	adc	r25, r25
     35e:	38 d7       	rcall	.+3696   	; 0x11d0 <__eerd_word_m8535>
     360:	9c 01       	movw	r18, r24
     362:	c8 01       	movw	r24, r16
     364:	88 0f       	add	r24, r24
     366:	99 1f       	adc	r25, r25
     368:	fc 01       	movw	r30, r24
     36a:	eb 53       	subi	r30, 0x3B	; 59
     36c:	ff 4f       	sbci	r31, 0xFF	; 255
     36e:	31 83       	std	Z+1, r19	; 0x01
     370:	20 83       	st	Z, r18
      if((array[i] == 0xffff)||(array[i] == 0x0000))                            //если ячейка пуста
     372:	89 81       	ldd	r24, Y+1	; 0x01
     374:	88 2f       	mov	r24, r24
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	88 0f       	add	r24, r24
     37a:	99 1f       	adc	r25, r25
     37c:	fc 01       	movw	r30, r24
     37e:	eb 53       	subi	r30, 0x3B	; 59
     380:	ff 4f       	sbci	r31, 0xFF	; 255
     382:	80 81       	ld	r24, Z
     384:	91 81       	ldd	r25, Z+1	; 0x01
     386:	2f ef       	ldi	r18, 0xFF	; 255
     388:	8f 3f       	cpi	r24, 0xFF	; 255
     38a:	92 07       	cpc	r25, r18
     38c:	61 f0       	breq	.+24     	; 0x3a6 <__stack+0x147>
     38e:	89 81       	ldd	r24, Y+1	; 0x01
     390:	88 2f       	mov	r24, r24
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	88 0f       	add	r24, r24
     396:	99 1f       	adc	r25, r25
     398:	fc 01       	movw	r30, r24
     39a:	eb 53       	subi	r30, 0x3B	; 59
     39c:	ff 4f       	sbci	r31, 0xFF	; 255
     39e:	80 81       	ld	r24, Z
     3a0:	91 81       	ldd	r25, Z+1	; 0x01
     3a2:	00 97       	sbiw	r24, 0x00	; 0
     3a4:	91 f5       	brne	.+100    	; 0x40a <__stack+0x1ab>
      {
         eeprom_write_word((uint16_t *)(EEP_ADDR+ 2*i), ustavki[i]);            //записать уставку в пустую ячейку EEPROM
     3a6:	89 81       	ldd	r24, Y+1	; 0x01
     3a8:	88 2f       	mov	r24, r24
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	49 96       	adiw	r24, 0x19	; 25
     3ae:	88 0f       	add	r24, r24
     3b0:	99 1f       	adc	r25, r25
     3b2:	ac 01       	movw	r20, r24
     3b4:	89 81       	ldd	r24, Y+1	; 0x01
     3b6:	88 2f       	mov	r24, r24
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	88 0f       	add	r24, r24
     3bc:	99 1f       	adc	r25, r25
     3be:	fc 01       	movw	r30, r24
     3c0:	ec 59       	subi	r30, 0x9C	; 156
     3c2:	ff 4f       	sbci	r31, 0xFF	; 255
     3c4:	20 81       	ld	r18, Z
     3c6:	31 81       	ldd	r19, Z+1	; 0x01
     3c8:	ca 01       	movw	r24, r20
     3ca:	b9 01       	movw	r22, r18
     3cc:	06 d7       	rcall	.+3596   	; 0x11da <__eewr_word_m8535>
         eeprom_busy_wait();
     3ce:	ec e3       	ldi	r30, 0x3C	; 60
     3d0:	f0 e0       	ldi	r31, 0x00	; 0
     3d2:	80 81       	ld	r24, Z
     3d4:	88 2f       	mov	r24, r24
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	82 70       	andi	r24, 0x02	; 2
     3da:	90 70       	andi	r25, 0x00	; 0
     3dc:	00 97       	sbiw	r24, 0x00	; 0
     3de:	b9 f7       	brne	.-18     	; 0x3ce <__stack+0x16f>
         array[i] = ustavki[i];                                                 //записать уставку в пустую ячейку ОЗУ
     3e0:	89 81       	ldd	r24, Y+1	; 0x01
     3e2:	48 2f       	mov	r20, r24
     3e4:	50 e0       	ldi	r21, 0x00	; 0
     3e6:	89 81       	ldd	r24, Y+1	; 0x01
     3e8:	88 2f       	mov	r24, r24
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	88 0f       	add	r24, r24
     3ee:	99 1f       	adc	r25, r25
     3f0:	fc 01       	movw	r30, r24
     3f2:	ec 59       	subi	r30, 0x9C	; 156
     3f4:	ff 4f       	sbci	r31, 0xFF	; 255
     3f6:	20 81       	ld	r18, Z
     3f8:	31 81       	ldd	r19, Z+1	; 0x01
     3fa:	ca 01       	movw	r24, r20
     3fc:	88 0f       	add	r24, r24
     3fe:	99 1f       	adc	r25, r25
     400:	fc 01       	movw	r30, r24
     402:	eb 53       	subi	r30, 0x3B	; 59
     404:	ff 4f       	sbci	r31, 0xFF	; 255
     406:	31 83       	std	Z+1, r19	; 0x01
     408:	20 83       	st	Z, r18
  else    //обычный режим работы
  {
    unsigned char i;

    //алгоритм проверки наличия констант в EEPROM (при первом включении) и записи констант в ОЗУ
    for (i=0; i<7; i++)                 
     40a:	89 81       	ldd	r24, Y+1	; 0x01
     40c:	8f 5f       	subi	r24, 0xFF	; 255
     40e:	89 83       	std	Y+1, r24	; 0x01
     410:	89 81       	ldd	r24, Y+1	; 0x01
     412:	87 30       	cpi	r24, 0x07	; 7
     414:	08 f4       	brcc	.+2      	; 0x418 <__stack+0x1b9>
     416:	91 cf       	rjmp	.-222    	; 0x33a <__stack+0xdb>
      }
    }
    /*Work program*/
    while (1)
    {
      _WDR();
     418:	a8 95       	wdr
      AccountADC();
     41a:	4f d3       	rcall	.+1694   	; 0xaba <AccountADC>
      AccountNDiz();
     41c:	a4 d2       	rcall	.+1352   	; 0x966 <AccountNDiz>
            Если значение датчика температуры стало больше или равно 8'С, учитывая гистерезис и флаг датчика 4 по порогу 8 был сброшен
            (означает, что значение датчика температуры было до этого меньше 8'С), то установить флаг датчика 4 по порогу 8 (означает
            превышение порога 8).
            Если значение датчика температуры стало меньше 8'С и флаг датчика 4 по порогу 8 был установлен, то флаг сбросить.
      */
      if((Dt4<=array[0]-Hyst_t)&&(!Dt4_8))       Dt4_8=1;   //выше 9.5 градусов направление срабатывания - вверх
     41e:	80 91 c5 00 	lds	r24, 0x00C5
     422:	90 91 c6 00 	lds	r25, 0x00C6
     426:	9c 01       	movw	r18, r24
     428:	2a 50       	subi	r18, 0x0A	; 10
     42a:	30 40       	sbci	r19, 0x00	; 0
     42c:	80 91 d3 00 	lds	r24, 0x00D3
     430:	90 91 d4 00 	lds	r25, 0x00D4
     434:	28 17       	cp	r18, r24
     436:	39 07       	cpc	r19, r25
     438:	38 f0       	brcs	.+14     	; 0x448 <__stack+0x1e9>
     43a:	80 91 d6 00 	lds	r24, 0x00D6
     43e:	88 23       	and	r24, r24
     440:	19 f4       	brne	.+6      	; 0x448 <__stack+0x1e9>
     442:	81 e0       	ldi	r24, 0x01	; 1
     444:	80 93 d6 00 	sts	0x00D6, r24
      if((Dt4>array[0])&&(Dt4_8))                Dt4_8=0;   //ниже 8 градусов
     448:	20 91 c5 00 	lds	r18, 0x00C5
     44c:	30 91 c6 00 	lds	r19, 0x00C6
     450:	80 91 d3 00 	lds	r24, 0x00D3
     454:	90 91 d4 00 	lds	r25, 0x00D4
     458:	28 17       	cp	r18, r24
     45a:	39 07       	cpc	r19, r25
     45c:	30 f4       	brcc	.+12     	; 0x46a <__stack+0x20b>
     45e:	80 91 d6 00 	lds	r24, 0x00D6
     462:	88 23       	and	r24, r24
     464:	11 f0       	breq	.+4      	; 0x46a <__stack+0x20b>
     466:	10 92 d6 00 	sts	0x00D6, r1

      if((Dt4<=(array[1]-Hyst_t))&&(!Dt4_30))    Dt4_30=1;  //выше 31.25 градусов
     46a:	80 91 c7 00 	lds	r24, 0x00C7
     46e:	90 91 c8 00 	lds	r25, 0x00C8
     472:	9c 01       	movw	r18, r24
     474:	2a 50       	subi	r18, 0x0A	; 10
     476:	30 40       	sbci	r19, 0x00	; 0
     478:	80 91 d3 00 	lds	r24, 0x00D3
     47c:	90 91 d4 00 	lds	r25, 0x00D4
     480:	28 17       	cp	r18, r24
     482:	39 07       	cpc	r19, r25
     484:	38 f0       	brcs	.+14     	; 0x494 <__stack+0x235>
     486:	80 91 8b 00 	lds	r24, 0x008B
     48a:	88 23       	and	r24, r24
     48c:	19 f4       	brne	.+6      	; 0x494 <__stack+0x235>
     48e:	81 e0       	ldi	r24, 0x01	; 1
     490:	80 93 8b 00 	sts	0x008B, r24
      if((Dt4>array[1])&&(Dt4_30))               Dt4_30=0;  //ниже 30 градусов - гистерезис направление срабатывания - вверх
     494:	20 91 c7 00 	lds	r18, 0x00C7
     498:	30 91 c8 00 	lds	r19, 0x00C8
     49c:	80 91 d3 00 	lds	r24, 0x00D3
     4a0:	90 91 d4 00 	lds	r25, 0x00D4
     4a4:	28 17       	cp	r18, r24
     4a6:	39 07       	cpc	r19, r25
     4a8:	30 f4       	brcc	.+12     	; 0x4b6 <__stack+0x257>
     4aa:	80 91 8b 00 	lds	r24, 0x008B
     4ae:	88 23       	and	r24, r24
     4b0:	11 f0       	breq	.+4      	; 0x4b6 <__stack+0x257>
     4b2:	10 92 8b 00 	sts	0x008B, r1

      if((Dt4<=array[2])&&(!Dt4_37))             Dt4_37=1;  //выше 37.0 градусов
     4b6:	20 91 c9 00 	lds	r18, 0x00C9
     4ba:	30 91 ca 00 	lds	r19, 0x00CA
     4be:	80 91 d3 00 	lds	r24, 0x00D3
     4c2:	90 91 d4 00 	lds	r25, 0x00D4
     4c6:	28 17       	cp	r18, r24
     4c8:	39 07       	cpc	r19, r25
     4ca:	38 f0       	brcs	.+14     	; 0x4da <__stack+0x27b>
     4cc:	80 91 81 00 	lds	r24, 0x0081
     4d0:	88 23       	and	r24, r24
     4d2:	19 f4       	brne	.+6      	; 0x4da <__stack+0x27b>
     4d4:	81 e0       	ldi	r24, 0x01	; 1
     4d6:	80 93 81 00 	sts	0x0081, r24
      if((Dt4>(array[2]+Hyst_t))&&(Dt4_37))      Dt4_37=0;  //ниже 36,8 градусов направление срабатывания - вниз
     4da:	80 91 c9 00 	lds	r24, 0x00C9
     4de:	90 91 ca 00 	lds	r25, 0x00CA
     4e2:	9c 01       	movw	r18, r24
     4e4:	26 5f       	subi	r18, 0xF6	; 246
     4e6:	3f 4f       	sbci	r19, 0xFF	; 255
     4e8:	80 91 d3 00 	lds	r24, 0x00D3
     4ec:	90 91 d4 00 	lds	r25, 0x00D4
     4f0:	28 17       	cp	r18, r24
     4f2:	39 07       	cpc	r19, r25
     4f4:	30 f4       	brcc	.+12     	; 0x502 <__stack+0x2a3>
     4f6:	80 91 81 00 	lds	r24, 0x0081
     4fa:	88 23       	and	r24, r24
     4fc:	11 f0       	breq	.+4      	; 0x502 <__stack+0x2a3>
     4fe:	10 92 81 00 	sts	0x0081, r1

      if((Dt5<=array[3]-(Hyst_t+20))&&(!Dt5_37)) Dt5_37=1;  //выше 44.5 градусов
     502:	80 91 cb 00 	lds	r24, 0x00CB
     506:	90 91 cc 00 	lds	r25, 0x00CC
     50a:	9c 01       	movw	r18, r24
     50c:	2e 51       	subi	r18, 0x1E	; 30
     50e:	30 40       	sbci	r19, 0x00	; 0
     510:	80 91 7b 00 	lds	r24, 0x007B
     514:	90 91 7c 00 	lds	r25, 0x007C
     518:	28 17       	cp	r18, r24
     51a:	39 07       	cpc	r19, r25
     51c:	38 f0       	brcs	.+14     	; 0x52c <__stack+0x2cd>
     51e:	80 91 b4 00 	lds	r24, 0x00B4
     522:	88 23       	and	r24, r24
     524:	19 f4       	brne	.+6      	; 0x52c <__stack+0x2cd>
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	80 93 b4 00 	sts	0x00B4, r24
      if((Dt5>array[3])&&(Dt5_37))               Dt5_37=0;  //ниже 37 градусов направление срабатывания - вверх
     52c:	20 91 cb 00 	lds	r18, 0x00CB
     530:	30 91 cc 00 	lds	r19, 0x00CC
     534:	80 91 7b 00 	lds	r24, 0x007B
     538:	90 91 7c 00 	lds	r25, 0x007C
     53c:	28 17       	cp	r18, r24
     53e:	39 07       	cpc	r19, r25
     540:	30 f4       	brcc	.+12     	; 0x54e <__stack+0x2ef>
     542:	80 91 b4 00 	lds	r24, 0x00B4
     546:	88 23       	and	r24, r24
     548:	11 f0       	breq	.+4      	; 0x54e <__stack+0x2ef>
     54a:	10 92 b4 00 	sts	0x00B4, r1

      if((Dt5<=array[4])&&(!Dt5_95))             Dt5_95=1;  //выше 95 градусов
     54e:	20 91 cd 00 	lds	r18, 0x00CD
     552:	30 91 ce 00 	lds	r19, 0x00CE
     556:	80 91 7b 00 	lds	r24, 0x007B
     55a:	90 91 7c 00 	lds	r25, 0x007C
     55e:	28 17       	cp	r18, r24
     560:	39 07       	cpc	r19, r25
     562:	38 f0       	brcs	.+14     	; 0x572 <__stack+0x313>
     564:	80 91 b1 00 	lds	r24, 0x00B1
     568:	88 23       	and	r24, r24
     56a:	19 f4       	brne	.+6      	; 0x572 <__stack+0x313>
     56c:	81 e0       	ldi	r24, 0x01	; 1
     56e:	80 93 b1 00 	sts	0x00B1, r24
      if((Dt5>(array[4]+Hyst_t))&&(Dt5_95))      Dt5_95=0;  //ниже 93.5 градусов направление срабатывания - вверх
     572:	80 91 cd 00 	lds	r24, 0x00CD
     576:	90 91 ce 00 	lds	r25, 0x00CE
     57a:	9c 01       	movw	r18, r24
     57c:	26 5f       	subi	r18, 0xF6	; 246
     57e:	3f 4f       	sbci	r19, 0xFF	; 255
     580:	80 91 7b 00 	lds	r24, 0x007B
     584:	90 91 7c 00 	lds	r25, 0x007C
     588:	28 17       	cp	r18, r24
     58a:	39 07       	cpc	r19, r25
     58c:	30 f4       	brcc	.+12     	; 0x59a <__stack+0x33b>
     58e:	80 91 b1 00 	lds	r24, 0x00B1
     592:	88 23       	and	r24, r24
     594:	11 f0       	breq	.+4      	; 0x59a <__stack+0x33b>
     596:	10 92 b1 00 	sts	0x00B1, r1

      if((Dt5<=array[5])&&(!Dt5_118))            Dt5_118=1; //выше 118 градусов
     59a:	20 91 cf 00 	lds	r18, 0x00CF
     59e:	30 91 d0 00 	lds	r19, 0x00D0
     5a2:	80 91 7b 00 	lds	r24, 0x007B
     5a6:	90 91 7c 00 	lds	r25, 0x007C
     5aa:	28 17       	cp	r18, r24
     5ac:	39 07       	cpc	r19, r25
     5ae:	38 f0       	brcs	.+14     	; 0x5be <__stack+0x35f>
     5b0:	80 91 d7 00 	lds	r24, 0x00D7
     5b4:	88 23       	and	r24, r24
     5b6:	19 f4       	brne	.+6      	; 0x5be <__stack+0x35f>
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	80 93 d7 00 	sts	0x00D7, r24
      if((Dt5>(array[5]+Hyst_t))&&(Dt5_118))     Dt5_118=0; //ниже 116.5 градусов направление срабатывания - вверх
     5be:	80 91 cf 00 	lds	r24, 0x00CF
     5c2:	90 91 d0 00 	lds	r25, 0x00D0
     5c6:	9c 01       	movw	r18, r24
     5c8:	26 5f       	subi	r18, 0xF6	; 246
     5ca:	3f 4f       	sbci	r19, 0xFF	; 255
     5cc:	80 91 7b 00 	lds	r24, 0x007B
     5d0:	90 91 7c 00 	lds	r25, 0x007C
     5d4:	28 17       	cp	r18, r24
     5d6:	39 07       	cpc	r19, r25
     5d8:	30 f4       	brcc	.+12     	; 0x5e6 <__stack+0x387>
     5da:	80 91 d7 00 	lds	r24, 0x00D7
     5de:	88 23       	and	r24, r24
     5e0:	11 f0       	breq	.+4      	; 0x5e6 <__stack+0x387>
     5e2:	10 92 d7 00 	sts	0x00D7, r1

	  if((Dt6<=array[6])&&(!Dt6_115))            Dt6_115=1; //выше 115 градусов
     5e6:	20 91 d1 00 	lds	r18, 0x00D1
     5ea:	30 91 d2 00 	lds	r19, 0x00D2
     5ee:	80 91 82 00 	lds	r24, 0x0082
     5f2:	90 91 83 00 	lds	r25, 0x0083
     5f6:	28 17       	cp	r18, r24
     5f8:	39 07       	cpc	r19, r25
     5fa:	38 f0       	brcs	.+14     	; 0x60a <__stack+0x3ab>
     5fc:	80 91 76 00 	lds	r24, 0x0076
     600:	88 23       	and	r24, r24
     602:	19 f4       	brne	.+6      	; 0x60a <__stack+0x3ab>
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	80 93 76 00 	sts	0x0076, r24
      if((Dt6>(array[6]+Hyst_t))&&(Dt6_115))     Dt6_115=0; //ниже 113.5 градусов направление срабатывания - вверх
     60a:	80 91 d1 00 	lds	r24, 0x00D1
     60e:	90 91 d2 00 	lds	r25, 0x00D2
     612:	9c 01       	movw	r18, r24
     614:	26 5f       	subi	r18, 0xF6	; 246
     616:	3f 4f       	sbci	r19, 0xFF	; 255
     618:	80 91 82 00 	lds	r24, 0x0082
     61c:	90 91 83 00 	lds	r25, 0x0083
     620:	28 17       	cp	r18, r24
     622:	39 07       	cpc	r19, r25
     624:	30 f4       	brcc	.+12     	; 0x632 <__stack+0x3d3>
     626:	80 91 76 00 	lds	r24, 0x0076
     62a:	88 23       	and	r24, r24
     62c:	11 f0       	breq	.+4      	; 0x632 <__stack+0x3d3>
     62e:	10 92 76 00 	sts	0x0076, r1
            Если значение датчика давления стало больше или равно 1 кг/см^2 и флаг датчика давления по порогу 1 был сброшен (означает,
            что значение датчика давления было до этого меньше 1 кг/см^2), то установить флаг датчика давления по порогу 1 (означает
            превышение порога 1).
            Если значение датчика давления стало меньше 1 кг/см^2 и флаг датчика давления по порогу 1 был установлен, то флаг сбросить.
      */
      if((Dd1>=d1_1)&&(!Dd1_1))                  Dd1_1=1;   //выше 1 кг/см кв определить пределы направление срабатывания - вверх
     632:	80 91 b2 00 	lds	r24, 0x00B2
     636:	90 91 b3 00 	lds	r25, 0x00B3
     63a:	82 37       	cpi	r24, 0x72	; 114
     63c:	91 05       	cpc	r25, r1
     63e:	38 f0       	brcs	.+14     	; 0x64e <__stack+0x3ef>
     640:	80 91 7d 00 	lds	r24, 0x007D
     644:	88 23       	and	r24, r24
     646:	19 f4       	brne	.+6      	; 0x64e <__stack+0x3ef>
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	80 93 7d 00 	sts	0x007D, r24
      if((Dd1<d1_1-Hyst_p)&&(Dd1_1))             Dd1_1=0;   //ниже 1 кг/см кв
     64e:	80 91 b2 00 	lds	r24, 0x00B2
     652:	90 91 b3 00 	lds	r25, 0x00B3
     656:	88 36       	cpi	r24, 0x68	; 104
     658:	91 05       	cpc	r25, r1
     65a:	30 f4       	brcc	.+12     	; 0x668 <__stack+0x409>
     65c:	80 91 7d 00 	lds	r24, 0x007D
     660:	88 23       	and	r24, r24
     662:	11 f0       	breq	.+4      	; 0x668 <__stack+0x409>
     664:	10 92 7d 00 	sts	0x007D, r1

      if((Dd1>=d1_4+Hyst_p)&&(!Dd1_4))           Dd1_4=1;   //выше 4 кг/см кв определить пределы
     668:	80 91 b2 00 	lds	r24, 0x00B2
     66c:	90 91 b3 00 	lds	r25, 0x00B3
     670:	8f 3d       	cpi	r24, 0xDF	; 223
     672:	91 05       	cpc	r25, r1
     674:	38 f0       	brcs	.+14     	; 0x684 <__stack+0x425>
     676:	80 91 89 00 	lds	r24, 0x0089
     67a:	88 23       	and	r24, r24
     67c:	19 f4       	brne	.+6      	; 0x684 <__stack+0x425>
     67e:	81 e0       	ldi	r24, 0x01	; 1
     680:	80 93 89 00 	sts	0x0089, r24
      if((Dd1<d1_4)&&(Dd1_4))                    Dd1_4=0;   //ниже 4 кг/см кв определить пределы 10 - гистерезис вниз направление срабатывания - вниз
     684:	80 91 b2 00 	lds	r24, 0x00B2
     688:	90 91 b3 00 	lds	r25, 0x00B3
     68c:	85 3d       	cpi	r24, 0xD5	; 213
     68e:	91 05       	cpc	r25, r1
     690:	30 f4       	brcc	.+12     	; 0x69e <__stack+0x43f>
     692:	80 91 89 00 	lds	r24, 0x0089
     696:	88 23       	and	r24, r24
     698:	11 f0       	breq	.+4      	; 0x69e <__stack+0x43f>
     69a:	10 92 89 00 	sts	0x0089, r1
            Условия задания флагов по порогу 500.
            Если число оборотов маховика коленвала дизеля больше или равно 500 и флаг датчика частоты оборотов был сброшен (означает,
            что число оборотов было менше 500), то установить флаг датчика частоты оборотов (означает превышение порога 500).
            Если число оборотов меньше 400 и флаг датчика частоты оборотов был установлен, то сбросить флаг датчика частоты оборотов.
      */
      if((NDiz>=500)&&(!Nd_500))                 Nd_500=1;  //100 оборотов гистерезис
     69e:	80 91 b7 00 	lds	r24, 0x00B7
     6a2:	90 91 b8 00 	lds	r25, 0x00B8
     6a6:	21 e0       	ldi	r18, 0x01	; 1
     6a8:	84 3f       	cpi	r24, 0xF4	; 244
     6aa:	92 07       	cpc	r25, r18
     6ac:	38 f0       	brcs	.+14     	; 0x6bc <__stack+0x45d>
     6ae:	80 91 fe 00 	lds	r24, 0x00FE
     6b2:	88 23       	and	r24, r24
     6b4:	19 f4       	brne	.+6      	; 0x6bc <__stack+0x45d>
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	80 93 fe 00 	sts	0x00FE, r24
      if((NDiz<400)&&(Nd_500))                   Nd_500=0;
     6bc:	80 91 b7 00 	lds	r24, 0x00B7
     6c0:	90 91 b8 00 	lds	r25, 0x00B8
     6c4:	21 e0       	ldi	r18, 0x01	; 1
     6c6:	80 39       	cpi	r24, 0x90	; 144
     6c8:	92 07       	cpc	r25, r18
     6ca:	30 f4       	brcc	.+12     	; 0x6d8 <__stack+0x479>
     6cc:	80 91 fe 00 	lds	r24, 0x00FE
     6d0:	88 23       	and	r24, r24
     6d2:	11 f0       	breq	.+4      	; 0x6d8 <__stack+0x479>
     6d4:	10 92 fe 00 	sts	0x00FE, r1

      if((NDiz>=1450)&&(!Nd_1450))               Nd_1450=1;
     6d8:	80 91 b7 00 	lds	r24, 0x00B7
     6dc:	90 91 b8 00 	lds	r25, 0x00B8
     6e0:	25 e0       	ldi	r18, 0x05	; 5
     6e2:	8a 3a       	cpi	r24, 0xAA	; 170
     6e4:	92 07       	cpc	r25, r18
     6e6:	38 f0       	brcs	.+14     	; 0x6f6 <__stack+0x497>
     6e8:	80 91 bb 00 	lds	r24, 0x00BB
     6ec:	88 23       	and	r24, r24
     6ee:	19 f4       	brne	.+6      	; 0x6f6 <__stack+0x497>
     6f0:	81 e0       	ldi	r24, 0x01	; 1
     6f2:	80 93 bb 00 	sts	0x00BB, r24
      if((NDiz<1350)&&(Nd_1450))                 Nd_1450=0;
     6f6:	80 91 b7 00 	lds	r24, 0x00B7
     6fa:	90 91 b8 00 	lds	r25, 0x00B8
     6fe:	25 e0       	ldi	r18, 0x05	; 5
     700:	86 34       	cpi	r24, 0x46	; 70
     702:	92 07       	cpc	r25, r18
     704:	30 f4       	brcc	.+12     	; 0x712 <__stack+0x4b3>
     706:	80 91 bb 00 	lds	r24, 0x00BB
     70a:	88 23       	and	r24, r24
     70c:	11 f0       	breq	.+4      	; 0x712 <__stack+0x4b3>
     70e:	10 92 bb 00 	sts	0x00BB, r1

      if((NDiz>=1750)&&(!Nd_1750))               Nd_1750=1;
     712:	80 91 b7 00 	lds	r24, 0x00B7
     716:	90 91 b8 00 	lds	r25, 0x00B8
     71a:	26 e0       	ldi	r18, 0x06	; 6
     71c:	86 3d       	cpi	r24, 0xD6	; 214
     71e:	92 07       	cpc	r25, r18
     720:	38 f0       	brcs	.+14     	; 0x730 <__stack+0x4d1>
     722:	80 91 85 00 	lds	r24, 0x0085
     726:	88 23       	and	r24, r24
     728:	19 f4       	brne	.+6      	; 0x730 <__stack+0x4d1>
     72a:	81 e0       	ldi	r24, 0x01	; 1
     72c:	80 93 85 00 	sts	0x0085, r24
      if((NDiz<1650)&&(Nd_1750))                 Nd_1750=0;
     730:	80 91 b7 00 	lds	r24, 0x00B7
     734:	90 91 b8 00 	lds	r25, 0x00B8
     738:	26 e0       	ldi	r18, 0x06	; 6
     73a:	82 37       	cpi	r24, 0x72	; 114
     73c:	92 07       	cpc	r25, r18
     73e:	30 f4       	brcc	.+12     	; 0x74c <__stack+0x4ed>
     740:	80 91 85 00 	lds	r24, 0x0085
     744:	88 23       	and	r24, r24
     746:	11 f0       	breq	.+4      	; 0x74c <__stack+0x4ed>
     748:	10 92 85 00 	sts	0x0085, r1

//    Объявление портов и задание их логики (светодиодная индикация):
      if(!Dt4_8)   PORTD &= ~(1<<PORTD5); else PORTD |= (1<<PORTD5); //PD5 - выше 8 град
     74c:	80 91 d6 00 	lds	r24, 0x00D6
     750:	88 23       	and	r24, r24
     752:	41 f4       	brne	.+16     	; 0x764 <__stack+0x505>
     754:	a2 e3       	ldi	r26, 0x32	; 50
     756:	b0 e0       	ldi	r27, 0x00	; 0
     758:	e2 e3       	ldi	r30, 0x32	; 50
     75a:	f0 e0       	ldi	r31, 0x00	; 0
     75c:	80 81       	ld	r24, Z
     75e:	8f 7d       	andi	r24, 0xDF	; 223
     760:	8c 93       	st	X, r24
     762:	07 c0       	rjmp	.+14     	; 0x772 <__stack+0x513>
     764:	a2 e3       	ldi	r26, 0x32	; 50
     766:	b0 e0       	ldi	r27, 0x00	; 0
     768:	e2 e3       	ldi	r30, 0x32	; 50
     76a:	f0 e0       	ldi	r31, 0x00	; 0
     76c:	80 81       	ld	r24, Z
     76e:	80 62       	ori	r24, 0x20	; 32
     770:	8c 93       	st	X, r24
      if(Dt4_30)   PORTD &= ~(1<<PORTD3); else PORTD |= (1<<PORTD3); //PD3 - ниже 30 град
     772:	80 91 8b 00 	lds	r24, 0x008B
     776:	88 23       	and	r24, r24
     778:	41 f0       	breq	.+16     	; 0x78a <__stack+0x52b>
     77a:	a2 e3       	ldi	r26, 0x32	; 50
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e2 e3       	ldi	r30, 0x32	; 50
     780:	f0 e0       	ldi	r31, 0x00	; 0
     782:	80 81       	ld	r24, Z
     784:	87 7f       	andi	r24, 0xF7	; 247
     786:	8c 93       	st	X, r24
     788:	07 c0       	rjmp	.+14     	; 0x798 <__stack+0x539>
     78a:	a2 e3       	ldi	r26, 0x32	; 50
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	e2 e3       	ldi	r30, 0x32	; 50
     790:	f0 e0       	ldi	r31, 0x00	; 0
     792:	80 81       	ld	r24, Z
     794:	88 60       	ori	r24, 0x08	; 8
     796:	8c 93       	st	X, r24
      if(!Dt4_37)  PORTC &= ~(1<<PORTC2); else PORTC |= (1<<PORTC2); //PС2 - ниже 37 град 37+красн
     798:	80 91 81 00 	lds	r24, 0x0081
     79c:	88 23       	and	r24, r24
     79e:	41 f4       	brne	.+16     	; 0x7b0 <__stack+0x551>
     7a0:	a5 e3       	ldi	r26, 0x35	; 53
     7a2:	b0 e0       	ldi	r27, 0x00	; 0
     7a4:	e5 e3       	ldi	r30, 0x35	; 53
     7a6:	f0 e0       	ldi	r31, 0x00	; 0
     7a8:	80 81       	ld	r24, Z
     7aa:	8b 7f       	andi	r24, 0xFB	; 251
     7ac:	8c 93       	st	X, r24
     7ae:	07 c0       	rjmp	.+14     	; 0x7be <__stack+0x55f>
     7b0:	a5 e3       	ldi	r26, 0x35	; 53
     7b2:	b0 e0       	ldi	r27, 0x00	; 0
     7b4:	e5 e3       	ldi	r30, 0x35	; 53
     7b6:	f0 e0       	ldi	r31, 0x00	; 0
     7b8:	80 81       	ld	r24, Z
     7ba:	84 60       	ori	r24, 0x04	; 4
     7bc:	8c 93       	st	X, r24

      if(Dt5_37)   PORTC &= ~(1<<PORTC4); else PORTC |= (1<<PORTC4); //PC4 - выше 45 град зеленый
     7be:	80 91 b4 00 	lds	r24, 0x00B4
     7c2:	88 23       	and	r24, r24
     7c4:	41 f0       	breq	.+16     	; 0x7d6 <__stack+0x577>
     7c6:	a5 e3       	ldi	r26, 0x35	; 53
     7c8:	b0 e0       	ldi	r27, 0x00	; 0
     7ca:	e5 e3       	ldi	r30, 0x35	; 53
     7cc:	f0 e0       	ldi	r31, 0x00	; 0
     7ce:	80 81       	ld	r24, Z
     7d0:	8f 7e       	andi	r24, 0xEF	; 239
     7d2:	8c 93       	st	X, r24
     7d4:	07 c0       	rjmp	.+14     	; 0x7e4 <__stack+0x585>
     7d6:	a5 e3       	ldi	r26, 0x35	; 53
     7d8:	b0 e0       	ldi	r27, 0x00	; 0
     7da:	e5 e3       	ldi	r30, 0x35	; 53
     7dc:	f0 e0       	ldi	r31, 0x00	; 0
     7de:	80 81       	ld	r24, Z
     7e0:	80 61       	ori	r24, 0x10	; 16
     7e2:	8c 93       	st	X, r24
      if(!Dt5_95)  PORTC &= ~(1<<PORTC0); else PORTC |= (1<<PORTC0); //PC0 - выше 95 град
     7e4:	80 91 b1 00 	lds	r24, 0x00B1
     7e8:	88 23       	and	r24, r24
     7ea:	41 f4       	brne	.+16     	; 0x7fc <__stack+0x59d>
     7ec:	a5 e3       	ldi	r26, 0x35	; 53
     7ee:	b0 e0       	ldi	r27, 0x00	; 0
     7f0:	e5 e3       	ldi	r30, 0x35	; 53
     7f2:	f0 e0       	ldi	r31, 0x00	; 0
     7f4:	80 81       	ld	r24, Z
     7f6:	8e 7f       	andi	r24, 0xFE	; 254
     7f8:	8c 93       	st	X, r24
     7fa:	07 c0       	rjmp	.+14     	; 0x80a <__stack+0x5ab>
     7fc:	a5 e3       	ldi	r26, 0x35	; 53
     7fe:	b0 e0       	ldi	r27, 0x00	; 0
     800:	e5 e3       	ldi	r30, 0x35	; 53
     802:	f0 e0       	ldi	r31, 0x00	; 0
     804:	80 81       	ld	r24, Z
     806:	81 60       	ori	r24, 0x01	; 1
     808:	8c 93       	st	X, r24
      if(Dt5_118)  PORTC &= ~(1<<PORTC1); else PORTC |= (1<<PORTC1); //PC1 - выше 118 град логика работы 118гр.
     80a:	80 91 d7 00 	lds	r24, 0x00D7
     80e:	88 23       	and	r24, r24
     810:	41 f0       	breq	.+16     	; 0x822 <__stack+0x5c3>
     812:	a5 e3       	ldi	r26, 0x35	; 53
     814:	b0 e0       	ldi	r27, 0x00	; 0
     816:	e5 e3       	ldi	r30, 0x35	; 53
     818:	f0 e0       	ldi	r31, 0x00	; 0
     81a:	80 81       	ld	r24, Z
     81c:	8d 7f       	andi	r24, 0xFD	; 253
     81e:	8c 93       	st	X, r24
     820:	07 c0       	rjmp	.+14     	; 0x830 <__stack+0x5d1>
     822:	a5 e3       	ldi	r26, 0x35	; 53
     824:	b0 e0       	ldi	r27, 0x00	; 0
     826:	e5 e3       	ldi	r30, 0x35	; 53
     828:	f0 e0       	ldi	r31, 0x00	; 0
     82a:	80 81       	ld	r24, Z
     82c:	82 60       	ori	r24, 0x02	; 2
     82e:	8c 93       	st	X, r24

	  if(Dt6_115)  PORTC &= ~(1<<PORTC3); else PORTC |= (1<<PORTC3); //PС3 - выше 115 град и 115 гр. инверсная
     830:	80 91 76 00 	lds	r24, 0x0076
     834:	88 23       	and	r24, r24
     836:	41 f0       	breq	.+16     	; 0x848 <__stack+0x5e9>
     838:	a5 e3       	ldi	r26, 0x35	; 53
     83a:	b0 e0       	ldi	r27, 0x00	; 0
     83c:	e5 e3       	ldi	r30, 0x35	; 53
     83e:	f0 e0       	ldi	r31, 0x00	; 0
     840:	80 81       	ld	r24, Z
     842:	87 7f       	andi	r24, 0xF7	; 247
     844:	8c 93       	st	X, r24
     846:	07 c0       	rjmp	.+14     	; 0x856 <__stack+0x5f7>
     848:	a5 e3       	ldi	r26, 0x35	; 53
     84a:	b0 e0       	ldi	r27, 0x00	; 0
     84c:	e5 e3       	ldi	r30, 0x35	; 53
     84e:	f0 e0       	ldi	r31, 0x00	; 0
     850:	80 81       	ld	r24, Z
     852:	88 60       	ori	r24, 0x08	; 8
     854:	8c 93       	st	X, r24

      if(!Dd1_1)   PORTD &= ~(1<<PORTD0); else PORTD |= (1<<PORTD0); //PD0 - выше 1 кг
     856:	80 91 7d 00 	lds	r24, 0x007D
     85a:	88 23       	and	r24, r24
     85c:	41 f4       	brne	.+16     	; 0x86e <__stack+0x60f>
     85e:	a2 e3       	ldi	r26, 0x32	; 50
     860:	b0 e0       	ldi	r27, 0x00	; 0
     862:	e2 e3       	ldi	r30, 0x32	; 50
     864:	f0 e0       	ldi	r31, 0x00	; 0
     866:	80 81       	ld	r24, Z
     868:	8e 7f       	andi	r24, 0xFE	; 254
     86a:	8c 93       	st	X, r24
     86c:	07 c0       	rjmp	.+14     	; 0x87c <__stack+0x61d>
     86e:	a2 e3       	ldi	r26, 0x32	; 50
     870:	b0 e0       	ldi	r27, 0x00	; 0
     872:	e2 e3       	ldi	r30, 0x32	; 50
     874:	f0 e0       	ldi	r31, 0x00	; 0
     876:	80 81       	ld	r24, Z
     878:	81 60       	ori	r24, 0x01	; 1
     87a:	8c 93       	st	X, r24
      if(Dd1_4)    PORTD &= ~(1<<PORTD1); else PORTD |= (1<<PORTD1); //PD1 - ниже 4 кг
     87c:	80 91 89 00 	lds	r24, 0x0089
     880:	88 23       	and	r24, r24
     882:	41 f0       	breq	.+16     	; 0x894 <__stack+0x635>
     884:	a2 e3       	ldi	r26, 0x32	; 50
     886:	b0 e0       	ldi	r27, 0x00	; 0
     888:	e2 e3       	ldi	r30, 0x32	; 50
     88a:	f0 e0       	ldi	r31, 0x00	; 0
     88c:	80 81       	ld	r24, Z
     88e:	8d 7f       	andi	r24, 0xFD	; 253
     890:	8c 93       	st	X, r24
     892:	07 c0       	rjmp	.+14     	; 0x8a2 <__stack+0x643>
     894:	a2 e3       	ldi	r26, 0x32	; 50
     896:	b0 e0       	ldi	r27, 0x00	; 0
     898:	e2 e3       	ldi	r30, 0x32	; 50
     89a:	f0 e0       	ldi	r31, 0x00	; 0
     89c:	80 81       	ld	r24, Z
     89e:	82 60       	ori	r24, 0x02	; 2
     8a0:	8c 93       	st	X, r24

      if(!Nd_500)  PORTD &= ~(1<<PORTD2); else PORTD |= (1<<PORTD2); //PD2 - выше 500
     8a2:	80 91 fe 00 	lds	r24, 0x00FE
     8a6:	88 23       	and	r24, r24
     8a8:	41 f4       	brne	.+16     	; 0x8ba <__stack+0x65b>
     8aa:	a2 e3       	ldi	r26, 0x32	; 50
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	e2 e3       	ldi	r30, 0x32	; 50
     8b0:	f0 e0       	ldi	r31, 0x00	; 0
     8b2:	80 81       	ld	r24, Z
     8b4:	8b 7f       	andi	r24, 0xFB	; 251
     8b6:	8c 93       	st	X, r24
     8b8:	07 c0       	rjmp	.+14     	; 0x8c8 <__stack+0x669>
     8ba:	a2 e3       	ldi	r26, 0x32	; 50
     8bc:	b0 e0       	ldi	r27, 0x00	; 0
     8be:	e2 e3       	ldi	r30, 0x32	; 50
     8c0:	f0 e0       	ldi	r31, 0x00	; 0
     8c2:	80 81       	ld	r24, Z
     8c4:	84 60       	ori	r24, 0x04	; 4
     8c6:	8c 93       	st	X, r24
      if(!Nd_1450) PORTD &= ~(1<<PORTD4); else PORTD |= (1<<PORTD4); //PD4 - выше 1450
     8c8:	80 91 bb 00 	lds	r24, 0x00BB
     8cc:	88 23       	and	r24, r24
     8ce:	41 f4       	brne	.+16     	; 0x8e0 <__stack+0x681>
     8d0:	a2 e3       	ldi	r26, 0x32	; 50
     8d2:	b0 e0       	ldi	r27, 0x00	; 0
     8d4:	e2 e3       	ldi	r30, 0x32	; 50
     8d6:	f0 e0       	ldi	r31, 0x00	; 0
     8d8:	80 81       	ld	r24, Z
     8da:	8f 7e       	andi	r24, 0xEF	; 239
     8dc:	8c 93       	st	X, r24
     8de:	07 c0       	rjmp	.+14     	; 0x8ee <__stack+0x68f>
     8e0:	a2 e3       	ldi	r26, 0x32	; 50
     8e2:	b0 e0       	ldi	r27, 0x00	; 0
     8e4:	e2 e3       	ldi	r30, 0x32	; 50
     8e6:	f0 e0       	ldi	r31, 0x00	; 0
     8e8:	80 81       	ld	r24, Z
     8ea:	80 61       	ori	r24, 0x10	; 16
     8ec:	8c 93       	st	X, r24
      if(Nd_1750)  PORTC &= ~(1<<PORTC5); else PORTC |= (1<<PORTC5); //PC5 - выше 1750
     8ee:	80 91 85 00 	lds	r24, 0x0085
     8f2:	88 23       	and	r24, r24
     8f4:	41 f0       	breq	.+16     	; 0x906 <__stack+0x6a7>
     8f6:	a5 e3       	ldi	r26, 0x35	; 53
     8f8:	b0 e0       	ldi	r27, 0x00	; 0
     8fa:	e5 e3       	ldi	r30, 0x35	; 53
     8fc:	f0 e0       	ldi	r31, 0x00	; 0
     8fe:	80 81       	ld	r24, Z
     900:	8f 7d       	andi	r24, 0xDF	; 223
     902:	8c 93       	st	X, r24
     904:	89 cd       	rjmp	.-1262   	; 0x418 <__stack+0x1b9>
     906:	a5 e3       	ldi	r26, 0x35	; 53
     908:	b0 e0       	ldi	r27, 0x00	; 0
     90a:	e5 e3       	ldi	r30, 0x35	; 53
     90c:	f0 e0       	ldi	r31, 0x00	; 0
     90e:	80 81       	ld	r24, Z
     910:	80 62       	ori	r24, 0x20	; 32
     912:	8c 93       	st	X, r24
     914:	81 cd       	rjmp	.-1278   	; 0x418 <__stack+0x1b9>

00000916 <InitAd>:
    }
  }
}

void InitAd(void)
{
     916:	df 93       	push	r29
     918:	cf 93       	push	r28
     91a:	cd b7       	in	r28, 0x3d	; 61
     91c:	de b7       	in	r29, 0x3e	; 62
  ADMUX = (1<<REFS0);                        //internal Aref with capacitor 0100 0000 (ADC0, single-ended, gain=1)
     91e:	e7 e2       	ldi	r30, 0x27	; 39
     920:	f0 e0       	ldi	r31, 0x00	; 0
     922:	80 e4       	ldi	r24, 0x40	; 64
     924:	80 83       	st	Z, r24
  CtAd = CtAd0;                              //63
     926:	8f e3       	ldi	r24, 0x3F	; 63
     928:	80 93 d5 00 	sts	0x00D5, r24
  NumberAd = 0;
     92c:	10 92 80 00 	sts	0x0080, r1
  ADCSRA = 0;
     930:	e6 e2       	ldi	r30, 0x26	; 38
     932:	f0 e0       	ldi	r31, 0x00	; 0
     934:	10 82       	st	Z, r1
  ADCSRA |=(1<<ADEN);                        //enable AD
     936:	a6 e2       	ldi	r26, 0x26	; 38
     938:	b0 e0       	ldi	r27, 0x00	; 0
     93a:	e6 e2       	ldi	r30, 0x26	; 38
     93c:	f0 e0       	ldi	r31, 0x00	; 0
     93e:	80 81       	ld	r24, Z
     940:	80 68       	ori	r24, 0x80	; 128
     942:	8c 93       	st	X, r24
  ADCSRA |=(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //1/128 - 125 kHz ???
     944:	a6 e2       	ldi	r26, 0x26	; 38
     946:	b0 e0       	ldi	r27, 0x00	; 0
     948:	e6 e2       	ldi	r30, 0x26	; 38
     94a:	f0 e0       	ldi	r31, 0x00	; 0
     94c:	80 81       	ld	r24, Z
     94e:	87 60       	ori	r24, 0x07	; 7
     950:	8c 93       	st	X, r24
  ADCSRA |=(1<<ADSC);                        //Start
     952:	a6 e2       	ldi	r26, 0x26	; 38
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	e6 e2       	ldi	r30, 0x26	; 38
     958:	f0 e0       	ldi	r31, 0x00	; 0
     95a:	80 81       	ld	r24, Z
     95c:	80 64       	ori	r24, 0x40	; 64
     95e:	8c 93       	st	X, r24
}
     960:	cf 91       	pop	r28
     962:	df 91       	pop	r29
     964:	08 95       	ret

00000966 <AccountNDiz>:

void AccountNDiz(void)          //подпрограмма вычисления частоты вращения маховика коленвала дизеля
{
     966:	df 93       	push	r29
     968:	cf 93       	push	r28
     96a:	00 d0       	rcall	.+0      	; 0x96c <AccountNDiz+0x6>
     96c:	00 d0       	rcall	.+0      	; 0x96e <AccountNDiz+0x8>
     96e:	00 d0       	rcall	.+0      	; 0x970 <AccountNDiz+0xa>
     970:	cd b7       	in	r28, 0x3d	; 61
     972:	de b7       	in	r29, 0x3e	; 62
  unsigned long R1;             //переменная количества оборотов
  unsigned char R0;             //номер элемента массива выборок количества оборотов
  unsigned char NDiz_invalid=0; //флаг неправильной работы
     974:	19 82       	std	Y+1, r1	; 0x01
  {
    R1=0;
     976:	1b 82       	std	Y+3, r1	; 0x03
     978:	1c 82       	std	Y+4, r1	; 0x04
     97a:	1d 82       	std	Y+5, r1	; 0x05
     97c:	1e 82       	std	Y+6, r1	; 0x06
    for(R0=0; R0<=15; ++R0)
     97e:	1a 82       	std	Y+2, r1	; 0x02
     980:	38 c0       	rjmp	.+112    	; 0x9f2 <AccountNDiz+0x8c>
    {
      if((TDizTemp[R0]==0xffff)||(TDizTemp[R0]==0)) NDiz_invalid=1; //выставление флага если расчет кол-ва оборотов будет неверный
     982:	8a 81       	ldd	r24, Y+2	; 0x02
     984:	88 2f       	mov	r24, r24
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	88 0f       	add	r24, r24
     98a:	99 1f       	adc	r25, r25
     98c:	fc 01       	movw	r30, r24
     98e:	e4 57       	subi	r30, 0x74	; 116
     990:	ff 4f       	sbci	r31, 0xFF	; 255
     992:	80 81       	ld	r24, Z
     994:	91 81       	ldd	r25, Z+1	; 0x01
     996:	2f ef       	ldi	r18, 0xFF	; 255
     998:	8f 3f       	cpi	r24, 0xFF	; 255
     99a:	92 07       	cpc	r25, r18
     99c:	61 f0       	breq	.+24     	; 0x9b6 <AccountNDiz+0x50>
     99e:	8a 81       	ldd	r24, Y+2	; 0x02
     9a0:	88 2f       	mov	r24, r24
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	88 0f       	add	r24, r24
     9a6:	99 1f       	adc	r25, r25
     9a8:	fc 01       	movw	r30, r24
     9aa:	e4 57       	subi	r30, 0x74	; 116
     9ac:	ff 4f       	sbci	r31, 0xFF	; 255
     9ae:	80 81       	ld	r24, Z
     9b0:	91 81       	ldd	r25, Z+1	; 0x01
     9b2:	00 97       	sbiw	r24, 0x00	; 0
     9b4:	11 f4       	brne	.+4      	; 0x9ba <AccountNDiz+0x54>
     9b6:	81 e0       	ldi	r24, 0x01	; 1
     9b8:	89 83       	std	Y+1, r24	; 0x01
      R1+=TDizTemp[R0]; //суммирование всех 16 выборок
     9ba:	8a 81       	ldd	r24, Y+2	; 0x02
     9bc:	88 2f       	mov	r24, r24
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	88 0f       	add	r24, r24
     9c2:	99 1f       	adc	r25, r25
     9c4:	fc 01       	movw	r30, r24
     9c6:	e4 57       	subi	r30, 0x74	; 116
     9c8:	ff 4f       	sbci	r31, 0xFF	; 255
     9ca:	80 81       	ld	r24, Z
     9cc:	91 81       	ldd	r25, Z+1	; 0x01
     9ce:	9c 01       	movw	r18, r24
     9d0:	40 e0       	ldi	r20, 0x00	; 0
     9d2:	50 e0       	ldi	r21, 0x00	; 0
     9d4:	8b 81       	ldd	r24, Y+3	; 0x03
     9d6:	9c 81       	ldd	r25, Y+4	; 0x04
     9d8:	ad 81       	ldd	r26, Y+5	; 0x05
     9da:	be 81       	ldd	r27, Y+6	; 0x06
     9dc:	82 0f       	add	r24, r18
     9de:	93 1f       	adc	r25, r19
     9e0:	a4 1f       	adc	r26, r20
     9e2:	b5 1f       	adc	r27, r21
     9e4:	8b 83       	std	Y+3, r24	; 0x03
     9e6:	9c 83       	std	Y+4, r25	; 0x04
     9e8:	ad 83       	std	Y+5, r26	; 0x05
     9ea:	be 83       	std	Y+6, r27	; 0x06
  unsigned long R1;             //переменная количества оборотов
  unsigned char R0;             //номер элемента массива выборок количества оборотов
  unsigned char NDiz_invalid=0; //флаг неправильной работы
  {
    R1=0;
    for(R0=0; R0<=15; ++R0)
     9ec:	8a 81       	ldd	r24, Y+2	; 0x02
     9ee:	8f 5f       	subi	r24, 0xFF	; 255
     9f0:	8a 83       	std	Y+2, r24	; 0x02
     9f2:	8a 81       	ldd	r24, Y+2	; 0x02
     9f4:	80 31       	cpi	r24, 0x10	; 16
     9f6:	28 f2       	brcs	.-118    	; 0x982 <AccountNDiz+0x1c>
    {
      if((TDizTemp[R0]==0xffff)||(TDizTemp[R0]==0)) NDiz_invalid=1; //выставление флага если расчет кол-ва оборотов будет неверный
      R1+=TDizTemp[R0]; //суммирование всех 16 выборок
    }
    R1>>=4; //вычисление среднего значения
     9f8:	8b 81       	ldd	r24, Y+3	; 0x03
     9fa:	9c 81       	ldd	r25, Y+4	; 0x04
     9fc:	ad 81       	ldd	r26, Y+5	; 0x05
     9fe:	be 81       	ldd	r27, Y+6	; 0x06
     a00:	68 94       	set
     a02:	13 f8       	bld	r1, 3
     a04:	b6 95       	lsr	r27
     a06:	a7 95       	ror	r26
     a08:	97 95       	ror	r25
     a0a:	87 95       	ror	r24
     a0c:	16 94       	lsr	r1
     a0e:	d1 f7       	brne	.-12     	; 0xa04 <AccountNDiz+0x9e>
     a10:	8b 83       	std	Y+3, r24	; 0x03
     a12:	9c 83       	std	Y+4, r25	; 0x04
     a14:	ad 83       	std	Y+5, r26	; 0x05
     a16:	be 83       	std	Y+6, r27	; 0x06
    if((R1>62330)||(NDiz_Overflow==1)) // если результат больше 62330 или установлен флаг переполнения, то обороты = 0
     a18:	8b 81       	ldd	r24, Y+3	; 0x03
     a1a:	9c 81       	ldd	r25, Y+4	; 0x04
     a1c:	ad 81       	ldd	r26, Y+5	; 0x05
     a1e:	be 81       	ldd	r27, Y+6	; 0x06
     a20:	8b 37       	cpi	r24, 0x7B	; 123
     a22:	23 ef       	ldi	r18, 0xF3	; 243
     a24:	92 07       	cpc	r25, r18
     a26:	20 e0       	ldi	r18, 0x00	; 0
     a28:	a2 07       	cpc	r26, r18
     a2a:	20 e0       	ldi	r18, 0x00	; 0
     a2c:	b2 07       	cpc	r27, r18
     a2e:	20 f4       	brcc	.+8      	; 0xa38 <AccountNDiz+0xd2>
     a30:	80 91 72 00 	lds	r24, 0x0072
     a34:	81 30       	cpi	r24, 0x01	; 1
     a36:	29 f4       	brne	.+10     	; 0xa42 <AccountNDiz+0xdc>
      NDiz=0;
     a38:	10 92 b8 00 	sts	0x00B8, r1
     a3c:	10 92 b7 00 	sts	0x00B7, r1
     a40:	33 c0       	rjmp	.+102    	; 0xaa8 <AccountNDiz+0x142>

    else
    {
      if(!NDiz_invalid)
     a42:	89 81       	ldd	r24, Y+1	; 0x01
     a44:	88 23       	and	r24, r24
     a46:	c9 f4       	brne	.+50     	; 0xa7a <AccountNDiz+0x114>
      {
        R1=8421000/R1;  //R1 = 62330 - 140 оборотов в минуту или 2,33(3) в сек
     a48:	88 e8       	ldi	r24, 0x88	; 136
     a4a:	9e e7       	ldi	r25, 0x7E	; 126
     a4c:	a0 e8       	ldi	r26, 0x80	; 128
     a4e:	b0 e0       	ldi	r27, 0x00	; 0
     a50:	2b 81       	ldd	r18, Y+3	; 0x03
     a52:	3c 81       	ldd	r19, Y+4	; 0x04
     a54:	4d 81       	ldd	r20, Y+5	; 0x05
     a56:	5e 81       	ldd	r21, Y+6	; 0x06
     a58:	bc 01       	movw	r22, r24
     a5a:	cd 01       	movw	r24, r26
     a5c:	97 d3       	rcall	.+1838   	; 0x118c <__udivmodsi4>
     a5e:	da 01       	movw	r26, r20
     a60:	c9 01       	movw	r24, r18
     a62:	8b 83       	std	Y+3, r24	; 0x03
     a64:	9c 83       	std	Y+4, r25	; 0x04
     a66:	ad 83       	std	Y+5, r26	; 0x05
     a68:	be 83       	std	Y+6, r27	; 0x06
        NDiz=R1;
     a6a:	8b 81       	ldd	r24, Y+3	; 0x03
     a6c:	9c 81       	ldd	r25, Y+4	; 0x04
     a6e:	90 93 b8 00 	sts	0x00B8, r25
     a72:	80 93 b7 00 	sts	0x00B7, r24
        InvCounter=0;   //обнуление счетчика инвалидности
     a76:	10 92 7e 00 	sts	0x007E, r1
      }                 //R1 = 2909 - 3000оборотов в минуту или 50 в секунду
      if(NDiz_invalid)
     a7a:	89 81       	ldd	r24, Y+1	; 0x01
     a7c:	88 23       	and	r24, r24
     a7e:	a1 f0       	breq	.+40     	; 0xaa8 <AccountNDiz+0x142>
      {
        InvCounter++;
     a80:	80 91 7e 00 	lds	r24, 0x007E
     a84:	8f 5f       	subi	r24, 0xFF	; 255
     a86:	80 93 7e 00 	sts	0x007E, r24
        if(InvCounter>=10)
     a8a:	80 91 7e 00 	lds	r24, 0x007E
     a8e:	8a 30       	cpi	r24, 0x0A	; 10
     a90:	58 f0       	brcs	.+22     	; 0xaa8 <AccountNDiz+0x142>
        {
          if(InvCounter>=250) InvCounter = 4; //колцевание
     a92:	80 91 7e 00 	lds	r24, 0x007E
     a96:	8a 3f       	cpi	r24, 0xFA	; 250
     a98:	18 f0       	brcs	.+6      	; 0xaa0 <AccountNDiz+0x13a>
     a9a:	84 e0       	ldi	r24, 0x04	; 4
     a9c:	80 93 7e 00 	sts	0x007E, r24
          NDiz = 0;
     aa0:	10 92 b8 00 	sts	0x00B8, r1
     aa4:	10 92 b7 00 	sts	0x00B7, r1
        }
      }
    }
  }
}
     aa8:	26 96       	adiw	r28, 0x06	; 6
     aaa:	0f b6       	in	r0, 0x3f	; 63
     aac:	f8 94       	cli
     aae:	de bf       	out	0x3e, r29	; 62
     ab0:	0f be       	out	0x3f, r0	; 63
     ab2:	cd bf       	out	0x3d, r28	; 61
     ab4:	cf 91       	pop	r28
     ab6:	df 91       	pop	r29
     ab8:	08 95       	ret

00000aba <AccountADC>:
//для УД-45 частота импульсов на 1500оборотов=2850
//таймер досчитывает до 5614
//коэффициент деления=

void AccountADC(void)
{
     aba:	df 93       	push	r29
     abc:	cf 93       	push	r28
     abe:	cd b7       	in	r28, 0x3d	; 61
     ac0:	de b7       	in	r29, 0x3e	; 62
  Dd1=AdResult[0];
     ac2:	80 91 e6 00 	lds	r24, 0x00E6
     ac6:	90 91 e7 00 	lds	r25, 0x00E7
     aca:	90 93 b3 00 	sts	0x00B3, r25
     ace:	80 93 b2 00 	sts	0x00B2, r24
  Dt4=AdResult[1];
     ad2:	80 91 e8 00 	lds	r24, 0x00E8
     ad6:	90 91 e9 00 	lds	r25, 0x00E9
     ada:	90 93 d4 00 	sts	0x00D4, r25
     ade:	80 93 d3 00 	sts	0x00D3, r24
  Dt5=AdResult[2];
     ae2:	80 91 ea 00 	lds	r24, 0x00EA
     ae6:	90 91 eb 00 	lds	r25, 0x00EB
     aea:	90 93 7c 00 	sts	0x007C, r25
     aee:	80 93 7b 00 	sts	0x007B, r24
  Dt6=AdResult[3];
     af2:	80 91 ec 00 	lds	r24, 0x00EC
     af6:	90 91 ed 00 	lds	r25, 0x00ED
     afa:	90 93 83 00 	sts	0x0083, r25
     afe:	80 93 82 00 	sts	0x0082, r24
}
     b02:	cf 91       	pop	r28
     b04:	df 91       	pop	r29
     b06:	08 95       	ret

00000b08 <switch_channel>:

unsigned int switch_channel(unsigned int channel)
{
     b08:	df 93       	push	r29
     b0a:	cf 93       	push	r28
     b0c:	00 d0       	rcall	.+0      	; 0xb0e <switch_channel+0x6>
     b0e:	00 d0       	rcall	.+0      	; 0xb10 <switch_channel+0x8>
     b10:	cd b7       	in	r28, 0x3d	; 61
     b12:	de b7       	in	r29, 0x3e	; 62
     b14:	9a 83       	std	Y+2, r25	; 0x02
     b16:	89 83       	std	Y+1, r24	; 0x01
  //алгоритм переключения индикации и записи оцифрованных значений датчиков в ОЗУ
  switch (count_channel)           //варианты индикации и записи оцифрованных значений датчиков в зависимости от канала
     b18:	80 91 bd 00 	lds	r24, 0x00BD
     b1c:	90 91 be 00 	lds	r25, 0x00BE
     b20:	9c 83       	std	Y+4, r25	; 0x04
     b22:	8b 83       	std	Y+3, r24	; 0x03
     b24:	8b 81       	ldd	r24, Y+3	; 0x03
     b26:	9c 81       	ldd	r25, Y+4	; 0x04
     b28:	83 30       	cpi	r24, 0x03	; 3
     b2a:	91 05       	cpc	r25, r1
     b2c:	09 f4       	brne	.+2      	; 0xb30 <switch_channel+0x28>
     b2e:	a6 c0       	rjmp	.+332    	; 0xc7c <switch_channel+0x174>
     b30:	8b 81       	ldd	r24, Y+3	; 0x03
     b32:	9c 81       	ldd	r25, Y+4	; 0x04
     b34:	84 30       	cpi	r24, 0x04	; 4
     b36:	91 05       	cpc	r25, r1
     b38:	68 f4       	brcc	.+26     	; 0xb54 <switch_channel+0x4c>
     b3a:	8b 81       	ldd	r24, Y+3	; 0x03
     b3c:	9c 81       	ldd	r25, Y+4	; 0x04
     b3e:	81 30       	cpi	r24, 0x01	; 1
     b40:	91 05       	cpc	r25, r1
     b42:	09 f4       	brne	.+2      	; 0xb46 <switch_channel+0x3e>
     b44:	45 c0       	rjmp	.+138    	; 0xbd0 <switch_channel+0xc8>
     b46:	8b 81       	ldd	r24, Y+3	; 0x03
     b48:	9c 81       	ldd	r25, Y+4	; 0x04
     b4a:	82 30       	cpi	r24, 0x02	; 2
     b4c:	91 05       	cpc	r25, r1
     b4e:	08 f0       	brcs	.+2      	; 0xb52 <switch_channel+0x4a>
     b50:	6a c0       	rjmp	.+212    	; 0xc26 <switch_channel+0x11e>
     b52:	13 c0       	rjmp	.+38     	; 0xb7a <switch_channel+0x72>
     b54:	8b 81       	ldd	r24, Y+3	; 0x03
     b56:	9c 81       	ldd	r25, Y+4	; 0x04
     b58:	85 30       	cpi	r24, 0x05	; 5
     b5a:	91 05       	cpc	r25, r1
     b5c:	09 f4       	brne	.+2      	; 0xb60 <switch_channel+0x58>
     b5e:	e4 c0       	rjmp	.+456    	; 0xd28 <switch_channel+0x220>
     b60:	8b 81       	ldd	r24, Y+3	; 0x03
     b62:	9c 81       	ldd	r25, Y+4	; 0x04
     b64:	85 30       	cpi	r24, 0x05	; 5
     b66:	91 05       	cpc	r25, r1
     b68:	08 f4       	brcc	.+2      	; 0xb6c <switch_channel+0x64>
     b6a:	b3 c0       	rjmp	.+358    	; 0xcd2 <switch_channel+0x1ca>
     b6c:	8b 81       	ldd	r24, Y+3	; 0x03
     b6e:	9c 81       	ldd	r25, Y+4	; 0x04
     b70:	86 30       	cpi	r24, 0x06	; 6
     b72:	91 05       	cpc	r25, r1
     b74:	09 f4       	brne	.+2      	; 0xb78 <switch_channel+0x70>
     b76:	03 c1       	rjmp	.+518    	; 0xd7e <switch_channel+0x276>
     b78:	2b c1       	rjmp	.+598    	; 0xdd0 <switch_channel+0x2c8>
  {
  case 0:
    mask_leds_c = 0x00;           //PORT C.X маска следующего канала
     b7a:	10 92 b5 00 	sts	0x00B5, r1
    mask_leds_d = 0x08;           //PORT D.3  0x08
     b7e:	88 e0       	ldi	r24, 0x08	; 8
     b80:	80 93 74 00 	sts	0x0074, r24
    array[count_channel] = Dt4;
     b84:	80 91 bd 00 	lds	r24, 0x00BD
     b88:	90 91 be 00 	lds	r25, 0x00BE
     b8c:	20 91 d3 00 	lds	r18, 0x00D3
     b90:	30 91 d4 00 	lds	r19, 0x00D4
     b94:	88 0f       	add	r24, r24
     b96:	99 1f       	adc	r25, r25
     b98:	fc 01       	movw	r30, r24
     b9a:	eb 53       	subi	r30, 0x3B	; 59
     b9c:	ff 4f       	sbci	r31, 0xFF	; 255
     b9e:	31 83       	std	Z+1, r19	; 0x01
     ba0:	20 83       	st	Z, r18
	eeprom_write_word((uint16_t *)(EEP_ADDR+count_channel*2), array[count_channel]);
     ba2:	80 91 bd 00 	lds	r24, 0x00BD
     ba6:	90 91 be 00 	lds	r25, 0x00BE
     baa:	49 96       	adiw	r24, 0x19	; 25
     bac:	88 0f       	add	r24, r24
     bae:	99 1f       	adc	r25, r25
     bb0:	ac 01       	movw	r20, r24
     bb2:	80 91 bd 00 	lds	r24, 0x00BD
     bb6:	90 91 be 00 	lds	r25, 0x00BE
     bba:	88 0f       	add	r24, r24
     bbc:	99 1f       	adc	r25, r25
     bbe:	fc 01       	movw	r30, r24
     bc0:	eb 53       	subi	r30, 0x3B	; 59
     bc2:	ff 4f       	sbci	r31, 0xFF	; 255
     bc4:	20 81       	ld	r18, Z
     bc6:	31 81       	ldd	r19, Z+1	; 0x01
     bc8:	ca 01       	movw	r24, r20
     bca:	b9 01       	movw	r22, r18
     bcc:	06 d3       	rcall	.+1548   	; 0x11da <__eewr_word_m8535>
     bce:	00 c1       	rjmp	.+512    	; 0xdd0 <switch_channel+0x2c8>
    break;
  case 1:
    mask_leds_c = 0x04;           //PORT C.2  0x04
     bd0:	84 e0       	ldi	r24, 0x04	; 4
     bd2:	80 93 b5 00 	sts	0x00B5, r24
    mask_leds_d = 0x00;           //PORT D.X
     bd6:	10 92 74 00 	sts	0x0074, r1
    array[count_channel] = Dt4;
     bda:	80 91 bd 00 	lds	r24, 0x00BD
     bde:	90 91 be 00 	lds	r25, 0x00BE
     be2:	20 91 d3 00 	lds	r18, 0x00D3
     be6:	30 91 d4 00 	lds	r19, 0x00D4
     bea:	88 0f       	add	r24, r24
     bec:	99 1f       	adc	r25, r25
     bee:	fc 01       	movw	r30, r24
     bf0:	eb 53       	subi	r30, 0x3B	; 59
     bf2:	ff 4f       	sbci	r31, 0xFF	; 255
     bf4:	31 83       	std	Z+1, r19	; 0x01
     bf6:	20 83       	st	Z, r18
    eeprom_write_word((uint16_t *)(EEP_ADDR+count_channel*2), array[count_channel]);
     bf8:	80 91 bd 00 	lds	r24, 0x00BD
     bfc:	90 91 be 00 	lds	r25, 0x00BE
     c00:	49 96       	adiw	r24, 0x19	; 25
     c02:	88 0f       	add	r24, r24
     c04:	99 1f       	adc	r25, r25
     c06:	ac 01       	movw	r20, r24
     c08:	80 91 bd 00 	lds	r24, 0x00BD
     c0c:	90 91 be 00 	lds	r25, 0x00BE
     c10:	88 0f       	add	r24, r24
     c12:	99 1f       	adc	r25, r25
     c14:	fc 01       	movw	r30, r24
     c16:	eb 53       	subi	r30, 0x3B	; 59
     c18:	ff 4f       	sbci	r31, 0xFF	; 255
     c1a:	20 81       	ld	r18, Z
     c1c:	31 81       	ldd	r19, Z+1	; 0x01
     c1e:	ca 01       	movw	r24, r20
     c20:	b9 01       	movw	r22, r18
     c22:	db d2       	rcall	.+1462   	; 0x11da <__eewr_word_m8535>
     c24:	d5 c0       	rjmp	.+426    	; 0xdd0 <switch_channel+0x2c8>
    break;
  case 2:
    mask_leds_c = 0x10;           //PORT C.4  0x10
     c26:	80 e1       	ldi	r24, 0x10	; 16
     c28:	80 93 b5 00 	sts	0x00B5, r24
    mask_leds_d = 0x00;           //PORT D.X
     c2c:	10 92 74 00 	sts	0x0074, r1
    array[count_channel] = Dt4;
     c30:	80 91 bd 00 	lds	r24, 0x00BD
     c34:	90 91 be 00 	lds	r25, 0x00BE
     c38:	20 91 d3 00 	lds	r18, 0x00D3
     c3c:	30 91 d4 00 	lds	r19, 0x00D4
     c40:	88 0f       	add	r24, r24
     c42:	99 1f       	adc	r25, r25
     c44:	fc 01       	movw	r30, r24
     c46:	eb 53       	subi	r30, 0x3B	; 59
     c48:	ff 4f       	sbci	r31, 0xFF	; 255
     c4a:	31 83       	std	Z+1, r19	; 0x01
     c4c:	20 83       	st	Z, r18
    eeprom_write_word((uint16_t *)(EEP_ADDR+count_channel*2), array[count_channel]);
     c4e:	80 91 bd 00 	lds	r24, 0x00BD
     c52:	90 91 be 00 	lds	r25, 0x00BE
     c56:	49 96       	adiw	r24, 0x19	; 25
     c58:	88 0f       	add	r24, r24
     c5a:	99 1f       	adc	r25, r25
     c5c:	ac 01       	movw	r20, r24
     c5e:	80 91 bd 00 	lds	r24, 0x00BD
     c62:	90 91 be 00 	lds	r25, 0x00BE
     c66:	88 0f       	add	r24, r24
     c68:	99 1f       	adc	r25, r25
     c6a:	fc 01       	movw	r30, r24
     c6c:	eb 53       	subi	r30, 0x3B	; 59
     c6e:	ff 4f       	sbci	r31, 0xFF	; 255
     c70:	20 81       	ld	r18, Z
     c72:	31 81       	ldd	r19, Z+1	; 0x01
     c74:	ca 01       	movw	r24, r20
     c76:	b9 01       	movw	r22, r18
     c78:	b0 d2       	rcall	.+1376   	; 0x11da <__eewr_word_m8535>
     c7a:	aa c0       	rjmp	.+340    	; 0xdd0 <switch_channel+0x2c8>
    break;
  case 3:
    mask_leds_c = 0x01;           //PORT C.0  0x01
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	80 93 b5 00 	sts	0x00B5, r24
    mask_leds_d = 0x00;           //PORT D.X
     c82:	10 92 74 00 	sts	0x0074, r1
    array[count_channel] = Dt5;
     c86:	80 91 bd 00 	lds	r24, 0x00BD
     c8a:	90 91 be 00 	lds	r25, 0x00BE
     c8e:	20 91 7b 00 	lds	r18, 0x007B
     c92:	30 91 7c 00 	lds	r19, 0x007C
     c96:	88 0f       	add	r24, r24
     c98:	99 1f       	adc	r25, r25
     c9a:	fc 01       	movw	r30, r24
     c9c:	eb 53       	subi	r30, 0x3B	; 59
     c9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ca0:	31 83       	std	Z+1, r19	; 0x01
     ca2:	20 83       	st	Z, r18
    eeprom_write_word((uint16_t *)(EEP_ADDR+count_channel*2), array[count_channel]);
     ca4:	80 91 bd 00 	lds	r24, 0x00BD
     ca8:	90 91 be 00 	lds	r25, 0x00BE
     cac:	49 96       	adiw	r24, 0x19	; 25
     cae:	88 0f       	add	r24, r24
     cb0:	99 1f       	adc	r25, r25
     cb2:	ac 01       	movw	r20, r24
     cb4:	80 91 bd 00 	lds	r24, 0x00BD
     cb8:	90 91 be 00 	lds	r25, 0x00BE
     cbc:	88 0f       	add	r24, r24
     cbe:	99 1f       	adc	r25, r25
     cc0:	fc 01       	movw	r30, r24
     cc2:	eb 53       	subi	r30, 0x3B	; 59
     cc4:	ff 4f       	sbci	r31, 0xFF	; 255
     cc6:	20 81       	ld	r18, Z
     cc8:	31 81       	ldd	r19, Z+1	; 0x01
     cca:	ca 01       	movw	r24, r20
     ccc:	b9 01       	movw	r22, r18
     cce:	85 d2       	rcall	.+1290   	; 0x11da <__eewr_word_m8535>
     cd0:	7f c0       	rjmp	.+254    	; 0xdd0 <switch_channel+0x2c8>
    break;
  case 4:
    mask_leds_c = 0x02;           //PORT C.1  0x02
     cd2:	82 e0       	ldi	r24, 0x02	; 2
     cd4:	80 93 b5 00 	sts	0x00B5, r24
    mask_leds_d = 0x00;           //PORT D.X
     cd8:	10 92 74 00 	sts	0x0074, r1
    array[count_channel] = Dt5;
     cdc:	80 91 bd 00 	lds	r24, 0x00BD
     ce0:	90 91 be 00 	lds	r25, 0x00BE
     ce4:	20 91 7b 00 	lds	r18, 0x007B
     ce8:	30 91 7c 00 	lds	r19, 0x007C
     cec:	88 0f       	add	r24, r24
     cee:	99 1f       	adc	r25, r25
     cf0:	fc 01       	movw	r30, r24
     cf2:	eb 53       	subi	r30, 0x3B	; 59
     cf4:	ff 4f       	sbci	r31, 0xFF	; 255
     cf6:	31 83       	std	Z+1, r19	; 0x01
     cf8:	20 83       	st	Z, r18
    eeprom_write_word((uint16_t *)(EEP_ADDR+count_channel*2), array[count_channel]);
     cfa:	80 91 bd 00 	lds	r24, 0x00BD
     cfe:	90 91 be 00 	lds	r25, 0x00BE
     d02:	49 96       	adiw	r24, 0x19	; 25
     d04:	88 0f       	add	r24, r24
     d06:	99 1f       	adc	r25, r25
     d08:	ac 01       	movw	r20, r24
     d0a:	80 91 bd 00 	lds	r24, 0x00BD
     d0e:	90 91 be 00 	lds	r25, 0x00BE
     d12:	88 0f       	add	r24, r24
     d14:	99 1f       	adc	r25, r25
     d16:	fc 01       	movw	r30, r24
     d18:	eb 53       	subi	r30, 0x3B	; 59
     d1a:	ff 4f       	sbci	r31, 0xFF	; 255
     d1c:	20 81       	ld	r18, Z
     d1e:	31 81       	ldd	r19, Z+1	; 0x01
     d20:	ca 01       	movw	r24, r20
     d22:	b9 01       	movw	r22, r18
     d24:	5a d2       	rcall	.+1204   	; 0x11da <__eewr_word_m8535>
     d26:	54 c0       	rjmp	.+168    	; 0xdd0 <switch_channel+0x2c8>
    break;
  case 5:
    mask_leds_c = 0x08;           //PORT C.3  0x08
     d28:	88 e0       	ldi	r24, 0x08	; 8
     d2a:	80 93 b5 00 	sts	0x00B5, r24
    mask_leds_d = 0x00;           //PORT D.X
     d2e:	10 92 74 00 	sts	0x0074, r1
    array[count_channel] = Dt5;
     d32:	80 91 bd 00 	lds	r24, 0x00BD
     d36:	90 91 be 00 	lds	r25, 0x00BE
     d3a:	20 91 7b 00 	lds	r18, 0x007B
     d3e:	30 91 7c 00 	lds	r19, 0x007C
     d42:	88 0f       	add	r24, r24
     d44:	99 1f       	adc	r25, r25
     d46:	fc 01       	movw	r30, r24
     d48:	eb 53       	subi	r30, 0x3B	; 59
     d4a:	ff 4f       	sbci	r31, 0xFF	; 255
     d4c:	31 83       	std	Z+1, r19	; 0x01
     d4e:	20 83       	st	Z, r18
    eeprom_write_word((uint16_t *)(EEP_ADDR+count_channel*2), array[count_channel]);
     d50:	80 91 bd 00 	lds	r24, 0x00BD
     d54:	90 91 be 00 	lds	r25, 0x00BE
     d58:	49 96       	adiw	r24, 0x19	; 25
     d5a:	88 0f       	add	r24, r24
     d5c:	99 1f       	adc	r25, r25
     d5e:	ac 01       	movw	r20, r24
     d60:	80 91 bd 00 	lds	r24, 0x00BD
     d64:	90 91 be 00 	lds	r25, 0x00BE
     d68:	88 0f       	add	r24, r24
     d6a:	99 1f       	adc	r25, r25
     d6c:	fc 01       	movw	r30, r24
     d6e:	eb 53       	subi	r30, 0x3B	; 59
     d70:	ff 4f       	sbci	r31, 0xFF	; 255
     d72:	20 81       	ld	r18, Z
     d74:	31 81       	ldd	r19, Z+1	; 0x01
     d76:	ca 01       	movw	r24, r20
     d78:	b9 01       	movw	r22, r18
     d7a:	2f d2       	rcall	.+1118   	; 0x11da <__eewr_word_m8535>
     d7c:	29 c0       	rjmp	.+82     	; 0xdd0 <switch_channel+0x2c8>
    break;
  case 6:
    mask_leds_c = 0x00;           //PORT C.X и PORT D.X- индикация выхода из режима калибровки
     d7e:	10 92 b5 00 	sts	0x00B5, r1
    mask_leds_d = 0x00;
     d82:	10 92 74 00 	sts	0x0074, r1
    array[count_channel] = Dt6;
     d86:	80 91 bd 00 	lds	r24, 0x00BD
     d8a:	90 91 be 00 	lds	r25, 0x00BE
     d8e:	20 91 82 00 	lds	r18, 0x0082
     d92:	30 91 83 00 	lds	r19, 0x0083
     d96:	88 0f       	add	r24, r24
     d98:	99 1f       	adc	r25, r25
     d9a:	fc 01       	movw	r30, r24
     d9c:	eb 53       	subi	r30, 0x3B	; 59
     d9e:	ff 4f       	sbci	r31, 0xFF	; 255
     da0:	31 83       	std	Z+1, r19	; 0x01
     da2:	20 83       	st	Z, r18
    eeprom_write_word((uint16_t *)(EEP_ADDR+count_channel*2), array[count_channel]);
     da4:	80 91 bd 00 	lds	r24, 0x00BD
     da8:	90 91 be 00 	lds	r25, 0x00BE
     dac:	49 96       	adiw	r24, 0x19	; 25
     dae:	88 0f       	add	r24, r24
     db0:	99 1f       	adc	r25, r25
     db2:	ac 01       	movw	r20, r24
     db4:	80 91 bd 00 	lds	r24, 0x00BD
     db8:	90 91 be 00 	lds	r25, 0x00BE
     dbc:	88 0f       	add	r24, r24
     dbe:	99 1f       	adc	r25, r25
     dc0:	fc 01       	movw	r30, r24
     dc2:	eb 53       	subi	r30, 0x3B	; 59
     dc4:	ff 4f       	sbci	r31, 0xFF	; 255
     dc6:	20 81       	ld	r18, Z
     dc8:	31 81       	ldd	r19, Z+1	; 0x01
     dca:	ca 01       	movw	r24, r20
     dcc:	b9 01       	movw	r22, r18
     dce:	05 d2       	rcall	.+1034   	; 0x11da <__eewr_word_m8535>
    break;
  }
  return(array[count_channel]);
     dd0:	80 91 bd 00 	lds	r24, 0x00BD
     dd4:	90 91 be 00 	lds	r25, 0x00BE
     dd8:	88 0f       	add	r24, r24
     dda:	99 1f       	adc	r25, r25
     ddc:	fc 01       	movw	r30, r24
     dde:	eb 53       	subi	r30, 0x3B	; 59
     de0:	ff 4f       	sbci	r31, 0xFF	; 255
     de2:	80 81       	ld	r24, Z
     de4:	91 81       	ldd	r25, Z+1	; 0x01
}
     de6:	0f 90       	pop	r0
     de8:	0f 90       	pop	r0
     dea:	0f 90       	pop	r0
     dec:	0f 90       	pop	r0
     dee:	cf 91       	pop	r28
     df0:	df 91       	pop	r29
     df2:	08 95       	ret

00000df4 <__vector_5>:

SIGNAL(SIG_INPUT_CAPTURE1)
{
     df4:	1f 92       	push	r1
     df6:	0f 92       	push	r0
     df8:	0f b6       	in	r0, 0x3f	; 63
     dfa:	0f 92       	push	r0
     dfc:	11 24       	eor	r1, r1
     dfe:	2f 93       	push	r18
     e00:	3f 93       	push	r19
     e02:	4f 93       	push	r20
     e04:	5f 93       	push	r21
     e06:	8f 93       	push	r24
     e08:	9f 93       	push	r25
     e0a:	ef 93       	push	r30
     e0c:	ff 93       	push	r31
     e0e:	df 93       	push	r29
     e10:	cf 93       	push	r28
     e12:	cd b7       	in	r28, 0x3d	; 61
     e14:	de b7       	in	r29, 0x3e	; 62
  ICR1_value=ICR1; //чтение значения как можно раньше
     e16:	e6 e4       	ldi	r30, 0x46	; 70
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	91 81       	ldd	r25, Z+1	; 0x01
     e1e:	90 93 c0 00 	sts	0x00C0, r25
     e22:	80 93 bf 00 	sts	0x00BF, r24

  if((ICR1_value>ICR1Old)&&(CtOverLow==16))
     e26:	20 91 bf 00 	lds	r18, 0x00BF
     e2a:	30 91 c0 00 	lds	r19, 0x00C0
     e2e:	80 91 86 00 	lds	r24, 0x0086
     e32:	90 91 87 00 	lds	r25, 0x0087
     e36:	82 17       	cp	r24, r18
     e38:	93 07       	cpc	r25, r19
     e3a:	08 f0       	brcs	.+2      	; 0xe3e <__vector_5+0x4a>
     e3c:	43 c0       	rjmp	.+134    	; 0xec4 <__vector_5+0xd0>
     e3e:	80 91 7f 00 	lds	r24, 0x007F
     e42:	80 31       	cpi	r24, 0x10	; 16
     e44:	09 f0       	breq	.+2      	; 0xe48 <__vector_5+0x54>
     e46:	3e c0       	rjmp	.+124    	; 0xec4 <__vector_5+0xd0>
  {
    TDizTemp[CtTDiz]=ICR1_value-ICR1Old; //разница между двумя измерениями
     e48:	80 91 84 00 	lds	r24, 0x0084
     e4c:	48 2f       	mov	r20, r24
     e4e:	50 e0       	ldi	r21, 0x00	; 0
     e50:	20 91 bf 00 	lds	r18, 0x00BF
     e54:	30 91 c0 00 	lds	r19, 0x00C0
     e58:	80 91 86 00 	lds	r24, 0x0086
     e5c:	90 91 87 00 	lds	r25, 0x0087
     e60:	28 1b       	sub	r18, r24
     e62:	39 0b       	sbc	r19, r25
     e64:	ca 01       	movw	r24, r20
     e66:	88 0f       	add	r24, r24
     e68:	99 1f       	adc	r25, r25
     e6a:	fc 01       	movw	r30, r24
     e6c:	e4 57       	subi	r30, 0x74	; 116
     e6e:	ff 4f       	sbci	r31, 0xFF	; 255
     e70:	31 83       	std	Z+1, r19	; 0x01
     e72:	20 83       	st	Z, r18
    if(TDizTemp[CtTDiz]<100)
     e74:	80 91 84 00 	lds	r24, 0x0084
     e78:	88 2f       	mov	r24, r24
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	fc 01       	movw	r30, r24
     e82:	e4 57       	subi	r30, 0x74	; 116
     e84:	ff 4f       	sbci	r31, 0xFF	; 255
     e86:	80 81       	ld	r24, Z
     e88:	91 81       	ldd	r25, Z+1	; 0x01
     e8a:	84 36       	cpi	r24, 0x64	; 100
     e8c:	91 05       	cpc	r25, r1
     e8e:	68 f4       	brcc	.+26     	; 0xeaa <__vector_5+0xb6>
      TDizTemp[CtTDiz]=0xffff;           //FFFF - невозможное значение
     e90:	80 91 84 00 	lds	r24, 0x0084
     e94:	88 2f       	mov	r24, r24
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	88 0f       	add	r24, r24
     e9a:	99 1f       	adc	r25, r25
     e9c:	fc 01       	movw	r30, r24
     e9e:	e4 57       	subi	r30, 0x74	; 116
     ea0:	ff 4f       	sbci	r31, 0xFF	; 255
     ea2:	8f ef       	ldi	r24, 0xFF	; 255
     ea4:	9f ef       	ldi	r25, 0xFF	; 255
     ea6:	91 83       	std	Z+1, r25	; 0x01
     ea8:	80 83       	st	Z, r24

    if(CtTDiz) --CtTDiz;
     eaa:	80 91 84 00 	lds	r24, 0x0084
     eae:	88 23       	and	r24, r24
     eb0:	31 f0       	breq	.+12     	; 0xebe <__vector_5+0xca>
     eb2:	80 91 84 00 	lds	r24, 0x0084
     eb6:	81 50       	subi	r24, 0x01	; 1
     eb8:	80 93 84 00 	sts	0x0084, r24
     ebc:	03 c0       	rjmp	.+6      	; 0xec4 <__vector_5+0xd0>
    else        CtTDiz=15;               //16 выборок
     ebe:	8f e0       	ldi	r24, 0x0F	; 15
     ec0:	80 93 84 00 	sts	0x0084, r24
  }
  ICR1Old=ICR1_value;
     ec4:	80 91 bf 00 	lds	r24, 0x00BF
     ec8:	90 91 c0 00 	lds	r25, 0x00C0
     ecc:	90 93 87 00 	sts	0x0087, r25
     ed0:	80 93 86 00 	sts	0x0086, r24
  CtOverLow=16; //16 - переполнений до установки флага 0 оборотов.
     ed4:	80 e1       	ldi	r24, 0x10	; 16
     ed6:	80 93 7f 00 	sts	0x007F, r24
  NDiz_Overflow=0;
     eda:	10 92 72 00 	sts	0x0072, r1
}
     ede:	cf 91       	pop	r28
     ee0:	df 91       	pop	r29
     ee2:	ff 91       	pop	r31
     ee4:	ef 91       	pop	r30
     ee6:	9f 91       	pop	r25
     ee8:	8f 91       	pop	r24
     eea:	5f 91       	pop	r21
     eec:	4f 91       	pop	r20
     eee:	3f 91       	pop	r19
     ef0:	2f 91       	pop	r18
     ef2:	0f 90       	pop	r0
     ef4:	0f be       	out	0x3f, r0	; 63
     ef6:	0f 90       	pop	r0
     ef8:	1f 90       	pop	r1
     efa:	18 95       	reti

00000efc <__vector_8>:

SIGNAL(SIG_OVERFLOW1) //4.096 Mc = 65536*0.0625us - время переполнения таймера
{
     efc:	1f 92       	push	r1
     efe:	0f 92       	push	r0
     f00:	0f b6       	in	r0, 0x3f	; 63
     f02:	0f 92       	push	r0
     f04:	11 24       	eor	r1, r1
     f06:	8f 93       	push	r24
     f08:	9f 93       	push	r25
     f0a:	af 93       	push	r26
     f0c:	bf 93       	push	r27
     f0e:	ef 93       	push	r30
     f10:	ff 93       	push	r31
     f12:	df 93       	push	r29
     f14:	cf 93       	push	r28
     f16:	cd b7       	in	r28, 0x3d	; 61
     f18:	de b7       	in	r29, 0x3e	; 62
  if(CtOverLow) CtOverLow--;   //16 переполнений до установки флага переполнения NDiz_Overflow)
     f1a:	80 91 7f 00 	lds	r24, 0x007F
     f1e:	88 23       	and	r24, r24
     f20:	31 f0       	breq	.+12     	; 0xf2e <__vector_8+0x32>
     f22:	80 91 7f 00 	lds	r24, 0x007F
     f26:	81 50       	subi	r24, 0x01	; 1
     f28:	80 93 7f 00 	sts	0x007F, r24
     f2c:	03 c0       	rjmp	.+6      	; 0xf34 <__vector_8+0x38>
  else           NDiz_Overflow=1;
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	80 93 72 00 	sts	0x0072, r24

  if(timer_250 == 0)           //если прошло 250 мс без изменения индикации
     f34:	80 91 ba 00 	lds	r24, 0x00BA
     f38:	88 23       	and	r24, r24
     f3a:	b1 f4       	brne	.+44     	; 0xf68 <__vector_8+0x6c>
  {
    timer_250 = RELOAD;        //начать новый цикл с периодом 250 мс
     f3c:	8e e3       	ldi	r24, 0x3E	; 62
     f3e:	80 93 ba 00 	sts	0x00BA, r24
    PORTC ^= mask_leds_c;      //инвертировать сигнал, управляющий индикацией
     f42:	a5 e3       	ldi	r26, 0x35	; 53
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e5 e3       	ldi	r30, 0x35	; 53
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	90 81       	ld	r25, Z
     f4c:	80 91 b5 00 	lds	r24, 0x00B5
     f50:	89 27       	eor	r24, r25
     f52:	8c 93       	st	X, r24
    PORTD ^= mask_leds_d;
     f54:	a2 e3       	ldi	r26, 0x32	; 50
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	e2 e3       	ldi	r30, 0x32	; 50
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	90 81       	ld	r25, Z
     f5e:	80 91 74 00 	lds	r24, 0x0074
     f62:	89 27       	eor	r24, r25
     f64:	8c 93       	st	X, r24
     f66:	05 c0       	rjmp	.+10     	; 0xf72 <__vector_8+0x76>
  }
  else
  {
    timer_250--;
     f68:	80 91 ba 00 	lds	r24, 0x00BA
     f6c:	81 50       	subi	r24, 0x01	; 1
     f6e:	80 93 ba 00 	sts	0x00BA, r24
    //PORTC &= 0xe0;             //обнулить все биты управляющие индикацией мигпнием
    //PORTD &= 0xd7;
  }
// ----
  //сканирование кнопок
  if(Key_Inp == KEY_EMPTY)
     f72:	80 91 8a 00 	lds	r24, 0x008A
     f76:	88 23       	and	r24, r24
     f78:	09 f0       	breq	.+2      	; 0xf7c <__vector_8+0x80>
     f7a:	50 c0       	rjmp	.+160    	; 0x101c <__vector_8+0x120>
  {
    if((INKEY_PORT & KEY_MASK) != KEY_MASK)
     f7c:	e6 e3       	ldi	r30, 0x36	; 54
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	88 2f       	mov	r24, r24
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	8c 70       	andi	r24, 0x0C	; 12
     f88:	90 70       	andi	r25, 0x00	; 0
     f8a:	8c 30       	cpi	r24, 0x0C	; 12
     f8c:	91 05       	cpc	r25, r1
     f8e:	31 f0       	breq	.+12     	; 0xf9c <__vector_8+0xa0>
      Key_new = INKEY_PORT & KEY_MASK;
     f90:	e6 e3       	ldi	r30, 0x36	; 54
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	8c 70       	andi	r24, 0x0C	; 12
     f98:	80 93 ae 00 	sts	0x00AE, r24
    if(Key_new != 0xff)
     f9c:	80 91 ae 00 	lds	r24, 0x00AE
     fa0:	8f 3f       	cpi	r24, 0xFF	; 255
     fa2:	21 f1       	breq	.+72     	; 0xfec <__vector_8+0xf0>
    {
      if(Key_new == Key_old)
     fa4:	90 91 ae 00 	lds	r25, 0x00AE
     fa8:	80 91 ac 00 	lds	r24, 0x00AC
     fac:	98 17       	cp	r25, r24
     fae:	71 f4       	brne	.+28     	; 0xfcc <__vector_8+0xd0>
      {
        if(Count_on > KSTATE) Ff_key = 1;
     fb0:	80 91 b6 00 	lds	r24, 0x00B6
     fb4:	86 30       	cpi	r24, 0x06	; 6
     fb6:	20 f0       	brcs	.+8      	; 0xfc0 <__vector_8+0xc4>
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	80 93 88 00 	sts	0x0088, r24
     fbe:	12 c0       	rjmp	.+36     	; 0xfe4 <__vector_8+0xe8>
        else Count_on++;
     fc0:	80 91 b6 00 	lds	r24, 0x00B6
     fc4:	8f 5f       	subi	r24, 0xFF	; 255
     fc6:	80 93 b6 00 	sts	0x00B6, r24
     fca:	0c c0       	rjmp	.+24     	; 0xfe4 <__vector_8+0xe8>
      }
      else
      {
        Key_old = Key_new;
     fcc:	80 91 ae 00 	lds	r24, 0x00AE
     fd0:	80 93 ac 00 	sts	0x00AC, r24
        Count_on = Count_off = 0;
     fd4:	10 92 75 00 	sts	0x0075, r1
     fd8:	80 91 75 00 	lds	r24, 0x0075
     fdc:	80 93 b6 00 	sts	0x00B6, r24
        Ff_key = 0;
     fe0:	10 92 88 00 	sts	0x0088, r1
      }
      Key_new = 0xff;
     fe4:	8f ef       	ldi	r24, 0xFF	; 255
     fe6:	80 93 ae 00 	sts	0x00AE, r24
     fea:	18 c0       	rjmp	.+48     	; 0x101c <__vector_8+0x120>
    }
    else
    {
      if(Ff_key == 1)
     fec:	80 91 88 00 	lds	r24, 0x0088
     ff0:	81 30       	cpi	r24, 0x01	; 1
     ff2:	89 f4       	brne	.+34     	; 0x1016 <__vector_8+0x11a>
      {
        if(Count_off > KSTATE)
     ff4:	80 91 75 00 	lds	r24, 0x0075
     ff8:	86 30       	cpi	r24, 0x06	; 6
     ffa:	38 f0       	brcs	.+14     	; 0x100a <__vector_8+0x10e>
        {
          Ff_key = 0;
     ffc:	10 92 88 00 	sts	0x0088, r1
          Key_Inp = Key_old;
    1000:	80 91 ac 00 	lds	r24, 0x00AC
    1004:	80 93 8a 00 	sts	0x008A, r24
    1008:	09 c0       	rjmp	.+18     	; 0x101c <__vector_8+0x120>
        }
        else Count_off++;
    100a:	80 91 75 00 	lds	r24, 0x0075
    100e:	8f 5f       	subi	r24, 0xFF	; 255
    1010:	80 93 75 00 	sts	0x0075, r24
    1014:	03 c0       	rjmp	.+6      	; 0x101c <__vector_8+0x120>
      }
      else Key_old = 0x55;
    1016:	85 e5       	ldi	r24, 0x55	; 85
    1018:	80 93 ac 00 	sts	0x00AC, r24
    }
  }
}
    101c:	cf 91       	pop	r28
    101e:	df 91       	pop	r29
    1020:	ff 91       	pop	r31
    1022:	ef 91       	pop	r30
    1024:	bf 91       	pop	r27
    1026:	af 91       	pop	r26
    1028:	9f 91       	pop	r25
    102a:	8f 91       	pop	r24
    102c:	0f 90       	pop	r0
    102e:	0f be       	out	0x3f, r0	; 63
    1030:	0f 90       	pop	r0
    1032:	1f 90       	pop	r1
    1034:	18 95       	reti

00001036 <__vector_14>:

SIGNAL(SIG_ADC)
{
    1036:	1f 92       	push	r1
    1038:	0f 92       	push	r0
    103a:	0f b6       	in	r0, 0x3f	; 63
    103c:	0f 92       	push	r0
    103e:	11 24       	eor	r1, r1
    1040:	2f 93       	push	r18
    1042:	3f 93       	push	r19
    1044:	4f 93       	push	r20
    1046:	5f 93       	push	r21
    1048:	8f 93       	push	r24
    104a:	9f 93       	push	r25
    104c:	af 93       	push	r26
    104e:	bf 93       	push	r27
    1050:	ef 93       	push	r30
    1052:	ff 93       	push	r31
    1054:	df 93       	push	r29
    1056:	cf 93       	push	r28
    1058:	00 d0       	rcall	.+0      	; 0x105a <__vector_14+0x24>
    105a:	cd b7       	in	r28, 0x3d	; 61
    105c:	de b7       	in	r29, 0x3e	; 62
  unsigned int RegInt0;
  RegInt0=ADC;
    105e:	e4 e2       	ldi	r30, 0x24	; 36
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	91 81       	ldd	r25, Z+1	; 0x01
    1066:	9a 83       	std	Y+2, r25	; 0x02
    1068:	89 83       	std	Y+1, r24	; 0x01

  if(CtAd)
    106a:	80 91 d5 00 	lds	r24, 0x00D5
    106e:	88 23       	and	r24, r24
    1070:	b9 f0       	breq	.+46     	; 0x10a0 <__vector_14+0x6a>
  {
    --CtAd; //64 измерения
    1072:	80 91 d5 00 	lds	r24, 0x00D5
    1076:	81 50       	subi	r24, 0x01	; 1
    1078:	80 93 d5 00 	sts	0x00D5, r24
    if(CtAd<=CtAd0)
    107c:	80 91 d5 00 	lds	r24, 0x00D5
    1080:	80 34       	cpi	r24, 0x40	; 64
    1082:	08 f0       	brcs	.+2      	; 0x1086 <__vector_14+0x50>
    1084:	4e c0       	rjmp	.+156    	; 0x1122 <__vector_14+0xec>
    {
      AdTemp +=RegInt0;
    1086:	80 91 77 00 	lds	r24, 0x0077
    108a:	90 91 78 00 	lds	r25, 0x0078
    108e:	29 81       	ldd	r18, Y+1	; 0x01
    1090:	3a 81       	ldd	r19, Y+2	; 0x02
    1092:	82 0f       	add	r24, r18
    1094:	93 1f       	adc	r25, r19
    1096:	90 93 78 00 	sts	0x0078, r25
    109a:	80 93 77 00 	sts	0x0077, r24
    109e:	41 c0       	rjmp	.+130    	; 0x1122 <__vector_14+0xec>
    }
  }
  else
  {
    AdResult[NumberAd]=AdTemp;
    10a0:	80 91 80 00 	lds	r24, 0x0080
    10a4:	88 2f       	mov	r24, r24
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	20 91 77 00 	lds	r18, 0x0077
    10ac:	30 91 78 00 	lds	r19, 0x0078
    10b0:	88 0f       	add	r24, r24
    10b2:	99 1f       	adc	r25, r25
    10b4:	fc 01       	movw	r30, r24
    10b6:	ea 51       	subi	r30, 0x1A	; 26
    10b8:	ff 4f       	sbci	r31, 0xFF	; 255
    10ba:	31 83       	std	Z+1, r19	; 0x01
    10bc:	20 83       	st	Z, r18
    AdResult[NumberAd]>>=6;
    10be:	80 91 80 00 	lds	r24, 0x0080
    10c2:	48 2f       	mov	r20, r24
    10c4:	50 e0       	ldi	r21, 0x00	; 0
    10c6:	80 91 80 00 	lds	r24, 0x0080
    10ca:	88 2f       	mov	r24, r24
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	88 0f       	add	r24, r24
    10d0:	99 1f       	adc	r25, r25
    10d2:	fc 01       	movw	r30, r24
    10d4:	ea 51       	subi	r30, 0x1A	; 26
    10d6:	ff 4f       	sbci	r31, 0xFF	; 255
    10d8:	80 81       	ld	r24, Z
    10da:	91 81       	ldd	r25, Z+1	; 0x01
    10dc:	9c 01       	movw	r18, r24
    10de:	00 24       	eor	r0, r0
    10e0:	22 0f       	add	r18, r18
    10e2:	33 1f       	adc	r19, r19
    10e4:	00 1c       	adc	r0, r0
    10e6:	22 0f       	add	r18, r18
    10e8:	33 1f       	adc	r19, r19
    10ea:	00 1c       	adc	r0, r0
    10ec:	23 2f       	mov	r18, r19
    10ee:	30 2d       	mov	r19, r0
    10f0:	ca 01       	movw	r24, r20
    10f2:	88 0f       	add	r24, r24
    10f4:	99 1f       	adc	r25, r25
    10f6:	fc 01       	movw	r30, r24
    10f8:	ea 51       	subi	r30, 0x1A	; 26
    10fa:	ff 4f       	sbci	r31, 0xFF	; 255
    10fc:	31 83       	std	Z+1, r19	; 0x01
    10fe:	20 83       	st	Z, r18
    AdTemp=0;
    1100:	10 92 78 00 	sts	0x0078, r1
    1104:	10 92 77 00 	sts	0x0077, r1
    CtAd=CtAd0+2;
    1108:	81 e4       	ldi	r24, 0x41	; 65
    110a:	80 93 d5 00 	sts	0x00D5, r24
    //if(NumberAd==11)
    NumberAd=NumberAdNew[NumberAd];
    110e:	80 91 80 00 	lds	r24, 0x0080
    1112:	88 2f       	mov	r24, r24
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	fc 01       	movw	r30, r24
    1118:	e0 5a       	subi	r30, 0xA0	; 160
    111a:	ff 4f       	sbci	r31, 0xFF	; 255
    111c:	80 81       	ld	r24, Z
    111e:	80 93 80 00 	sts	0x0080, r24
  }

  RegInt0=ADMUX;
    1122:	e7 e2       	ldi	r30, 0x27	; 39
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	88 2f       	mov	r24, r24
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	9a 83       	std	Y+2, r25	; 0x02
    112e:	89 83       	std	Y+1, r24	; 0x01
  RegInt0 &=0xe0;     //обнуление MUX4..0
    1130:	89 81       	ldd	r24, Y+1	; 0x01
    1132:	9a 81       	ldd	r25, Y+2	; 0x02
    1134:	80 7e       	andi	r24, 0xE0	; 224
    1136:	90 70       	andi	r25, 0x00	; 0
    1138:	9a 83       	std	Y+2, r25	; 0x02
    113a:	89 83       	std	Y+1, r24	; 0x01
  RegInt0 |=NumberAd; //выставление нового адреса канала ацп
    113c:	80 91 80 00 	lds	r24, 0x0080
    1140:	28 2f       	mov	r18, r24
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	89 81       	ldd	r24, Y+1	; 0x01
    1146:	9a 81       	ldd	r25, Y+2	; 0x02
    1148:	82 2b       	or	r24, r18
    114a:	93 2b       	or	r25, r19
    114c:	9a 83       	std	Y+2, r25	; 0x02
    114e:	89 83       	std	Y+1, r24	; 0x01
  ADMUX=RegInt0;
    1150:	e7 e2       	ldi	r30, 0x27	; 39
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	89 81       	ldd	r24, Y+1	; 0x01
    1156:	80 83       	st	Z, r24

  ADCSRA |=(1<<ADSC); //start conversion
    1158:	a6 e2       	ldi	r26, 0x26	; 38
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	e6 e2       	ldi	r30, 0x26	; 38
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	80 64       	ori	r24, 0x40	; 64
    1164:	8c 93       	st	X, r24
}
    1166:	0f 90       	pop	r0
    1168:	0f 90       	pop	r0
    116a:	cf 91       	pop	r28
    116c:	df 91       	pop	r29
    116e:	ff 91       	pop	r31
    1170:	ef 91       	pop	r30
    1172:	bf 91       	pop	r27
    1174:	af 91       	pop	r26
    1176:	9f 91       	pop	r25
    1178:	8f 91       	pop	r24
    117a:	5f 91       	pop	r21
    117c:	4f 91       	pop	r20
    117e:	3f 91       	pop	r19
    1180:	2f 91       	pop	r18
    1182:	0f 90       	pop	r0
    1184:	0f be       	out	0x3f, r0	; 63
    1186:	0f 90       	pop	r0
    1188:	1f 90       	pop	r1
    118a:	18 95       	reti

0000118c <__udivmodsi4>:
    118c:	a1 e2       	ldi	r26, 0x21	; 33
    118e:	1a 2e       	mov	r1, r26
    1190:	aa 1b       	sub	r26, r26
    1192:	bb 1b       	sub	r27, r27
    1194:	fd 01       	movw	r30, r26
    1196:	0d c0       	rjmp	.+26     	; 0x11b2 <__udivmodsi4_ep>

00001198 <__udivmodsi4_loop>:
    1198:	aa 1f       	adc	r26, r26
    119a:	bb 1f       	adc	r27, r27
    119c:	ee 1f       	adc	r30, r30
    119e:	ff 1f       	adc	r31, r31
    11a0:	a2 17       	cp	r26, r18
    11a2:	b3 07       	cpc	r27, r19
    11a4:	e4 07       	cpc	r30, r20
    11a6:	f5 07       	cpc	r31, r21
    11a8:	20 f0       	brcs	.+8      	; 0x11b2 <__udivmodsi4_ep>
    11aa:	a2 1b       	sub	r26, r18
    11ac:	b3 0b       	sbc	r27, r19
    11ae:	e4 0b       	sbc	r30, r20
    11b0:	f5 0b       	sbc	r31, r21

000011b2 <__udivmodsi4_ep>:
    11b2:	66 1f       	adc	r22, r22
    11b4:	77 1f       	adc	r23, r23
    11b6:	88 1f       	adc	r24, r24
    11b8:	99 1f       	adc	r25, r25
    11ba:	1a 94       	dec	r1
    11bc:	69 f7       	brne	.-38     	; 0x1198 <__udivmodsi4_loop>
    11be:	60 95       	com	r22
    11c0:	70 95       	com	r23
    11c2:	80 95       	com	r24
    11c4:	90 95       	com	r25
    11c6:	9b 01       	movw	r18, r22
    11c8:	ac 01       	movw	r20, r24
    11ca:	bd 01       	movw	r22, r26
    11cc:	cf 01       	movw	r24, r30
    11ce:	08 95       	ret

000011d0 <__eerd_word_m8535>:
    11d0:	a8 e1       	ldi	r26, 0x18	; 24
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	42 e0       	ldi	r20, 0x02	; 2
    11d6:	50 e0       	ldi	r21, 0x00	; 0
    11d8:	05 c0       	rjmp	.+10     	; 0x11e4 <__eerd_blraw_m8535>

000011da <__eewr_word_m8535>:
    11da:	12 d0       	rcall	.+36     	; 0x1200 <__eewr_byte_m8535>
    11dc:	27 2f       	mov	r18, r23
    11de:	11 c0       	rjmp	.+34     	; 0x1202 <__eewr_r18_m8535>

000011e0 <__eerd_block_m8535>:
    11e0:	dc 01       	movw	r26, r24
    11e2:	cb 01       	movw	r24, r22

000011e4 <__eerd_blraw_m8535>:
    11e4:	fc 01       	movw	r30, r24
    11e6:	e1 99       	sbic	0x1c, 1	; 28
    11e8:	fe cf       	rjmp	.-4      	; 0x11e6 <__eerd_blraw_m8535+0x2>
    11ea:	06 c0       	rjmp	.+12     	; 0x11f8 <__eerd_blraw_m8535+0x14>
    11ec:	ff bb       	out	0x1f, r31	; 31
    11ee:	ee bb       	out	0x1e, r30	; 30
    11f0:	e0 9a       	sbi	0x1c, 0	; 28
    11f2:	31 96       	adiw	r30, 0x01	; 1
    11f4:	0d b2       	in	r0, 0x1d	; 29
    11f6:	0d 92       	st	X+, r0
    11f8:	41 50       	subi	r20, 0x01	; 1
    11fa:	50 40       	sbci	r21, 0x00	; 0
    11fc:	b8 f7       	brcc	.-18     	; 0x11ec <__eerd_blraw_m8535+0x8>
    11fe:	08 95       	ret

00001200 <__eewr_byte_m8535>:
    1200:	26 2f       	mov	r18, r22

00001202 <__eewr_r18_m8535>:
    1202:	e1 99       	sbic	0x1c, 1	; 28
    1204:	fe cf       	rjmp	.-4      	; 0x1202 <__eewr_r18_m8535>
    1206:	9f bb       	out	0x1f, r25	; 31
    1208:	8e bb       	out	0x1e, r24	; 30
    120a:	2d bb       	out	0x1d, r18	; 29
    120c:	0f b6       	in	r0, 0x3f	; 63
    120e:	f8 94       	cli
    1210:	e2 9a       	sbi	0x1c, 2	; 28
    1212:	e1 9a       	sbi	0x1c, 1	; 28
    1214:	0f be       	out	0x3f, r0	; 63
    1216:	01 96       	adiw	r24, 0x01	; 1
    1218:	08 95       	ret

0000121a <_exit>:
    121a:	f8 94       	cli

0000121c <__stop_program>:
    121c:	ff cf       	rjmp	.-2      	; 0x121c <__stop_program>
