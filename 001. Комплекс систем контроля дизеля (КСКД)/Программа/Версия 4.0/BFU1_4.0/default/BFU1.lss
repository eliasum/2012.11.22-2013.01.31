
BFU1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001076  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00001076  0000112a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000008e  00800072  00800072  0000113c  2**0
                  ALLOC
  3 .eeprom       0000000e  00810000  00810000  0000113c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000020  00000000  00000000  0000114a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000002f5  00000000  00000000  0000116a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000057f  00000000  00000000  0000145f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000144  00000000  00000000  000019de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006fd  00000000  00000000  00001b22  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  00002220  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000281  00000000  00000000  000022b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
       2:	2e c0       	rjmp	.+92     	; 0x60 <__bad_interrupt>
       4:	2d c0       	rjmp	.+90     	; 0x60 <__bad_interrupt>
       6:	2c c0       	rjmp	.+88     	; 0x60 <__bad_interrupt>
       8:	2b c0       	rjmp	.+86     	; 0x60 <__bad_interrupt>
       a:	1b c6       	rjmp	.+3126   	; 0xc42 <__vector_5>
       c:	29 c0       	rjmp	.+82     	; 0x60 <__bad_interrupt>
       e:	28 c0       	rjmp	.+80     	; 0x60 <__bad_interrupt>
      10:	9c c6       	rjmp	.+3384   	; 0xd4a <__vector_8>
      12:	26 c0       	rjmp	.+76     	; 0x60 <__bad_interrupt>
      14:	25 c0       	rjmp	.+74     	; 0x60 <__bad_interrupt>
      16:	24 c0       	rjmp	.+72     	; 0x60 <__bad_interrupt>
      18:	23 c0       	rjmp	.+70     	; 0x60 <__bad_interrupt>
      1a:	22 c0       	rjmp	.+68     	; 0x60 <__bad_interrupt>
      1c:	33 c7       	rjmp	.+3686   	; 0xe84 <__vector_14>
      1e:	20 c0       	rjmp	.+64     	; 0x60 <__bad_interrupt>
      20:	1f c0       	rjmp	.+62     	; 0x60 <__bad_interrupt>
      22:	1e c0       	rjmp	.+60     	; 0x60 <__bad_interrupt>
      24:	1d c0       	rjmp	.+58     	; 0x60 <__bad_interrupt>
      26:	1c c0       	rjmp	.+56     	; 0x60 <__bad_interrupt>
      28:	1b c0       	rjmp	.+54     	; 0x60 <__bad_interrupt>

0000002a <__ctors_end>:
      2a:	11 24       	eor	r1, r1
      2c:	1f be       	out	0x3f, r1	; 63
      2e:	cf e5       	ldi	r28, 0x5F	; 95
      30:	d2 e0       	ldi	r29, 0x02	; 2
      32:	de bf       	out	0x3e, r29	; 62
      34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_copy_data>:
      36:	10 e0       	ldi	r17, 0x00	; 0
      38:	a0 e6       	ldi	r26, 0x60	; 96
      3a:	b0 e0       	ldi	r27, 0x00	; 0
      3c:	e6 e7       	ldi	r30, 0x76	; 118
      3e:	f0 e1       	ldi	r31, 0x10	; 16
      40:	02 c0       	rjmp	.+4      	; 0x46 <.do_copy_data_start>

00000042 <.do_copy_data_loop>:
      42:	05 90       	lpm	r0, Z+
      44:	0d 92       	st	X+, r0

00000046 <.do_copy_data_start>:
      46:	a2 37       	cpi	r26, 0x72	; 114
      48:	b1 07       	cpc	r27, r17
      4a:	d9 f7       	brne	.-10     	; 0x42 <.do_copy_data_loop>

0000004c <__do_clear_bss>:
      4c:	11 e0       	ldi	r17, 0x01	; 1
      4e:	a2 e7       	ldi	r26, 0x72	; 114
      50:	b0 e0       	ldi	r27, 0x00	; 0
      52:	01 c0       	rjmp	.+2      	; 0x56 <.do_clear_bss_start>

00000054 <.do_clear_bss_loop>:
      54:	1d 92       	st	X+, r1

00000056 <.do_clear_bss_start>:
      56:	a0 30       	cpi	r26, 0x00	; 0
      58:	b1 07       	cpc	r27, r17
      5a:	e1 f7       	brne	.-8      	; 0x54 <.do_clear_bss_loop>
      5c:	02 d0       	rcall	.+4      	; 0x62 <main>
      5e:	09 c8       	rjmp	.-4078   	; 0xfffff072 <__eeprom_end+0xff7ef064>

00000060 <__bad_interrupt>:
      60:	cf cf       	rjmp	.-98     	; 0x0 <__vectors>

00000062 <main>:
#include "main.h"
/*==========================================================================================================================*/
/*                                                  Главная функция программы                                               */
/*==========================================================================================================================*/
int main(void)
{
      62:	0f 93       	push	r16
      64:	1f 93       	push	r17
      66:	df 93       	push	r29
      68:	cf 93       	push	r28
      6a:	00 d0       	rcall	.+0      	; 0x6c <main+0xa>
      6c:	00 d0       	rcall	.+0      	; 0x6e <main+0xc>
      6e:	cd b7       	in	r28, 0x3d	; 61
      70:	de b7       	in	r29, 0x3e	; 62
  DDRA  = 0;           //ALL inputs
      72:	ea e3       	ldi	r30, 0x3A	; 58
      74:	f0 e0       	ldi	r31, 0x00	; 0
      76:	10 82       	st	Z, r1
  PORTA = 0;
      78:	eb e3       	ldi	r30, 0x3B	; 59
      7a:	f0 e0       	ldi	r31, 0x00	; 0
      7c:	10 82       	st	Z, r1

  DDRB  = 0xe3;        //SAVE, TOGGLE и MODE - входы
      7e:	e7 e3       	ldi	r30, 0x37	; 55
      80:	f0 e0       	ldi	r31, 0x00	; 0
      82:	83 ee       	ldi	r24, 0xE3	; 227
      84:	80 83       	st	Z, r24
  PORTB = 0xff;
      86:	e8 e3       	ldi	r30, 0x38	; 56
      88:	f0 e0       	ldi	r31, 0x00	; 0
      8a:	8f ef       	ldi	r24, 0xFF	; 255
      8c:	80 83       	st	Z, r24

  DDRC  = 0xff;
      8e:	e4 e3       	ldi	r30, 0x34	; 52
      90:	f0 e0       	ldi	r31, 0x00	; 0
      92:	8f ef       	ldi	r24, 0xFF	; 255
      94:	80 83       	st	Z, r24
  PORTC = 0xff;
      96:	e5 e3       	ldi	r30, 0x35	; 53
      98:	f0 e0       	ldi	r31, 0x00	; 0
      9a:	8f ef       	ldi	r24, 0xFF	; 255
      9c:	80 83       	st	Z, r24

  DDRD  = 0xbf;        //PD6 - Input
      9e:	e1 e3       	ldi	r30, 0x31	; 49
      a0:	f0 e0       	ldi	r31, 0x00	; 0
      a2:	8f eb       	ldi	r24, 0xBF	; 191
      a4:	80 83       	st	Z, r24
  PORTD = 0xff;        //transmit=off
      a6:	e2 e3       	ldi	r30, 0x32	; 50
      a8:	f0 e0       	ldi	r31, 0x00	; 0
      aa:	8f ef       	ldi	r24, 0xFF	; 255
      ac:	80 83       	st	Z, r24

  _WDR();
      ae:	a8 95       	wdr

  InitAd();
      b0:	f4 d3       	rcall	.+2024   	; 0x89a <InitAd>
  ADCSRA |= (1<<ADIE); //enable AD interrupt
      b2:	a6 e2       	ldi	r26, 0x26	; 38
      b4:	b0 e0       	ldi	r27, 0x00	; 0
      b6:	e6 e2       	ldi	r30, 0x26	; 38
      b8:	f0 e0       	ldi	r31, 0x00	; 0
      ba:	80 81       	ld	r24, Z
      bc:	88 60       	ori	r24, 0x08	; 8
      be:	8c 93       	st	X, r24
  sei();               //enable global interrupt
      c0:	78 94       	sei
 
  SPCR = 0;            //disable SPI
      c2:	ed e2       	ldi	r30, 0x2D	; 45
      c4:	f0 e0       	ldi	r31, 0x00	; 0
      c6:	10 82       	st	Z, r1
  SPSR = 0;            
      c8:	ee e2       	ldi	r30, 0x2E	; 46
      ca:	f0 e0       	ldi	r31, 0x00	; 0
      cc:	10 82       	st	Z, r1

  TIMSK = TIMSK|0x20;  //разрешение прерывания по событию «Захват» таймера/счетчика T1
      ce:	a9 e5       	ldi	r26, 0x59	; 89
      d0:	b0 e0       	ldi	r27, 0x00	; 0
      d2:	e9 e5       	ldi	r30, 0x59	; 89
      d4:	f0 e0       	ldi	r31, 0x00	; 0
      d6:	80 81       	ld	r24, Z
      d8:	80 62       	ori	r24, 0x20	; 32
      da:	8c 93       	st	X, r24
  TCCR1B = 0xc1;       //ICNC1 = 1 схема подавления помех включена и захват осуществляется только в случае 4-х одинаковых выборок, соответствующих активному фронту сигнала
      dc:	ee e4       	ldi	r30, 0x4E	; 78
      de:	f0 e0       	ldi	r31, 0x00	; 0
      e0:	81 ec       	ldi	r24, 0xC1	; 193
      e2:	80 83       	st	Z, r24
                       //ICES1 = 1 cохранение счетного регистра в регистре захвата осуществляется по нарастающему фронту сигнала
                       //CS10  = 1 нет предделения тактовой частоты контроллера для тактирования Т1, 0.0625мкс
  TIMSK = TIMSK|0x4;   //разрешение прерывания по переполнению таймера/счетчика T1
      e4:	a9 e5       	ldi	r26, 0x59	; 89
      e6:	b0 e0       	ldi	r27, 0x00	; 0
      e8:	e9 e5       	ldi	r30, 0x59	; 89
      ea:	f0 e0       	ldi	r31, 0x00	; 0
      ec:	80 81       	ld	r24, Z
      ee:	84 60       	ori	r24, 0x04	; 4
      f0:	8c 93       	st	X, r24

  Dt4_8 = Dt4_30 = Dt4_37 = Dt5_37 = Dt5_95 = Dt5_118 = Dt6_115 = Dd1_1 = Dd1_4 = Nd_500 = Nd_1450 = Nd_1750 = 0;
      f2:	10 92 85 00 	sts	0x0085, r1
      f6:	80 91 85 00 	lds	r24, 0x0085
      fa:	80 93 bc 00 	sts	0x00BC, r24
      fe:	80 91 bc 00 	lds	r24, 0x00BC
     102:	80 93 ff 00 	sts	0x00FF, r24
     106:	80 91 ff 00 	lds	r24, 0x00FF
     10a:	80 93 89 00 	sts	0x0089, r24
     10e:	80 91 89 00 	lds	r24, 0x0089
     112:	80 93 7d 00 	sts	0x007D, r24
     116:	80 91 7d 00 	lds	r24, 0x007D
     11a:	80 93 76 00 	sts	0x0076, r24
     11e:	80 91 76 00 	lds	r24, 0x0076
     122:	80 93 d8 00 	sts	0x00D8, r24
     126:	80 91 d8 00 	lds	r24, 0x00D8
     12a:	80 93 b1 00 	sts	0x00B1, r24
     12e:	80 91 b1 00 	lds	r24, 0x00B1
     132:	80 93 b4 00 	sts	0x00B4, r24
     136:	80 91 b4 00 	lds	r24, 0x00B4
     13a:	80 93 81 00 	sts	0x0081, r24
     13e:	80 91 81 00 	lds	r24, 0x0081
     142:	80 93 8b 00 	sts	0x008B, r24
     146:	80 91 8b 00 	lds	r24, 0x008B
     14a:	80 93 d7 00 	sts	0x00D7, r24
  array[9] = 0;
     14e:	10 92 d9 00 	sts	0x00D9, r1
     152:	10 92 d8 00 	sts	0x00D8, r1
  from_ee[9] = 0;
     156:	10 92 ec 00 	sts	0x00EC, r1
     15a:	10 92 eb 00 	sts	0x00EB, r1

  NDiz=0;
     15e:	10 92 b8 00 	sts	0x00B8, r1
     162:	10 92 b7 00 	sts	0x00B7, r1
  CtTDiz=15;
     166:	8f e0       	ldi	r24, 0x0F	; 15
     168:	80 93 84 00 	sts	0x0084, r24
  InvCounter=0;
     16c:	10 92 7e 00 	sts	0x007E, r1
  RegWait=30000;       //старое значение - 300 //Вернуть!!
     170:	80 e3       	ldi	r24, 0x30	; 48
     172:	95 e7       	ldi	r25, 0x75	; 117
     174:	90 93 b0 00 	sts	0x00B0, r25
     178:	80 93 af 00 	sts	0x00AF, r24
     17c:	01 c0       	rjmp	.+2      	; 0x180 <main+0x11e>
  while (RegWait--)

  _WDR();
     17e:	a8 95       	wdr

  NDiz=0;
  CtTDiz=15;
  InvCounter=0;
  RegWait=30000;       //старое значение - 300 //Вернуть!!
  while (RegWait--)
     180:	80 91 af 00 	lds	r24, 0x00AF
     184:	90 91 b0 00 	lds	r25, 0x00B0
     188:	9c 83       	std	Y+4, r25	; 0x04
     18a:	8b 83       	std	Y+3, r24	; 0x03
     18c:	1a 82       	std	Y+2, r1	; 0x02
     18e:	8b 81       	ldd	r24, Y+3	; 0x03
     190:	9c 81       	ldd	r25, Y+4	; 0x04
     192:	00 97       	sbiw	r24, 0x00	; 0
     194:	11 f0       	breq	.+4      	; 0x19a <main+0x138>
     196:	91 e0       	ldi	r25, 0x01	; 1
     198:	9a 83       	std	Y+2, r25	; 0x02
     19a:	8b 81       	ldd	r24, Y+3	; 0x03
     19c:	9c 81       	ldd	r25, Y+4	; 0x04
     19e:	01 97       	sbiw	r24, 0x01	; 1
     1a0:	90 93 b0 00 	sts	0x00B0, r25
     1a4:	80 93 af 00 	sts	0x00AF, r24
     1a8:	2a 81       	ldd	r18, Y+2	; 0x02
     1aa:	22 23       	and	r18, r18
     1ac:	41 f7       	brne	.-48     	; 0x17e <main+0x11c>

  _WDR();

  mask_leds_c = 0x00;                    //PORT C.X в обычном режиме работы светодиоды не "моргают"
     1ae:	10 92 b5 00 	sts	0x00B5, r1
  mask_leds_d = 0x00;                    //PORT D.X
     1b2:	10 92 74 00 	sts	0x0074, r1
  
  if (PINB & (1<<MODE))   mode = 1;      //выбор режима работы
     1b6:	e6 e3       	ldi	r30, 0x36	; 54
     1b8:	f0 e0       	ldi	r31, 0x00	; 0
     1ba:	80 81       	ld	r24, Z
     1bc:	88 2f       	mov	r24, r24
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	80 71       	andi	r24, 0x10	; 16
     1c2:	90 70       	andi	r25, 0x00	; 0
     1c4:	00 97       	sbiw	r24, 0x00	; 0
     1c6:	21 f0       	breq	.+8      	; 0x1d0 <main+0x16e>
     1c8:	81 e0       	ldi	r24, 0x01	; 1
     1ca:	80 93 ad 00 	sts	0x00AD, r24
     1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <main+0x172>
  else                    mode = 0;
     1d0:	10 92 ad 00 	sts	0x00AD, r1

  if(!mode)                              //работа в режиме калибровки
     1d4:	80 91 ad 00 	lds	r24, 0x00AD
     1d8:	88 23       	and	r24, r24
     1da:	09 f0       	breq	.+2      	; 0x1de <main+0x17c>
     1dc:	ba c0       	rjmp	.+372    	; 0x352 <__stack+0xf3>
  {
    //инициализация переменных функции калибровки:
    Key_Inp = KEY_EMPTY;                 //кнопка не нажата
     1de:	10 92 8a 00 	sts	0x008A, r1
    timer_250 = RELOAD;                  //начало нового цикла индикации длительностью 250 мс
     1e2:	8e e3       	ldi	r24, 0x3E	; 62
     1e4:	80 93 ba 00 	sts	0x00BA, r24
    count_channel = 0;                   //счёт начинается с 0-го канала
     1e8:	10 92 bf 00 	sts	0x00BF, r1
     1ec:	10 92 be 00 	sts	0x00BE, r1
    const_write_ok = 0;                  //записи констант не было
     1f0:	10 92 79 00 	sts	0x0079, r1
    mask_leds_c = 0x00;                  //PORT C.X при входе в режим программирования "моргает" 0-й канал
     1f4:	10 92 b5 00 	sts	0x00B5, r1
    mask_leds_d = 0x20;                  //PORT D.5
     1f8:	80 e2       	ldi	r24, 0x20	; 32
     1fa:	80 93 74 00 	sts	0x0074, r24

    while (1)
    {
      _WDR();
     1fe:	a8 95       	wdr

      AccountADC();
     200:	1e d4       	rcall	.+2108   	; 0xa3e <AccountADC>

      //Dt4=444; Dt5=555; Dt6=666; Key_Inp = KEY_BS;


      //алгоритм переключения индикации без записи в EEPROM
      if(Key_Inp == KEY_BT)                                                        //если нажата кнопка "переключить канал"            
     202:	80 91 8a 00 	lds	r24, 0x008A
     206:	84 30       	cpi	r24, 0x04	; 4
     208:	b9 f4       	brne	.+46     	; 0x238 <main+0x1d6>
      {
        switch_channel(count_channel);                                             //переключение индикации и запись оцифрованного значения датчика в ОЗУ
     20a:	80 91 be 00 	lds	r24, 0x00BE
     20e:	90 91 bf 00 	lds	r25, 0x00BF
     212:	3c d4       	rcall	.+2168   	; 0xa8c <switch_channel>

        if((count_channel >= 0)&&(count_channel <= 6))
     214:	80 91 be 00 	lds	r24, 0x00BE
     218:	90 91 bf 00 	lds	r25, 0x00BF
     21c:	87 30       	cpi	r24, 0x07	; 7
     21e:	91 05       	cpc	r25, r1
     220:	48 f4       	brcc	.+18     	; 0x234 <main+0x1d2>
		  count_channel++;                                                         //переключение на следующий канал
     222:	80 91 be 00 	lds	r24, 0x00BE
     226:	90 91 bf 00 	lds	r25, 0x00BF
     22a:	01 96       	adiw	r24, 0x01	; 1
     22c:	90 93 bf 00 	sts	0x00BF, r25
     230:	80 93 be 00 	sts	0x00BE, r24
      
        Key_Inp=KEY_EMPTY;                                                         //установить флаг кнопка не нажата
     234:	10 92 8a 00 	sts	0x008A, r1
      }

      //алгоритм записи и проверки записи калибровочных констант в EEPROM
      if(Key_Inp == KEY_BS)              //если нажата кнопка "сохранить константу"            
     238:	80 91 8a 00 	lds	r24, 0x008A
     23c:	88 30       	cpi	r24, 0x08	; 8
     23e:	f9 f6       	brne	.-66     	; 0x1fe <main+0x19c>
      {
        switch_channel(count_channel);                                             //переключение индикации и запись оцифрованного значения датчика в ОЗУ              
     240:	80 91 be 00 	lds	r24, 0x00BE
     244:	90 91 bf 00 	lds	r25, 0x00BF
     248:	21 d4       	rcall	.+2114   	; 0xa8c <switch_channel>

        if((count_channel >= 0)&&(count_channel <= 6))
     24a:	80 91 be 00 	lds	r24, 0x00BE
     24e:	90 91 bf 00 	lds	r25, 0x00BF
     252:	87 30       	cpi	r24, 0x07	; 7
     254:	91 05       	cpc	r25, r1
     256:	08 f0       	brcs	.+2      	; 0x25a <main+0x1f8>
     258:	79 c0       	rjmp	.+242    	; 0x34c <__stack+0xed>
        {
           eeprom_busy_wait();
     25a:	ec e3       	ldi	r30, 0x3C	; 60
     25c:	f0 e0       	ldi	r31, 0x00	; 0
     25e:	80 81       	ld	r24, Z
     260:	88 2f       	mov	r24, r24
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	82 70       	andi	r24, 0x02	; 2
     266:	90 70       	andi	r25, 0x00	; 0
     268:	00 97       	sbiw	r24, 0x00	; 0
     26a:	b9 f7       	brne	.-18     	; 0x25a <main+0x1f8>
           eeprom_update_word(ADDRESS_VIA_POINTER, array[count_channel]);          //записать калибровочную константу, если значение другое
     26c:	80 91 be 00 	lds	r24, 0x00BE
     270:	90 91 bf 00 	lds	r25, 0x00BF
     274:	88 0f       	add	r24, r24
     276:	99 1f       	adc	r25, r25
     278:	ac 01       	movw	r20, r24
     27a:	80 91 be 00 	lds	r24, 0x00BE
     27e:	90 91 bf 00 	lds	r25, 0x00BF
     282:	88 0f       	add	r24, r24
     284:	99 1f       	adc	r25, r25
     286:	fc 01       	movw	r30, r24
     288:	ea 53       	subi	r30, 0x3A	; 58
     28a:	ff 4f       	sbci	r31, 0xFF	; 255
     28c:	20 81       	ld	r18, Z
     28e:	31 81       	ldd	r19, Z+1	; 0x01
     290:	ca 01       	movw	r24, r20
     292:	b9 01       	movw	r22, r18
     294:	c9 d6       	rcall	.+3474   	; 0x1028 <__eeupd_word_m8535>
           eeprom_busy_wait();
     296:	ec e3       	ldi	r30, 0x3C	; 60
     298:	f0 e0       	ldi	r31, 0x00	; 0
     29a:	80 81       	ld	r24, Z
     29c:	88 2f       	mov	r24, r24
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	82 70       	andi	r24, 0x02	; 2
     2a2:	90 70       	andi	r25, 0x00	; 0
     2a4:	00 97       	sbiw	r24, 0x00	; 0
     2a6:	b9 f7       	brne	.-18     	; 0x296 <__stack+0x37>
           from_ee[count_channel] = eeprom_read_word(ADDRESS_VIA_POINTER);         //считать записанное значение для проверки
     2a8:	00 91 be 00 	lds	r16, 0x00BE
     2ac:	10 91 bf 00 	lds	r17, 0x00BF
     2b0:	80 91 be 00 	lds	r24, 0x00BE
     2b4:	90 91 bf 00 	lds	r25, 0x00BF
     2b8:	88 0f       	add	r24, r24
     2ba:	99 1f       	adc	r25, r25
     2bc:	b0 d6       	rcall	.+3424   	; 0x101e <__eerd_word_m8535>
     2be:	9c 01       	movw	r18, r24
     2c0:	c8 01       	movw	r24, r16
     2c2:	88 0f       	add	r24, r24
     2c4:	99 1f       	adc	r25, r25
     2c6:	fc 01       	movw	r30, r24
     2c8:	e7 52       	subi	r30, 0x27	; 39
     2ca:	ff 4f       	sbci	r31, 0xFF	; 255
     2cc:	31 83       	std	Z+1, r19	; 0x01
     2ce:	20 83       	st	Z, r18

           //проверка успешной записи
           if((from_ee[count_channel] == array[count_channel])&&(from_ee[count_channel] != 0xFFFF)&&(from_ee[count_channel] != 0x0))
     2d0:	80 91 be 00 	lds	r24, 0x00BE
     2d4:	90 91 bf 00 	lds	r25, 0x00BF
     2d8:	88 0f       	add	r24, r24
     2da:	99 1f       	adc	r25, r25
     2dc:	fc 01       	movw	r30, r24
     2de:	e7 52       	subi	r30, 0x27	; 39
     2e0:	ff 4f       	sbci	r31, 0xFF	; 255
     2e2:	20 81       	ld	r18, Z
     2e4:	31 81       	ldd	r19, Z+1	; 0x01
     2e6:	80 91 be 00 	lds	r24, 0x00BE
     2ea:	90 91 bf 00 	lds	r25, 0x00BF
     2ee:	88 0f       	add	r24, r24
     2f0:	99 1f       	adc	r25, r25
     2f2:	fc 01       	movw	r30, r24
     2f4:	ea 53       	subi	r30, 0x3A	; 58
     2f6:	ff 4f       	sbci	r31, 0xFF	; 255
     2f8:	80 81       	ld	r24, Z
     2fa:	91 81       	ldd	r25, Z+1	; 0x01
     2fc:	28 17       	cp	r18, r24
     2fe:	39 07       	cpc	r19, r25
     300:	29 f5       	brne	.+74     	; 0x34c <__stack+0xed>
     302:	80 91 be 00 	lds	r24, 0x00BE
     306:	90 91 bf 00 	lds	r25, 0x00BF
     30a:	88 0f       	add	r24, r24
     30c:	99 1f       	adc	r25, r25
     30e:	fc 01       	movw	r30, r24
     310:	e7 52       	subi	r30, 0x27	; 39
     312:	ff 4f       	sbci	r31, 0xFF	; 255
     314:	80 81       	ld	r24, Z
     316:	91 81       	ldd	r25, Z+1	; 0x01
     318:	2f ef       	ldi	r18, 0xFF	; 255
     31a:	8f 3f       	cpi	r24, 0xFF	; 255
     31c:	92 07       	cpc	r25, r18
     31e:	b1 f0       	breq	.+44     	; 0x34c <__stack+0xed>
     320:	80 91 be 00 	lds	r24, 0x00BE
     324:	90 91 bf 00 	lds	r25, 0x00BF
     328:	88 0f       	add	r24, r24
     32a:	99 1f       	adc	r25, r25
     32c:	fc 01       	movw	r30, r24
     32e:	e7 52       	subi	r30, 0x27	; 39
     330:	ff 4f       	sbci	r31, 0xFF	; 255
     332:	80 81       	ld	r24, Z
     334:	91 81       	ldd	r25, Z+1	; 0x01
     336:	00 97       	sbiw	r24, 0x00	; 0
     338:	49 f0       	breq	.+18     	; 0x34c <__stack+0xed>
		     count_channel++;                                                      //переключение на следующий канал
     33a:	80 91 be 00 	lds	r24, 0x00BE
     33e:	90 91 bf 00 	lds	r25, 0x00BF
     342:	01 96       	adiw	r24, 0x01	; 1
     344:	90 93 bf 00 	sts	0x00BF, r25
     348:	80 93 be 00 	sts	0x00BE, r24
        }
       Key_Inp=KEY_EMPTY;                                                          //установить флаг кнопка не нажата
     34c:	10 92 8a 00 	sts	0x008A, r1
     350:	56 cf       	rjmp	.-340    	; 0x1fe <main+0x19c>
 else     //обычный режим работы     
  {
    unsigned char i;
    
    //алгоритм проверки наличия констант в EEPROM (при первом включении) и записи констант в ОЗУ
    for (i=0; i<6; i++)                 
     352:	19 82       	std	Y+1, r1	; 0x01
     354:	20 c0       	rjmp	.+64     	; 0x396 <__stack+0x137>
    {
      eeprom_busy_wait();
     356:	ec e3       	ldi	r30, 0x3C	; 60
     358:	f0 e0       	ldi	r31, 0x00	; 0
     35a:	80 81       	ld	r24, Z
     35c:	88 2f       	mov	r24, r24
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	82 70       	andi	r24, 0x02	; 2
     362:	90 70       	andi	r25, 0x00	; 0
     364:	00 97       	sbiw	r24, 0x00	; 0
     366:	b9 f7       	brne	.-18     	; 0x356 <__stack+0xf7>
      array[i] = eeprom_read_word(ADDRESS_VIA_EEMEM);       //считывание массива уставок из EEPROM в ОЗУ
     368:	89 81       	ldd	r24, Y+1	; 0x01
     36a:	08 2f       	mov	r16, r24
     36c:	10 e0       	ldi	r17, 0x00	; 0
     36e:	89 81       	ldd	r24, Y+1	; 0x01
     370:	88 2f       	mov	r24, r24
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	88 0f       	add	r24, r24
     376:	99 1f       	adc	r25, r25
     378:	80 50       	subi	r24, 0x00	; 0
     37a:	90 40       	sbci	r25, 0x00	; 0
     37c:	50 d6       	rcall	.+3232   	; 0x101e <__eerd_word_m8535>
     37e:	9c 01       	movw	r18, r24
     380:	c8 01       	movw	r24, r16
     382:	88 0f       	add	r24, r24
     384:	99 1f       	adc	r25, r25
     386:	fc 01       	movw	r30, r24
     388:	ea 53       	subi	r30, 0x3A	; 58
     38a:	ff 4f       	sbci	r31, 0xFF	; 255
     38c:	31 83       	std	Z+1, r19	; 0x01
     38e:	20 83       	st	Z, r18
 else     //обычный режим работы     
  {
    unsigned char i;
    
    //алгоритм проверки наличия констант в EEPROM (при первом включении) и записи констант в ОЗУ
    for (i=0; i<6; i++)                 
     390:	89 81       	ldd	r24, Y+1	; 0x01
     392:	8f 5f       	subi	r24, 0xFF	; 255
     394:	89 83       	std	Y+1, r24	; 0x01
     396:	89 81       	ldd	r24, Y+1	; 0x01
     398:	86 30       	cpi	r24, 0x06	; 6
     39a:	e8 f2       	brcs	.-70     	; 0x356 <__stack+0xf7>
      }*/
    }
    /*Work program*/
    while (1)
    {
      _WDR();
     39c:	a8 95       	wdr
      AccountADC();
     39e:	4f d3       	rcall	.+1694   	; 0xa3e <AccountADC>
      AccountNDiz();
     3a0:	a4 d2       	rcall	.+1352   	; 0x8ea <AccountNDiz>
      Если значение датчика температуры стало больше или равно 8'С, учитывая гистерезис и флаг датчика 4 по порогу 8 был сброшен
      (означает, что значение датчика температуры было до этого меньше 8'С), то установить флаг датчика 4 по порогу 8 (означает
      превышение порога 8).
      Если значение датчика температуры стало меньше 8'С и флаг датчика 4 по порогу 8 был установлен, то флаг сбросить.
*/
      if ((Dt4<=array[0]-Hyst_t)&&(!Dt4_8))       Dt4_8=1;   //выше 9.5 градусов направление срабатывания - вверх
     3a2:	80 91 c6 00 	lds	r24, 0x00C6
     3a6:	90 91 c7 00 	lds	r25, 0x00C7
     3aa:	9c 01       	movw	r18, r24
     3ac:	2a 50       	subi	r18, 0x0A	; 10
     3ae:	30 40       	sbci	r19, 0x00	; 0
     3b0:	80 91 d4 00 	lds	r24, 0x00D4
     3b4:	90 91 d5 00 	lds	r25, 0x00D5
     3b8:	28 17       	cp	r18, r24
     3ba:	39 07       	cpc	r19, r25
     3bc:	38 f0       	brcs	.+14     	; 0x3cc <__stack+0x16d>
     3be:	80 91 d7 00 	lds	r24, 0x00D7
     3c2:	88 23       	and	r24, r24
     3c4:	19 f4       	brne	.+6      	; 0x3cc <__stack+0x16d>
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	80 93 d7 00 	sts	0x00D7, r24
      if ((Dt4>array[0])&&(Dt4_8))                Dt4_8=0;   //ниже 8 градусов
     3cc:	20 91 c6 00 	lds	r18, 0x00C6
     3d0:	30 91 c7 00 	lds	r19, 0x00C7
     3d4:	80 91 d4 00 	lds	r24, 0x00D4
     3d8:	90 91 d5 00 	lds	r25, 0x00D5
     3dc:	28 17       	cp	r18, r24
     3de:	39 07       	cpc	r19, r25
     3e0:	30 f4       	brcc	.+12     	; 0x3ee <__stack+0x18f>
     3e2:	80 91 d7 00 	lds	r24, 0x00D7
     3e6:	88 23       	and	r24, r24
     3e8:	11 f0       	breq	.+4      	; 0x3ee <__stack+0x18f>
     3ea:	10 92 d7 00 	sts	0x00D7, r1

      if ((Dt4<=(array[1]-Hyst_t))&&(!Dt4_30))    Dt4_30=1;  //выше 31.25 градусов
     3ee:	80 91 c8 00 	lds	r24, 0x00C8
     3f2:	90 91 c9 00 	lds	r25, 0x00C9
     3f6:	9c 01       	movw	r18, r24
     3f8:	2a 50       	subi	r18, 0x0A	; 10
     3fa:	30 40       	sbci	r19, 0x00	; 0
     3fc:	80 91 d4 00 	lds	r24, 0x00D4
     400:	90 91 d5 00 	lds	r25, 0x00D5
     404:	28 17       	cp	r18, r24
     406:	39 07       	cpc	r19, r25
     408:	38 f0       	brcs	.+14     	; 0x418 <__stack+0x1b9>
     40a:	80 91 8b 00 	lds	r24, 0x008B
     40e:	88 23       	and	r24, r24
     410:	19 f4       	brne	.+6      	; 0x418 <__stack+0x1b9>
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	80 93 8b 00 	sts	0x008B, r24
      if ((Dt4>array[1])&&(Dt4_30))               Dt4_30=0;  //ниже 30 градусов - гистерезис направление срабатывания - вверх
     418:	20 91 c8 00 	lds	r18, 0x00C8
     41c:	30 91 c9 00 	lds	r19, 0x00C9
     420:	80 91 d4 00 	lds	r24, 0x00D4
     424:	90 91 d5 00 	lds	r25, 0x00D5
     428:	28 17       	cp	r18, r24
     42a:	39 07       	cpc	r19, r25
     42c:	30 f4       	brcc	.+12     	; 0x43a <__stack+0x1db>
     42e:	80 91 8b 00 	lds	r24, 0x008B
     432:	88 23       	and	r24, r24
     434:	11 f0       	breq	.+4      	; 0x43a <__stack+0x1db>
     436:	10 92 8b 00 	sts	0x008B, r1

      if ((Dt4<=array[2])&&(!Dt4_37))             Dt4_37=1;  //выше 37.0 градусов
     43a:	20 91 ca 00 	lds	r18, 0x00CA
     43e:	30 91 cb 00 	lds	r19, 0x00CB
     442:	80 91 d4 00 	lds	r24, 0x00D4
     446:	90 91 d5 00 	lds	r25, 0x00D5
     44a:	28 17       	cp	r18, r24
     44c:	39 07       	cpc	r19, r25
     44e:	38 f0       	brcs	.+14     	; 0x45e <__stack+0x1ff>
     450:	80 91 81 00 	lds	r24, 0x0081
     454:	88 23       	and	r24, r24
     456:	19 f4       	brne	.+6      	; 0x45e <__stack+0x1ff>
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	80 93 81 00 	sts	0x0081, r24
      if ((Dt4>(array[2]+Hyst_t))&&(Dt4_37))      Dt4_37=0;  //ниже 36,8 градусов направление срабатывания - вниз
     45e:	80 91 ca 00 	lds	r24, 0x00CA
     462:	90 91 cb 00 	lds	r25, 0x00CB
     466:	9c 01       	movw	r18, r24
     468:	26 5f       	subi	r18, 0xF6	; 246
     46a:	3f 4f       	sbci	r19, 0xFF	; 255
     46c:	80 91 d4 00 	lds	r24, 0x00D4
     470:	90 91 d5 00 	lds	r25, 0x00D5
     474:	28 17       	cp	r18, r24
     476:	39 07       	cpc	r19, r25
     478:	30 f4       	brcc	.+12     	; 0x486 <__stack+0x227>
     47a:	80 91 81 00 	lds	r24, 0x0081
     47e:	88 23       	and	r24, r24
     480:	11 f0       	breq	.+4      	; 0x486 <__stack+0x227>
     482:	10 92 81 00 	sts	0x0081, r1

      if ((Dt5<=array[3]-(Hyst_t+20))&&(!Dt5_37)) Dt5_37=1;  //выше 44.5 градусов
     486:	80 91 cc 00 	lds	r24, 0x00CC
     48a:	90 91 cd 00 	lds	r25, 0x00CD
     48e:	9c 01       	movw	r18, r24
     490:	2e 51       	subi	r18, 0x1E	; 30
     492:	30 40       	sbci	r19, 0x00	; 0
     494:	80 91 7b 00 	lds	r24, 0x007B
     498:	90 91 7c 00 	lds	r25, 0x007C
     49c:	28 17       	cp	r18, r24
     49e:	39 07       	cpc	r19, r25
     4a0:	38 f0       	brcs	.+14     	; 0x4b0 <__stack+0x251>
     4a2:	80 91 b4 00 	lds	r24, 0x00B4
     4a6:	88 23       	and	r24, r24
     4a8:	19 f4       	brne	.+6      	; 0x4b0 <__stack+0x251>
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	80 93 b4 00 	sts	0x00B4, r24
      if ((Dt5>array[3])&&(Dt5_37))               Dt5_37=0;  //ниже 37 градусов направление срабатывания - вверх
     4b0:	20 91 cc 00 	lds	r18, 0x00CC
     4b4:	30 91 cd 00 	lds	r19, 0x00CD
     4b8:	80 91 7b 00 	lds	r24, 0x007B
     4bc:	90 91 7c 00 	lds	r25, 0x007C
     4c0:	28 17       	cp	r18, r24
     4c2:	39 07       	cpc	r19, r25
     4c4:	30 f4       	brcc	.+12     	; 0x4d2 <__stack+0x273>
     4c6:	80 91 b4 00 	lds	r24, 0x00B4
     4ca:	88 23       	and	r24, r24
     4cc:	11 f0       	breq	.+4      	; 0x4d2 <__stack+0x273>
     4ce:	10 92 b4 00 	sts	0x00B4, r1

      if ((Dt5<=array[4])&&(!Dt5_95))             Dt5_95=1;  //выше 95 градусов
     4d2:	20 91 ce 00 	lds	r18, 0x00CE
     4d6:	30 91 cf 00 	lds	r19, 0x00CF
     4da:	80 91 7b 00 	lds	r24, 0x007B
     4de:	90 91 7c 00 	lds	r25, 0x007C
     4e2:	28 17       	cp	r18, r24
     4e4:	39 07       	cpc	r19, r25
     4e6:	38 f0       	brcs	.+14     	; 0x4f6 <__stack+0x297>
     4e8:	80 91 b1 00 	lds	r24, 0x00B1
     4ec:	88 23       	and	r24, r24
     4ee:	19 f4       	brne	.+6      	; 0x4f6 <__stack+0x297>
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	80 93 b1 00 	sts	0x00B1, r24
      if ((Dt5>(array[4]+Hyst_t))&&(Dt5_95))      Dt5_95=0;  //ниже 93.5 градусов направление срабатывания - вверх
     4f6:	80 91 ce 00 	lds	r24, 0x00CE
     4fa:	90 91 cf 00 	lds	r25, 0x00CF
     4fe:	9c 01       	movw	r18, r24
     500:	26 5f       	subi	r18, 0xF6	; 246
     502:	3f 4f       	sbci	r19, 0xFF	; 255
     504:	80 91 7b 00 	lds	r24, 0x007B
     508:	90 91 7c 00 	lds	r25, 0x007C
     50c:	28 17       	cp	r18, r24
     50e:	39 07       	cpc	r19, r25
     510:	30 f4       	brcc	.+12     	; 0x51e <__stack+0x2bf>
     512:	80 91 b1 00 	lds	r24, 0x00B1
     516:	88 23       	and	r24, r24
     518:	11 f0       	breq	.+4      	; 0x51e <__stack+0x2bf>
     51a:	10 92 b1 00 	sts	0x00B1, r1

      if ((Dt6<=array[5])&&(!Dt6_115))            Dt6_115=1; //выше 115 градусов
     51e:	20 91 d0 00 	lds	r18, 0x00D0
     522:	30 91 d1 00 	lds	r19, 0x00D1
     526:	80 91 82 00 	lds	r24, 0x0082
     52a:	90 91 83 00 	lds	r25, 0x0083
     52e:	28 17       	cp	r18, r24
     530:	39 07       	cpc	r19, r25
     532:	38 f0       	brcs	.+14     	; 0x542 <__stack+0x2e3>
     534:	80 91 76 00 	lds	r24, 0x0076
     538:	88 23       	and	r24, r24
     53a:	19 f4       	brne	.+6      	; 0x542 <__stack+0x2e3>
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	80 93 76 00 	sts	0x0076, r24
      if ((Dt6>(array[5]+Hyst_t))&&(Dt6_115))     Dt6_115=0; //ниже 113.5 градусов направление срабатывания - вверх
     542:	80 91 d0 00 	lds	r24, 0x00D0
     546:	90 91 d1 00 	lds	r25, 0x00D1
     54a:	9c 01       	movw	r18, r24
     54c:	26 5f       	subi	r18, 0xF6	; 246
     54e:	3f 4f       	sbci	r19, 0xFF	; 255
     550:	80 91 82 00 	lds	r24, 0x0082
     554:	90 91 83 00 	lds	r25, 0x0083
     558:	28 17       	cp	r18, r24
     55a:	39 07       	cpc	r19, r25
     55c:	30 f4       	brcc	.+12     	; 0x56a <__stack+0x30b>
     55e:	80 91 76 00 	lds	r24, 0x0076
     562:	88 23       	and	r24, r24
     564:	11 f0       	breq	.+4      	; 0x56a <__stack+0x30b>
     566:	10 92 76 00 	sts	0x0076, r1

      if ((Dt5<=array[6])&&(!Dt5_118))            Dt5_118=1; //выше 118 градусов
     56a:	20 91 d2 00 	lds	r18, 0x00D2
     56e:	30 91 d3 00 	lds	r19, 0x00D3
     572:	80 91 7b 00 	lds	r24, 0x007B
     576:	90 91 7c 00 	lds	r25, 0x007C
     57a:	28 17       	cp	r18, r24
     57c:	39 07       	cpc	r19, r25
     57e:	38 f0       	brcs	.+14     	; 0x58e <__stack+0x32f>
     580:	80 91 d8 00 	lds	r24, 0x00D8
     584:	88 23       	and	r24, r24
     586:	19 f4       	brne	.+6      	; 0x58e <__stack+0x32f>
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	80 93 d8 00 	sts	0x00D8, r24
      if ((Dt5>(array[6]+Hyst_t))&&(Dt5_118))     Dt5_118=0; //ниже 116.5 градусов направление срабатывания - вверх
     58e:	80 91 d2 00 	lds	r24, 0x00D2
     592:	90 91 d3 00 	lds	r25, 0x00D3
     596:	9c 01       	movw	r18, r24
     598:	26 5f       	subi	r18, 0xF6	; 246
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	80 91 7b 00 	lds	r24, 0x007B
     5a0:	90 91 7c 00 	lds	r25, 0x007C
     5a4:	28 17       	cp	r18, r24
     5a6:	39 07       	cpc	r19, r25
     5a8:	30 f4       	brcc	.+12     	; 0x5b6 <__stack+0x357>
     5aa:	80 91 d8 00 	lds	r24, 0x00D8
     5ae:	88 23       	and	r24, r24
     5b0:	11 f0       	breq	.+4      	; 0x5b6 <__stack+0x357>
     5b2:	10 92 d8 00 	sts	0x00D8, r1
      Если значение датчика давления стало больше или равно 1 кг/см^2 и флаг датчика давления по порогу 1 был сброшен (означает,
      что значение датчика давления было до этого меньше 1 кг/см^2), то установить флаг датчика давления по порогу 1 (означает 
      превышение порога 1).
      Если значение датчика давления стало меньше 1 кг/см^2 и флаг датчика давления по порогу 1 был установлен, то флаг сбросить.
*/
      if ((Dd1>=d1_1)&&(!Dd1_1))                  Dd1_1=1;   //выше 1 кг/см кв определить пределы направление срабатывания - вверх
     5b6:	80 91 b2 00 	lds	r24, 0x00B2
     5ba:	90 91 b3 00 	lds	r25, 0x00B3
     5be:	82 37       	cpi	r24, 0x72	; 114
     5c0:	91 05       	cpc	r25, r1
     5c2:	38 f0       	brcs	.+14     	; 0x5d2 <__stack+0x373>
     5c4:	80 91 7d 00 	lds	r24, 0x007D
     5c8:	88 23       	and	r24, r24
     5ca:	19 f4       	brne	.+6      	; 0x5d2 <__stack+0x373>
     5cc:	81 e0       	ldi	r24, 0x01	; 1
     5ce:	80 93 7d 00 	sts	0x007D, r24
      if ((Dd1<d1_1-Hyst_p)&&(Dd1_1))             Dd1_1=0;   //ниже 1 кг/см кв
     5d2:	80 91 b2 00 	lds	r24, 0x00B2
     5d6:	90 91 b3 00 	lds	r25, 0x00B3
     5da:	88 36       	cpi	r24, 0x68	; 104
     5dc:	91 05       	cpc	r25, r1
     5de:	30 f4       	brcc	.+12     	; 0x5ec <__stack+0x38d>
     5e0:	80 91 7d 00 	lds	r24, 0x007D
     5e4:	88 23       	and	r24, r24
     5e6:	11 f0       	breq	.+4      	; 0x5ec <__stack+0x38d>
     5e8:	10 92 7d 00 	sts	0x007D, r1

      if ((Dd1>=d1_4+Hyst_p)&&(!Dd1_4))           Dd1_4=1;   //выше 4 кг/см кв определить пределы
     5ec:	80 91 b2 00 	lds	r24, 0x00B2
     5f0:	90 91 b3 00 	lds	r25, 0x00B3
     5f4:	8f 3d       	cpi	r24, 0xDF	; 223
     5f6:	91 05       	cpc	r25, r1
     5f8:	38 f0       	brcs	.+14     	; 0x608 <__stack+0x3a9>
     5fa:	80 91 89 00 	lds	r24, 0x0089
     5fe:	88 23       	and	r24, r24
     600:	19 f4       	brne	.+6      	; 0x608 <__stack+0x3a9>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	80 93 89 00 	sts	0x0089, r24
      if ((Dd1<d1_4)&&(Dd1_4))                    Dd1_4=0;   //ниже 4 кг/см кв определить пределы 10 - гистерезис вниз направление срабатывания - вниз
     608:	80 91 b2 00 	lds	r24, 0x00B2
     60c:	90 91 b3 00 	lds	r25, 0x00B3
     610:	85 3d       	cpi	r24, 0xD5	; 213
     612:	91 05       	cpc	r25, r1
     614:	30 f4       	brcc	.+12     	; 0x622 <__stack+0x3c3>
     616:	80 91 89 00 	lds	r24, 0x0089
     61a:	88 23       	and	r24, r24
     61c:	11 f0       	breq	.+4      	; 0x622 <__stack+0x3c3>
     61e:	10 92 89 00 	sts	0x0089, r1
      Условия задания флагов по порогу 500.
      Если число оборотов маховика коленвала дизеля больше или равно 500 и флаг датчика частоты оборотов был сброшен (означает,
      что число оборотов было менше 500), то установить флаг датчика частоты оборотов (означает превышение порога 500).
      Если число оборотов меньше 400 и флаг датчика частоты оборотов был установлен, то сбросить флаг датчика частоты оборотов.
*/
      if ((NDiz>=500)&&(!Nd_500))                 Nd_500=1;  //100 оборотов гистерезис
     622:	80 91 b7 00 	lds	r24, 0x00B7
     626:	90 91 b8 00 	lds	r25, 0x00B8
     62a:	21 e0       	ldi	r18, 0x01	; 1
     62c:	84 3f       	cpi	r24, 0xF4	; 244
     62e:	92 07       	cpc	r25, r18
     630:	38 f0       	brcs	.+14     	; 0x640 <__stack+0x3e1>
     632:	80 91 ff 00 	lds	r24, 0x00FF
     636:	88 23       	and	r24, r24
     638:	19 f4       	brne	.+6      	; 0x640 <__stack+0x3e1>
     63a:	81 e0       	ldi	r24, 0x01	; 1
     63c:	80 93 ff 00 	sts	0x00FF, r24
      if ((NDiz<400)&&(Nd_500))                   Nd_500=0;
     640:	80 91 b7 00 	lds	r24, 0x00B7
     644:	90 91 b8 00 	lds	r25, 0x00B8
     648:	21 e0       	ldi	r18, 0x01	; 1
     64a:	80 39       	cpi	r24, 0x90	; 144
     64c:	92 07       	cpc	r25, r18
     64e:	30 f4       	brcc	.+12     	; 0x65c <__stack+0x3fd>
     650:	80 91 ff 00 	lds	r24, 0x00FF
     654:	88 23       	and	r24, r24
     656:	11 f0       	breq	.+4      	; 0x65c <__stack+0x3fd>
     658:	10 92 ff 00 	sts	0x00FF, r1

      if ((NDiz>=1450)&&(!Nd_1450))               Nd_1450=1;
     65c:	80 91 b7 00 	lds	r24, 0x00B7
     660:	90 91 b8 00 	lds	r25, 0x00B8
     664:	25 e0       	ldi	r18, 0x05	; 5
     666:	8a 3a       	cpi	r24, 0xAA	; 170
     668:	92 07       	cpc	r25, r18
     66a:	38 f0       	brcs	.+14     	; 0x67a <__stack+0x41b>
     66c:	80 91 bc 00 	lds	r24, 0x00BC
     670:	88 23       	and	r24, r24
     672:	19 f4       	brne	.+6      	; 0x67a <__stack+0x41b>
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	80 93 bc 00 	sts	0x00BC, r24
      if ((NDiz<1350)&&(Nd_1450))                 Nd_1450=0;
     67a:	80 91 b7 00 	lds	r24, 0x00B7
     67e:	90 91 b8 00 	lds	r25, 0x00B8
     682:	25 e0       	ldi	r18, 0x05	; 5
     684:	86 34       	cpi	r24, 0x46	; 70
     686:	92 07       	cpc	r25, r18
     688:	30 f4       	brcc	.+12     	; 0x696 <__stack+0x437>
     68a:	80 91 bc 00 	lds	r24, 0x00BC
     68e:	88 23       	and	r24, r24
     690:	11 f0       	breq	.+4      	; 0x696 <__stack+0x437>
     692:	10 92 bc 00 	sts	0x00BC, r1

      if ((NDiz>=1750)&&(!Nd_1750))               Nd_1750=1;
     696:	80 91 b7 00 	lds	r24, 0x00B7
     69a:	90 91 b8 00 	lds	r25, 0x00B8
     69e:	26 e0       	ldi	r18, 0x06	; 6
     6a0:	86 3d       	cpi	r24, 0xD6	; 214
     6a2:	92 07       	cpc	r25, r18
     6a4:	38 f0       	brcs	.+14     	; 0x6b4 <__stack+0x455>
     6a6:	80 91 85 00 	lds	r24, 0x0085
     6aa:	88 23       	and	r24, r24
     6ac:	19 f4       	brne	.+6      	; 0x6b4 <__stack+0x455>
     6ae:	81 e0       	ldi	r24, 0x01	; 1
     6b0:	80 93 85 00 	sts	0x0085, r24
      if ((NDiz<1650)&&(Nd_1750))                 Nd_1750=0; 
     6b4:	80 91 b7 00 	lds	r24, 0x00B7
     6b8:	90 91 b8 00 	lds	r25, 0x00B8
     6bc:	26 e0       	ldi	r18, 0x06	; 6
     6be:	82 37       	cpi	r24, 0x72	; 114
     6c0:	92 07       	cpc	r25, r18
     6c2:	30 f4       	brcc	.+12     	; 0x6d0 <__stack+0x471>
     6c4:	80 91 85 00 	lds	r24, 0x0085
     6c8:	88 23       	and	r24, r24
     6ca:	11 f0       	breq	.+4      	; 0x6d0 <__stack+0x471>
     6cc:	10 92 85 00 	sts	0x0085, r1

//    Объявление портов и задание их логики (светодиодная индикация):
      if (!Dt4_8)   PORTD &= ~(1<<PORTD5); else PORTD |= (1<<PORTD5); //PD5 - выше 8 град
     6d0:	80 91 d7 00 	lds	r24, 0x00D7
     6d4:	88 23       	and	r24, r24
     6d6:	41 f4       	brne	.+16     	; 0x6e8 <__stack+0x489>
     6d8:	a2 e3       	ldi	r26, 0x32	; 50
     6da:	b0 e0       	ldi	r27, 0x00	; 0
     6dc:	e2 e3       	ldi	r30, 0x32	; 50
     6de:	f0 e0       	ldi	r31, 0x00	; 0
     6e0:	80 81       	ld	r24, Z
     6e2:	8f 7d       	andi	r24, 0xDF	; 223
     6e4:	8c 93       	st	X, r24
     6e6:	07 c0       	rjmp	.+14     	; 0x6f6 <__stack+0x497>
     6e8:	a2 e3       	ldi	r26, 0x32	; 50
     6ea:	b0 e0       	ldi	r27, 0x00	; 0
     6ec:	e2 e3       	ldi	r30, 0x32	; 50
     6ee:	f0 e0       	ldi	r31, 0x00	; 0
     6f0:	80 81       	ld	r24, Z
     6f2:	80 62       	ori	r24, 0x20	; 32
     6f4:	8c 93       	st	X, r24
      if (Dt4_30)   PORTD &= ~(1<<PORTD3); else PORTD |= (1<<PORTD3); //PD3 - ниже 30 град
     6f6:	80 91 8b 00 	lds	r24, 0x008B
     6fa:	88 23       	and	r24, r24
     6fc:	41 f0       	breq	.+16     	; 0x70e <__stack+0x4af>
     6fe:	a2 e3       	ldi	r26, 0x32	; 50
     700:	b0 e0       	ldi	r27, 0x00	; 0
     702:	e2 e3       	ldi	r30, 0x32	; 50
     704:	f0 e0       	ldi	r31, 0x00	; 0
     706:	80 81       	ld	r24, Z
     708:	87 7f       	andi	r24, 0xF7	; 247
     70a:	8c 93       	st	X, r24
     70c:	07 c0       	rjmp	.+14     	; 0x71c <__stack+0x4bd>
     70e:	a2 e3       	ldi	r26, 0x32	; 50
     710:	b0 e0       	ldi	r27, 0x00	; 0
     712:	e2 e3       	ldi	r30, 0x32	; 50
     714:	f0 e0       	ldi	r31, 0x00	; 0
     716:	80 81       	ld	r24, Z
     718:	88 60       	ori	r24, 0x08	; 8
     71a:	8c 93       	st	X, r24
      if (!Dt4_37)  PORTC &= ~(1<<PORTC2); else PORTC |= (1<<PORTC2); //PС2 - ниже 37 град 37+красн
     71c:	80 91 81 00 	lds	r24, 0x0081
     720:	88 23       	and	r24, r24
     722:	41 f4       	brne	.+16     	; 0x734 <__stack+0x4d5>
     724:	a5 e3       	ldi	r26, 0x35	; 53
     726:	b0 e0       	ldi	r27, 0x00	; 0
     728:	e5 e3       	ldi	r30, 0x35	; 53
     72a:	f0 e0       	ldi	r31, 0x00	; 0
     72c:	80 81       	ld	r24, Z
     72e:	8b 7f       	andi	r24, 0xFB	; 251
     730:	8c 93       	st	X, r24
     732:	07 c0       	rjmp	.+14     	; 0x742 <__stack+0x4e3>
     734:	a5 e3       	ldi	r26, 0x35	; 53
     736:	b0 e0       	ldi	r27, 0x00	; 0
     738:	e5 e3       	ldi	r30, 0x35	; 53
     73a:	f0 e0       	ldi	r31, 0x00	; 0
     73c:	80 81       	ld	r24, Z
     73e:	84 60       	ori	r24, 0x04	; 4
     740:	8c 93       	st	X, r24

      if (Dt5_37)   PORTC &= ~(1<<PORTC4); else PORTC |= (1<<PORTC4); //PC4 - выше 45 град зеленый
     742:	80 91 b4 00 	lds	r24, 0x00B4
     746:	88 23       	and	r24, r24
     748:	41 f0       	breq	.+16     	; 0x75a <__stack+0x4fb>
     74a:	a5 e3       	ldi	r26, 0x35	; 53
     74c:	b0 e0       	ldi	r27, 0x00	; 0
     74e:	e5 e3       	ldi	r30, 0x35	; 53
     750:	f0 e0       	ldi	r31, 0x00	; 0
     752:	80 81       	ld	r24, Z
     754:	8f 7e       	andi	r24, 0xEF	; 239
     756:	8c 93       	st	X, r24
     758:	07 c0       	rjmp	.+14     	; 0x768 <__stack+0x509>
     75a:	a5 e3       	ldi	r26, 0x35	; 53
     75c:	b0 e0       	ldi	r27, 0x00	; 0
     75e:	e5 e3       	ldi	r30, 0x35	; 53
     760:	f0 e0       	ldi	r31, 0x00	; 0
     762:	80 81       	ld	r24, Z
     764:	80 61       	ori	r24, 0x10	; 16
     766:	8c 93       	st	X, r24
      if (!Dt5_95)  PORTC &= ~(1<<PORTC0); else PORTC |= (1<<PORTC0); //PC0 - выше 95 град
     768:	80 91 b1 00 	lds	r24, 0x00B1
     76c:	88 23       	and	r24, r24
     76e:	41 f4       	brne	.+16     	; 0x780 <__stack+0x521>
     770:	a5 e3       	ldi	r26, 0x35	; 53
     772:	b0 e0       	ldi	r27, 0x00	; 0
     774:	e5 e3       	ldi	r30, 0x35	; 53
     776:	f0 e0       	ldi	r31, 0x00	; 0
     778:	80 81       	ld	r24, Z
     77a:	8e 7f       	andi	r24, 0xFE	; 254
     77c:	8c 93       	st	X, r24
     77e:	07 c0       	rjmp	.+14     	; 0x78e <__stack+0x52f>
     780:	a5 e3       	ldi	r26, 0x35	; 53
     782:	b0 e0       	ldi	r27, 0x00	; 0
     784:	e5 e3       	ldi	r30, 0x35	; 53
     786:	f0 e0       	ldi	r31, 0x00	; 0
     788:	80 81       	ld	r24, Z
     78a:	81 60       	ori	r24, 0x01	; 1
     78c:	8c 93       	st	X, r24
      if (Dt6_115)  PORTC &= ~(1<<PORTC3); else PORTC |= (1<<PORTC3); //PС3 - выше 115 град и 115 гр. инверсная
     78e:	80 91 76 00 	lds	r24, 0x0076
     792:	88 23       	and	r24, r24
     794:	41 f0       	breq	.+16     	; 0x7a6 <__stack+0x547>
     796:	a5 e3       	ldi	r26, 0x35	; 53
     798:	b0 e0       	ldi	r27, 0x00	; 0
     79a:	e5 e3       	ldi	r30, 0x35	; 53
     79c:	f0 e0       	ldi	r31, 0x00	; 0
     79e:	80 81       	ld	r24, Z
     7a0:	87 7f       	andi	r24, 0xF7	; 247
     7a2:	8c 93       	st	X, r24
     7a4:	07 c0       	rjmp	.+14     	; 0x7b4 <__stack+0x555>
     7a6:	a5 e3       	ldi	r26, 0x35	; 53
     7a8:	b0 e0       	ldi	r27, 0x00	; 0
     7aa:	e5 e3       	ldi	r30, 0x35	; 53
     7ac:	f0 e0       	ldi	r31, 0x00	; 0
     7ae:	80 81       	ld	r24, Z
     7b0:	88 60       	ori	r24, 0x08	; 8
     7b2:	8c 93       	st	X, r24
      if (Dt5_118)  PORTC &= ~(1<<PORTC1); else PORTC |= (1<<PORTC1); //PC1 - выше 118 град логика работы 118гр.
     7b4:	80 91 d8 00 	lds	r24, 0x00D8
     7b8:	88 23       	and	r24, r24
     7ba:	41 f0       	breq	.+16     	; 0x7cc <__stack+0x56d>
     7bc:	a5 e3       	ldi	r26, 0x35	; 53
     7be:	b0 e0       	ldi	r27, 0x00	; 0
     7c0:	e5 e3       	ldi	r30, 0x35	; 53
     7c2:	f0 e0       	ldi	r31, 0x00	; 0
     7c4:	80 81       	ld	r24, Z
     7c6:	8d 7f       	andi	r24, 0xFD	; 253
     7c8:	8c 93       	st	X, r24
     7ca:	07 c0       	rjmp	.+14     	; 0x7da <__stack+0x57b>
     7cc:	a5 e3       	ldi	r26, 0x35	; 53
     7ce:	b0 e0       	ldi	r27, 0x00	; 0
     7d0:	e5 e3       	ldi	r30, 0x35	; 53
     7d2:	f0 e0       	ldi	r31, 0x00	; 0
     7d4:	80 81       	ld	r24, Z
     7d6:	82 60       	ori	r24, 0x02	; 2
     7d8:	8c 93       	st	X, r24

      if (!Dd1_1)   PORTD &= ~(1<<PORTD0); else PORTD |= (1<<PORTD0); //PD0 - выше 1 кг
     7da:	80 91 7d 00 	lds	r24, 0x007D
     7de:	88 23       	and	r24, r24
     7e0:	41 f4       	brne	.+16     	; 0x7f2 <__stack+0x593>
     7e2:	a2 e3       	ldi	r26, 0x32	; 50
     7e4:	b0 e0       	ldi	r27, 0x00	; 0
     7e6:	e2 e3       	ldi	r30, 0x32	; 50
     7e8:	f0 e0       	ldi	r31, 0x00	; 0
     7ea:	80 81       	ld	r24, Z
     7ec:	8e 7f       	andi	r24, 0xFE	; 254
     7ee:	8c 93       	st	X, r24
     7f0:	07 c0       	rjmp	.+14     	; 0x800 <__stack+0x5a1>
     7f2:	a2 e3       	ldi	r26, 0x32	; 50
     7f4:	b0 e0       	ldi	r27, 0x00	; 0
     7f6:	e2 e3       	ldi	r30, 0x32	; 50
     7f8:	f0 e0       	ldi	r31, 0x00	; 0
     7fa:	80 81       	ld	r24, Z
     7fc:	81 60       	ori	r24, 0x01	; 1
     7fe:	8c 93       	st	X, r24
      if (Dd1_4)    PORTD &= ~(1<<PORTD1); else PORTD |= (1<<PORTD1); //PD1 - ниже 4 кг
     800:	80 91 89 00 	lds	r24, 0x0089
     804:	88 23       	and	r24, r24
     806:	41 f0       	breq	.+16     	; 0x818 <__stack+0x5b9>
     808:	a2 e3       	ldi	r26, 0x32	; 50
     80a:	b0 e0       	ldi	r27, 0x00	; 0
     80c:	e2 e3       	ldi	r30, 0x32	; 50
     80e:	f0 e0       	ldi	r31, 0x00	; 0
     810:	80 81       	ld	r24, Z
     812:	8d 7f       	andi	r24, 0xFD	; 253
     814:	8c 93       	st	X, r24
     816:	07 c0       	rjmp	.+14     	; 0x826 <__stack+0x5c7>
     818:	a2 e3       	ldi	r26, 0x32	; 50
     81a:	b0 e0       	ldi	r27, 0x00	; 0
     81c:	e2 e3       	ldi	r30, 0x32	; 50
     81e:	f0 e0       	ldi	r31, 0x00	; 0
     820:	80 81       	ld	r24, Z
     822:	82 60       	ori	r24, 0x02	; 2
     824:	8c 93       	st	X, r24
   
      if (!Nd_500)  PORTD &= ~(1<<PORTD2); else PORTD |= (1<<PORTD2); //PD2 - выше 500
     826:	80 91 ff 00 	lds	r24, 0x00FF
     82a:	88 23       	and	r24, r24
     82c:	41 f4       	brne	.+16     	; 0x83e <__stack+0x5df>
     82e:	a2 e3       	ldi	r26, 0x32	; 50
     830:	b0 e0       	ldi	r27, 0x00	; 0
     832:	e2 e3       	ldi	r30, 0x32	; 50
     834:	f0 e0       	ldi	r31, 0x00	; 0
     836:	80 81       	ld	r24, Z
     838:	8b 7f       	andi	r24, 0xFB	; 251
     83a:	8c 93       	st	X, r24
     83c:	07 c0       	rjmp	.+14     	; 0x84c <__stack+0x5ed>
     83e:	a2 e3       	ldi	r26, 0x32	; 50
     840:	b0 e0       	ldi	r27, 0x00	; 0
     842:	e2 e3       	ldi	r30, 0x32	; 50
     844:	f0 e0       	ldi	r31, 0x00	; 0
     846:	80 81       	ld	r24, Z
     848:	84 60       	ori	r24, 0x04	; 4
     84a:	8c 93       	st	X, r24
      if (!Nd_1450) PORTD &= ~(1<<PORTD4); else PORTD |= (1<<PORTD4); //PD4 - выше 1450
     84c:	80 91 bc 00 	lds	r24, 0x00BC
     850:	88 23       	and	r24, r24
     852:	41 f4       	brne	.+16     	; 0x864 <__stack+0x605>
     854:	a2 e3       	ldi	r26, 0x32	; 50
     856:	b0 e0       	ldi	r27, 0x00	; 0
     858:	e2 e3       	ldi	r30, 0x32	; 50
     85a:	f0 e0       	ldi	r31, 0x00	; 0
     85c:	80 81       	ld	r24, Z
     85e:	8f 7e       	andi	r24, 0xEF	; 239
     860:	8c 93       	st	X, r24
     862:	07 c0       	rjmp	.+14     	; 0x872 <__stack+0x613>
     864:	a2 e3       	ldi	r26, 0x32	; 50
     866:	b0 e0       	ldi	r27, 0x00	; 0
     868:	e2 e3       	ldi	r30, 0x32	; 50
     86a:	f0 e0       	ldi	r31, 0x00	; 0
     86c:	80 81       	ld	r24, Z
     86e:	80 61       	ori	r24, 0x10	; 16
     870:	8c 93       	st	X, r24
      if (Nd_1750)  PORTC &= ~(1<<PORTC5); else PORTC |= (1<<PORTC5); //PC5 - выше 1750
     872:	80 91 85 00 	lds	r24, 0x0085
     876:	88 23       	and	r24, r24
     878:	41 f0       	breq	.+16     	; 0x88a <__stack+0x62b>
     87a:	a5 e3       	ldi	r26, 0x35	; 53
     87c:	b0 e0       	ldi	r27, 0x00	; 0
     87e:	e5 e3       	ldi	r30, 0x35	; 53
     880:	f0 e0       	ldi	r31, 0x00	; 0
     882:	80 81       	ld	r24, Z
     884:	8f 7d       	andi	r24, 0xDF	; 223
     886:	8c 93       	st	X, r24
     888:	89 cd       	rjmp	.-1262   	; 0x39c <__stack+0x13d>
     88a:	a5 e3       	ldi	r26, 0x35	; 53
     88c:	b0 e0       	ldi	r27, 0x00	; 0
     88e:	e5 e3       	ldi	r30, 0x35	; 53
     890:	f0 e0       	ldi	r31, 0x00	; 0
     892:	80 81       	ld	r24, Z
     894:	80 62       	ori	r24, 0x20	; 32
     896:	8c 93       	st	X, r24
     898:	81 cd       	rjmp	.-1278   	; 0x39c <__stack+0x13d>

0000089a <InitAd>:
    }
  }
}

void InitAd(void)
{
     89a:	df 93       	push	r29
     89c:	cf 93       	push	r28
     89e:	cd b7       	in	r28, 0x3d	; 61
     8a0:	de b7       	in	r29, 0x3e	; 62
  ADMUX = (1<<REFS0);                        //internal Aref with capacitor 0100 0000 (ADC0, single-ended, gain=1)
     8a2:	e7 e2       	ldi	r30, 0x27	; 39
     8a4:	f0 e0       	ldi	r31, 0x00	; 0
     8a6:	80 e4       	ldi	r24, 0x40	; 64
     8a8:	80 83       	st	Z, r24
  CtAd = CtAd0;                              //63
     8aa:	8f e3       	ldi	r24, 0x3F	; 63
     8ac:	80 93 d6 00 	sts	0x00D6, r24
  NumberAd = 0;
     8b0:	10 92 80 00 	sts	0x0080, r1
  ADCSRA = 0; 
     8b4:	e6 e2       	ldi	r30, 0x26	; 38
     8b6:	f0 e0       	ldi	r31, 0x00	; 0
     8b8:	10 82       	st	Z, r1
  ADCSRA |=(1<<ADEN);                        //enable AD
     8ba:	a6 e2       	ldi	r26, 0x26	; 38
     8bc:	b0 e0       	ldi	r27, 0x00	; 0
     8be:	e6 e2       	ldi	r30, 0x26	; 38
     8c0:	f0 e0       	ldi	r31, 0x00	; 0
     8c2:	80 81       	ld	r24, Z
     8c4:	80 68       	ori	r24, 0x80	; 128
     8c6:	8c 93       	st	X, r24
  ADCSRA |=(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //1/128 - 125 kHz
     8c8:	a6 e2       	ldi	r26, 0x26	; 38
     8ca:	b0 e0       	ldi	r27, 0x00	; 0
     8cc:	e6 e2       	ldi	r30, 0x26	; 38
     8ce:	f0 e0       	ldi	r31, 0x00	; 0
     8d0:	80 81       	ld	r24, Z
     8d2:	87 60       	ori	r24, 0x07	; 7
     8d4:	8c 93       	st	X, r24
  ADCSRA |=(1<<ADSC);                        //Start
     8d6:	a6 e2       	ldi	r26, 0x26	; 38
     8d8:	b0 e0       	ldi	r27, 0x00	; 0
     8da:	e6 e2       	ldi	r30, 0x26	; 38
     8dc:	f0 e0       	ldi	r31, 0x00	; 0
     8de:	80 81       	ld	r24, Z
     8e0:	80 64       	ori	r24, 0x40	; 64
     8e2:	8c 93       	st	X, r24
}
     8e4:	cf 91       	pop	r28
     8e6:	df 91       	pop	r29
     8e8:	08 95       	ret

000008ea <AccountNDiz>:

void AccountNDiz(void)          //подпрограмма вычисления частоты вращения маховика коленвала дизеля
{
     8ea:	df 93       	push	r29
     8ec:	cf 93       	push	r28
     8ee:	00 d0       	rcall	.+0      	; 0x8f0 <AccountNDiz+0x6>
     8f0:	00 d0       	rcall	.+0      	; 0x8f2 <AccountNDiz+0x8>
     8f2:	00 d0       	rcall	.+0      	; 0x8f4 <AccountNDiz+0xa>
     8f4:	cd b7       	in	r28, 0x3d	; 61
     8f6:	de b7       	in	r29, 0x3e	; 62
  unsigned long R1;             //переменная количества оборотов
  unsigned char R0;             //номер элемента массива выборок количества оборотов
  unsigned char NDiz_invalid=0; //флаг неправильной работы
     8f8:	19 82       	std	Y+1, r1	; 0x01
  {
    R1=0;
     8fa:	1b 82       	std	Y+3, r1	; 0x03
     8fc:	1c 82       	std	Y+4, r1	; 0x04
     8fe:	1d 82       	std	Y+5, r1	; 0x05
     900:	1e 82       	std	Y+6, r1	; 0x06
    for (R0=0; R0<=15; ++R0)
     902:	1a 82       	std	Y+2, r1	; 0x02
     904:	38 c0       	rjmp	.+112    	; 0x976 <AccountNDiz+0x8c>
    {
      if ((TDizTemp[R0]==0xffff)||(TDizTemp[R0]==0)) NDiz_invalid=1; //выставление флага если расчет кол-ва оборотов будет неверный
     906:	8a 81       	ldd	r24, Y+2	; 0x02
     908:	88 2f       	mov	r24, r24
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	88 0f       	add	r24, r24
     90e:	99 1f       	adc	r25, r25
     910:	fc 01       	movw	r30, r24
     912:	e4 57       	subi	r30, 0x74	; 116
     914:	ff 4f       	sbci	r31, 0xFF	; 255
     916:	80 81       	ld	r24, Z
     918:	91 81       	ldd	r25, Z+1	; 0x01
     91a:	2f ef       	ldi	r18, 0xFF	; 255
     91c:	8f 3f       	cpi	r24, 0xFF	; 255
     91e:	92 07       	cpc	r25, r18
     920:	61 f0       	breq	.+24     	; 0x93a <AccountNDiz+0x50>
     922:	8a 81       	ldd	r24, Y+2	; 0x02
     924:	88 2f       	mov	r24, r24
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	88 0f       	add	r24, r24
     92a:	99 1f       	adc	r25, r25
     92c:	fc 01       	movw	r30, r24
     92e:	e4 57       	subi	r30, 0x74	; 116
     930:	ff 4f       	sbci	r31, 0xFF	; 255
     932:	80 81       	ld	r24, Z
     934:	91 81       	ldd	r25, Z+1	; 0x01
     936:	00 97       	sbiw	r24, 0x00	; 0
     938:	11 f4       	brne	.+4      	; 0x93e <AccountNDiz+0x54>
     93a:	81 e0       	ldi	r24, 0x01	; 1
     93c:	89 83       	std	Y+1, r24	; 0x01
      R1+=TDizTemp[R0]; //суммирование всех 16 выборок
     93e:	8a 81       	ldd	r24, Y+2	; 0x02
     940:	88 2f       	mov	r24, r24
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	88 0f       	add	r24, r24
     946:	99 1f       	adc	r25, r25
     948:	fc 01       	movw	r30, r24
     94a:	e4 57       	subi	r30, 0x74	; 116
     94c:	ff 4f       	sbci	r31, 0xFF	; 255
     94e:	80 81       	ld	r24, Z
     950:	91 81       	ldd	r25, Z+1	; 0x01
     952:	9c 01       	movw	r18, r24
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	8b 81       	ldd	r24, Y+3	; 0x03
     95a:	9c 81       	ldd	r25, Y+4	; 0x04
     95c:	ad 81       	ldd	r26, Y+5	; 0x05
     95e:	be 81       	ldd	r27, Y+6	; 0x06
     960:	82 0f       	add	r24, r18
     962:	93 1f       	adc	r25, r19
     964:	a4 1f       	adc	r26, r20
     966:	b5 1f       	adc	r27, r21
     968:	8b 83       	std	Y+3, r24	; 0x03
     96a:	9c 83       	std	Y+4, r25	; 0x04
     96c:	ad 83       	std	Y+5, r26	; 0x05
     96e:	be 83       	std	Y+6, r27	; 0x06
  unsigned long R1;             //переменная количества оборотов
  unsigned char R0;             //номер элемента массива выборок количества оборотов
  unsigned char NDiz_invalid=0; //флаг неправильной работы
  {
    R1=0;
    for (R0=0; R0<=15; ++R0)
     970:	8a 81       	ldd	r24, Y+2	; 0x02
     972:	8f 5f       	subi	r24, 0xFF	; 255
     974:	8a 83       	std	Y+2, r24	; 0x02
     976:	8a 81       	ldd	r24, Y+2	; 0x02
     978:	80 31       	cpi	r24, 0x10	; 16
     97a:	28 f2       	brcs	.-118    	; 0x906 <AccountNDiz+0x1c>
    {
      if ((TDizTemp[R0]==0xffff)||(TDizTemp[R0]==0)) NDiz_invalid=1; //выставление флага если расчет кол-ва оборотов будет неверный
      R1+=TDizTemp[R0]; //суммирование всех 16 выборок
    }
    R1>>=4; //вычисление среднего значения
     97c:	8b 81       	ldd	r24, Y+3	; 0x03
     97e:	9c 81       	ldd	r25, Y+4	; 0x04
     980:	ad 81       	ldd	r26, Y+5	; 0x05
     982:	be 81       	ldd	r27, Y+6	; 0x06
     984:	68 94       	set
     986:	13 f8       	bld	r1, 3
     988:	b6 95       	lsr	r27
     98a:	a7 95       	ror	r26
     98c:	97 95       	ror	r25
     98e:	87 95       	ror	r24
     990:	16 94       	lsr	r1
     992:	d1 f7       	brne	.-12     	; 0x988 <AccountNDiz+0x9e>
     994:	8b 83       	std	Y+3, r24	; 0x03
     996:	9c 83       	std	Y+4, r25	; 0x04
     998:	ad 83       	std	Y+5, r26	; 0x05
     99a:	be 83       	std	Y+6, r27	; 0x06
    if((R1>62330)||(NDiz_Overflow==1)) // если результат больше 62330 или установлен флаг переполнения, то обороты = 0
     99c:	8b 81       	ldd	r24, Y+3	; 0x03
     99e:	9c 81       	ldd	r25, Y+4	; 0x04
     9a0:	ad 81       	ldd	r26, Y+5	; 0x05
     9a2:	be 81       	ldd	r27, Y+6	; 0x06
     9a4:	8b 37       	cpi	r24, 0x7B	; 123
     9a6:	23 ef       	ldi	r18, 0xF3	; 243
     9a8:	92 07       	cpc	r25, r18
     9aa:	20 e0       	ldi	r18, 0x00	; 0
     9ac:	a2 07       	cpc	r26, r18
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	b2 07       	cpc	r27, r18
     9b2:	20 f4       	brcc	.+8      	; 0x9bc <AccountNDiz+0xd2>
     9b4:	80 91 72 00 	lds	r24, 0x0072
     9b8:	81 30       	cpi	r24, 0x01	; 1
     9ba:	29 f4       	brne	.+10     	; 0x9c6 <AccountNDiz+0xdc>
      NDiz=0;
     9bc:	10 92 b8 00 	sts	0x00B8, r1
     9c0:	10 92 b7 00 	sts	0x00B7, r1
     9c4:	33 c0       	rjmp	.+102    	; 0xa2c <AccountNDiz+0x142>

    else
    {
      if (!NDiz_invalid)
     9c6:	89 81       	ldd	r24, Y+1	; 0x01
     9c8:	88 23       	and	r24, r24
     9ca:	c9 f4       	brne	.+50     	; 0x9fe <AccountNDiz+0x114>
      {
        R1=8421000/R1;  //R1 = 62330 - 140 оборотов в минуту или 2,33(3) в сек
     9cc:	88 e8       	ldi	r24, 0x88	; 136
     9ce:	9e e7       	ldi	r25, 0x7E	; 126
     9d0:	a0 e8       	ldi	r26, 0x80	; 128
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	2b 81       	ldd	r18, Y+3	; 0x03
     9d6:	3c 81       	ldd	r19, Y+4	; 0x04
     9d8:	4d 81       	ldd	r20, Y+5	; 0x05
     9da:	5e 81       	ldd	r21, Y+6	; 0x06
     9dc:	bc 01       	movw	r22, r24
     9de:	cd 01       	movw	r24, r26
     9e0:	fc d2       	rcall	.+1528   	; 0xfda <__udivmodsi4>
     9e2:	da 01       	movw	r26, r20
     9e4:	c9 01       	movw	r24, r18
     9e6:	8b 83       	std	Y+3, r24	; 0x03
     9e8:	9c 83       	std	Y+4, r25	; 0x04
     9ea:	ad 83       	std	Y+5, r26	; 0x05
     9ec:	be 83       	std	Y+6, r27	; 0x06
        NDiz=R1;
     9ee:	8b 81       	ldd	r24, Y+3	; 0x03
     9f0:	9c 81       	ldd	r25, Y+4	; 0x04
     9f2:	90 93 b8 00 	sts	0x00B8, r25
     9f6:	80 93 b7 00 	sts	0x00B7, r24
        InvCounter=0;   //обнуление счетчика инвалидности
     9fa:	10 92 7e 00 	sts	0x007E, r1
      }                 //R1 = 2909 - 3000оборотов в минуту или 50 в секунду
      if (NDiz_invalid)
     9fe:	89 81       	ldd	r24, Y+1	; 0x01
     a00:	88 23       	and	r24, r24
     a02:	a1 f0       	breq	.+40     	; 0xa2c <AccountNDiz+0x142>
      {
        InvCounter++;
     a04:	80 91 7e 00 	lds	r24, 0x007E
     a08:	8f 5f       	subi	r24, 0xFF	; 255
     a0a:	80 93 7e 00 	sts	0x007E, r24
        if (InvCounter>=10)
     a0e:	80 91 7e 00 	lds	r24, 0x007E
     a12:	8a 30       	cpi	r24, 0x0A	; 10
     a14:	58 f0       	brcs	.+22     	; 0xa2c <AccountNDiz+0x142>
        {
          if (InvCounter>=250) InvCounter = 4; //колцевание
     a16:	80 91 7e 00 	lds	r24, 0x007E
     a1a:	8a 3f       	cpi	r24, 0xFA	; 250
     a1c:	18 f0       	brcs	.+6      	; 0xa24 <AccountNDiz+0x13a>
     a1e:	84 e0       	ldi	r24, 0x04	; 4
     a20:	80 93 7e 00 	sts	0x007E, r24
          NDiz = 0;
     a24:	10 92 b8 00 	sts	0x00B8, r1
     a28:	10 92 b7 00 	sts	0x00B7, r1
        }
      }
    }
  }
}
     a2c:	26 96       	adiw	r28, 0x06	; 6
     a2e:	0f b6       	in	r0, 0x3f	; 63
     a30:	f8 94       	cli
     a32:	de bf       	out	0x3e, r29	; 62
     a34:	0f be       	out	0x3f, r0	; 63
     a36:	cd bf       	out	0x3d, r28	; 61
     a38:	cf 91       	pop	r28
     a3a:	df 91       	pop	r29
     a3c:	08 95       	ret

00000a3e <AccountADC>:
//для УД-45 частота импульсов на 1500оборотов=2850
//таймер досчитывает до 5614
//коэффициент деления=

void AccountADC(void)
{
     a3e:	df 93       	push	r29
     a40:	cf 93       	push	r28
     a42:	cd b7       	in	r28, 0x3d	; 61
     a44:	de b7       	in	r29, 0x3e	; 62
  Dd1=AdResult[0];
     a46:	80 91 e7 00 	lds	r24, 0x00E7
     a4a:	90 91 e8 00 	lds	r25, 0x00E8
     a4e:	90 93 b3 00 	sts	0x00B3, r25
     a52:	80 93 b2 00 	sts	0x00B2, r24
  Dt4=AdResult[1];
     a56:	80 91 e9 00 	lds	r24, 0x00E9
     a5a:	90 91 ea 00 	lds	r25, 0x00EA
     a5e:	90 93 d5 00 	sts	0x00D5, r25
     a62:	80 93 d4 00 	sts	0x00D4, r24
  Dt5=AdResult[2];
     a66:	80 91 eb 00 	lds	r24, 0x00EB
     a6a:	90 91 ec 00 	lds	r25, 0x00EC
     a6e:	90 93 7c 00 	sts	0x007C, r25
     a72:	80 93 7b 00 	sts	0x007B, r24
  Dt6=AdResult[3];
     a76:	80 91 ed 00 	lds	r24, 0x00ED
     a7a:	90 91 ee 00 	lds	r25, 0x00EE
     a7e:	90 93 83 00 	sts	0x0083, r25
     a82:	80 93 82 00 	sts	0x0082, r24
}
     a86:	cf 91       	pop	r28
     a88:	df 91       	pop	r29
     a8a:	08 95       	ret

00000a8c <switch_channel>:

unsigned int switch_channel(unsigned int channel)
{
     a8c:	df 93       	push	r29
     a8e:	cf 93       	push	r28
     a90:	00 d0       	rcall	.+0      	; 0xa92 <switch_channel+0x6>
     a92:	00 d0       	rcall	.+0      	; 0xa94 <switch_channel+0x8>
     a94:	cd b7       	in	r28, 0x3d	; 61
     a96:	de b7       	in	r29, 0x3e	; 62
     a98:	9a 83       	std	Y+2, r25	; 0x02
     a9a:	89 83       	std	Y+1, r24	; 0x01
       
   //алгоритм переключения индикации и записи оцифрованных значений датчиков в ОЗУ
   switch (count_channel)           //варианты индикации и записи оцифрованных значений датчиков в зависимости от канала
     a9c:	80 91 be 00 	lds	r24, 0x00BE
     aa0:	90 91 bf 00 	lds	r25, 0x00BF
     aa4:	9c 83       	std	Y+4, r25	; 0x04
     aa6:	8b 83       	std	Y+3, r24	; 0x03
     aa8:	8b 81       	ldd	r24, Y+3	; 0x03
     aaa:	9c 81       	ldd	r25, Y+4	; 0x04
     aac:	83 30       	cpi	r24, 0x03	; 3
     aae:	91 05       	cpc	r25, r1
     ab0:	09 f4       	brne	.+2      	; 0xab4 <switch_channel+0x28>
     ab2:	63 c0       	rjmp	.+198    	; 0xb7a <switch_channel+0xee>
     ab4:	8b 81       	ldd	r24, Y+3	; 0x03
     ab6:	9c 81       	ldd	r25, Y+4	; 0x04
     ab8:	84 30       	cpi	r24, 0x04	; 4
     aba:	91 05       	cpc	r25, r1
     abc:	60 f4       	brcc	.+24     	; 0xad6 <switch_channel+0x4a>
     abe:	8b 81       	ldd	r24, Y+3	; 0x03
     ac0:	9c 81       	ldd	r25, Y+4	; 0x04
     ac2:	81 30       	cpi	r24, 0x01	; 1
     ac4:	91 05       	cpc	r25, r1
     ac6:	79 f1       	breq	.+94     	; 0xb26 <switch_channel+0x9a>
     ac8:	8b 81       	ldd	r24, Y+3	; 0x03
     aca:	9c 81       	ldd	r25, Y+4	; 0x04
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	91 05       	cpc	r25, r1
     ad0:	08 f0       	brcs	.+2      	; 0xad4 <switch_channel+0x48>
     ad2:	3e c0       	rjmp	.+124    	; 0xb50 <switch_channel+0xc4>
     ad4:	13 c0       	rjmp	.+38     	; 0xafc <switch_channel+0x70>
     ad6:	8b 81       	ldd	r24, Y+3	; 0x03
     ad8:	9c 81       	ldd	r25, Y+4	; 0x04
     ada:	85 30       	cpi	r24, 0x05	; 5
     adc:	91 05       	cpc	r25, r1
     ade:	09 f4       	brne	.+2      	; 0xae2 <switch_channel+0x56>
     ae0:	76 c0       	rjmp	.+236    	; 0xbce <switch_channel+0x142>
     ae2:	8b 81       	ldd	r24, Y+3	; 0x03
     ae4:	9c 81       	ldd	r25, Y+4	; 0x04
     ae6:	85 30       	cpi	r24, 0x05	; 5
     ae8:	91 05       	cpc	r25, r1
     aea:	08 f4       	brcc	.+2      	; 0xaee <switch_channel+0x62>
     aec:	5b c0       	rjmp	.+182    	; 0xba4 <switch_channel+0x118>
     aee:	8b 81       	ldd	r24, Y+3	; 0x03
     af0:	9c 81       	ldd	r25, Y+4	; 0x04
     af2:	86 30       	cpi	r24, 0x06	; 6
     af4:	91 05       	cpc	r25, r1
     af6:	09 f4       	brne	.+2      	; 0xafa <switch_channel+0x6e>
     af8:	7f c0       	rjmp	.+254    	; 0xbf8 <switch_channel+0x16c>
     afa:	91 c0       	rjmp	.+290    	; 0xc1e <switch_channel+0x192>
   {
    case 0:     
      mask_leds_c = 0x00;           //PORT C.X маска следующего канала
     afc:	10 92 b5 00 	sts	0x00B5, r1
      mask_leds_d = 0x08;           //PORT D.3  0x08       
     b00:	88 e0       	ldi	r24, 0x08	; 8
     b02:	80 93 74 00 	sts	0x0074, r24
      array[count_channel] = Dt4;
     b06:	80 91 be 00 	lds	r24, 0x00BE
     b0a:	90 91 bf 00 	lds	r25, 0x00BF
     b0e:	20 91 d4 00 	lds	r18, 0x00D4
     b12:	30 91 d5 00 	lds	r19, 0x00D5
     b16:	88 0f       	add	r24, r24
     b18:	99 1f       	adc	r25, r25
     b1a:	fc 01       	movw	r30, r24
     b1c:	ea 53       	subi	r30, 0x3A	; 58
     b1e:	ff 4f       	sbci	r31, 0xFF	; 255
     b20:	31 83       	std	Z+1, r19	; 0x01
     b22:	20 83       	st	Z, r18
     b24:	7c c0       	rjmp	.+248    	; 0xc1e <switch_channel+0x192>
      break;
    case 1:
      mask_leds_c = 0x04;           //PORT C.2  0x04
     b26:	84 e0       	ldi	r24, 0x04	; 4
     b28:	80 93 b5 00 	sts	0x00B5, r24
      mask_leds_d = 0x00;           //PORT D.X
     b2c:	10 92 74 00 	sts	0x0074, r1
      array[count_channel] = Dt4;
     b30:	80 91 be 00 	lds	r24, 0x00BE
     b34:	90 91 bf 00 	lds	r25, 0x00BF
     b38:	20 91 d4 00 	lds	r18, 0x00D4
     b3c:	30 91 d5 00 	lds	r19, 0x00D5
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	fc 01       	movw	r30, r24
     b46:	ea 53       	subi	r30, 0x3A	; 58
     b48:	ff 4f       	sbci	r31, 0xFF	; 255
     b4a:	31 83       	std	Z+1, r19	; 0x01
     b4c:	20 83       	st	Z, r18
     b4e:	67 c0       	rjmp	.+206    	; 0xc1e <switch_channel+0x192>
      break;
    case 2:
      mask_leds_c = 0x10;           //PORT C.4  0x10
     b50:	80 e1       	ldi	r24, 0x10	; 16
     b52:	80 93 b5 00 	sts	0x00B5, r24
      mask_leds_d = 0x00;           //PORT D.X
     b56:	10 92 74 00 	sts	0x0074, r1
      array[count_channel] = Dt4;
     b5a:	80 91 be 00 	lds	r24, 0x00BE
     b5e:	90 91 bf 00 	lds	r25, 0x00BF
     b62:	20 91 d4 00 	lds	r18, 0x00D4
     b66:	30 91 d5 00 	lds	r19, 0x00D5
     b6a:	88 0f       	add	r24, r24
     b6c:	99 1f       	adc	r25, r25
     b6e:	fc 01       	movw	r30, r24
     b70:	ea 53       	subi	r30, 0x3A	; 58
     b72:	ff 4f       	sbci	r31, 0xFF	; 255
     b74:	31 83       	std	Z+1, r19	; 0x01
     b76:	20 83       	st	Z, r18
     b78:	52 c0       	rjmp	.+164    	; 0xc1e <switch_channel+0x192>
      break;
    case 3:
      mask_leds_c = 0x01;           //PORT C.0  0x01
     b7a:	81 e0       	ldi	r24, 0x01	; 1
     b7c:	80 93 b5 00 	sts	0x00B5, r24
      mask_leds_d = 0x00;           //PORT D.X
     b80:	10 92 74 00 	sts	0x0074, r1
      array[count_channel] = Dt5;
     b84:	80 91 be 00 	lds	r24, 0x00BE
     b88:	90 91 bf 00 	lds	r25, 0x00BF
     b8c:	20 91 7b 00 	lds	r18, 0x007B
     b90:	30 91 7c 00 	lds	r19, 0x007C
     b94:	88 0f       	add	r24, r24
     b96:	99 1f       	adc	r25, r25
     b98:	fc 01       	movw	r30, r24
     b9a:	ea 53       	subi	r30, 0x3A	; 58
     b9c:	ff 4f       	sbci	r31, 0xFF	; 255
     b9e:	31 83       	std	Z+1, r19	; 0x01
     ba0:	20 83       	st	Z, r18
     ba2:	3d c0       	rjmp	.+122    	; 0xc1e <switch_channel+0x192>
      break;
    case 4:
      mask_leds_c = 0x08;           //PORT C.3  0x08
     ba4:	88 e0       	ldi	r24, 0x08	; 8
     ba6:	80 93 b5 00 	sts	0x00B5, r24
      mask_leds_d = 0x00;           //PORT D.X
     baa:	10 92 74 00 	sts	0x0074, r1
      array[count_channel] = Dt5;
     bae:	80 91 be 00 	lds	r24, 0x00BE
     bb2:	90 91 bf 00 	lds	r25, 0x00BF
     bb6:	20 91 7b 00 	lds	r18, 0x007B
     bba:	30 91 7c 00 	lds	r19, 0x007C
     bbe:	88 0f       	add	r24, r24
     bc0:	99 1f       	adc	r25, r25
     bc2:	fc 01       	movw	r30, r24
     bc4:	ea 53       	subi	r30, 0x3A	; 58
     bc6:	ff 4f       	sbci	r31, 0xFF	; 255
     bc8:	31 83       	std	Z+1, r19	; 0x01
     bca:	20 83       	st	Z, r18
     bcc:	28 c0       	rjmp	.+80     	; 0xc1e <switch_channel+0x192>
      break;
    case 5:
      mask_leds_c = 0x02;           //PORT C.1  0x02
     bce:	82 e0       	ldi	r24, 0x02	; 2
     bd0:	80 93 b5 00 	sts	0x00B5, r24
      mask_leds_d = 0x00;           //PORT D.X
     bd4:	10 92 74 00 	sts	0x0074, r1
      array[count_channel] = Dt6;
     bd8:	80 91 be 00 	lds	r24, 0x00BE
     bdc:	90 91 bf 00 	lds	r25, 0x00BF
     be0:	20 91 82 00 	lds	r18, 0x0082
     be4:	30 91 83 00 	lds	r19, 0x0083
     be8:	88 0f       	add	r24, r24
     bea:	99 1f       	adc	r25, r25
     bec:	fc 01       	movw	r30, r24
     bee:	ea 53       	subi	r30, 0x3A	; 58
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	31 83       	std	Z+1, r19	; 0x01
     bf4:	20 83       	st	Z, r18
     bf6:	13 c0       	rjmp	.+38     	; 0xc1e <switch_channel+0x192>
      break;
    case 6:
      mask_leds_c = 0x00;           //PORT C.X и PORT D.X- индикация выхода из режима калибровки
     bf8:	10 92 b5 00 	sts	0x00B5, r1
      mask_leds_d = 0x00;
     bfc:	10 92 74 00 	sts	0x0074, r1
      array[count_channel] = Dt5;
     c00:	80 91 be 00 	lds	r24, 0x00BE
     c04:	90 91 bf 00 	lds	r25, 0x00BF
     c08:	20 91 7b 00 	lds	r18, 0x007B
     c0c:	30 91 7c 00 	lds	r19, 0x007C
     c10:	88 0f       	add	r24, r24
     c12:	99 1f       	adc	r25, r25
     c14:	fc 01       	movw	r30, r24
     c16:	ea 53       	subi	r30, 0x3A	; 58
     c18:	ff 4f       	sbci	r31, 0xFF	; 255
     c1a:	31 83       	std	Z+1, r19	; 0x01
     c1c:	20 83       	st	Z, r18
      break;
   }  
   return(array[count_channel]);
     c1e:	80 91 be 00 	lds	r24, 0x00BE
     c22:	90 91 bf 00 	lds	r25, 0x00BF
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	fc 01       	movw	r30, r24
     c2c:	ea 53       	subi	r30, 0x3A	; 58
     c2e:	ff 4f       	sbci	r31, 0xFF	; 255
     c30:	80 81       	ld	r24, Z
     c32:	91 81       	ldd	r25, Z+1	; 0x01
}
     c34:	0f 90       	pop	r0
     c36:	0f 90       	pop	r0
     c38:	0f 90       	pop	r0
     c3a:	0f 90       	pop	r0
     c3c:	cf 91       	pop	r28
     c3e:	df 91       	pop	r29
     c40:	08 95       	ret

00000c42 <__vector_5>:

SIGNAL(SIG_INPUT_CAPTURE1)
{
     c42:	1f 92       	push	r1
     c44:	0f 92       	push	r0
     c46:	0f b6       	in	r0, 0x3f	; 63
     c48:	0f 92       	push	r0
     c4a:	11 24       	eor	r1, r1
     c4c:	2f 93       	push	r18
     c4e:	3f 93       	push	r19
     c50:	4f 93       	push	r20
     c52:	5f 93       	push	r21
     c54:	8f 93       	push	r24
     c56:	9f 93       	push	r25
     c58:	ef 93       	push	r30
     c5a:	ff 93       	push	r31
     c5c:	df 93       	push	r29
     c5e:	cf 93       	push	r28
     c60:	cd b7       	in	r28, 0x3d	; 61
     c62:	de b7       	in	r29, 0x3e	; 62
  ICR1_value=ICR1; //чтение значения как можно раньше
     c64:	e6 e4       	ldi	r30, 0x46	; 70
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	80 81       	ld	r24, Z
     c6a:	91 81       	ldd	r25, Z+1	; 0x01
     c6c:	90 93 c1 00 	sts	0x00C1, r25
     c70:	80 93 c0 00 	sts	0x00C0, r24

  if ((ICR1_value>ICR1Old)&&(CtOverLow==16))
     c74:	20 91 c0 00 	lds	r18, 0x00C0
     c78:	30 91 c1 00 	lds	r19, 0x00C1
     c7c:	80 91 86 00 	lds	r24, 0x0086
     c80:	90 91 87 00 	lds	r25, 0x0087
     c84:	82 17       	cp	r24, r18
     c86:	93 07       	cpc	r25, r19
     c88:	08 f0       	brcs	.+2      	; 0xc8c <__vector_5+0x4a>
     c8a:	43 c0       	rjmp	.+134    	; 0xd12 <__vector_5+0xd0>
     c8c:	80 91 7f 00 	lds	r24, 0x007F
     c90:	80 31       	cpi	r24, 0x10	; 16
     c92:	09 f0       	breq	.+2      	; 0xc96 <__vector_5+0x54>
     c94:	3e c0       	rjmp	.+124    	; 0xd12 <__vector_5+0xd0>
  {
    TDizTemp[CtTDiz]=ICR1_value-ICR1Old; //разница между двумя измерениями
     c96:	80 91 84 00 	lds	r24, 0x0084
     c9a:	48 2f       	mov	r20, r24
     c9c:	50 e0       	ldi	r21, 0x00	; 0
     c9e:	20 91 c0 00 	lds	r18, 0x00C0
     ca2:	30 91 c1 00 	lds	r19, 0x00C1
     ca6:	80 91 86 00 	lds	r24, 0x0086
     caa:	90 91 87 00 	lds	r25, 0x0087
     cae:	28 1b       	sub	r18, r24
     cb0:	39 0b       	sbc	r19, r25
     cb2:	ca 01       	movw	r24, r20
     cb4:	88 0f       	add	r24, r24
     cb6:	99 1f       	adc	r25, r25
     cb8:	fc 01       	movw	r30, r24
     cba:	e4 57       	subi	r30, 0x74	; 116
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	31 83       	std	Z+1, r19	; 0x01
     cc0:	20 83       	st	Z, r18
    if (TDizTemp[CtTDiz]<100)
     cc2:	80 91 84 00 	lds	r24, 0x0084
     cc6:	88 2f       	mov	r24, r24
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	88 0f       	add	r24, r24
     ccc:	99 1f       	adc	r25, r25
     cce:	fc 01       	movw	r30, r24
     cd0:	e4 57       	subi	r30, 0x74	; 116
     cd2:	ff 4f       	sbci	r31, 0xFF	; 255
     cd4:	80 81       	ld	r24, Z
     cd6:	91 81       	ldd	r25, Z+1	; 0x01
     cd8:	84 36       	cpi	r24, 0x64	; 100
     cda:	91 05       	cpc	r25, r1
     cdc:	68 f4       	brcc	.+26     	; 0xcf8 <__vector_5+0xb6>
      TDizTemp[CtTDiz]=0xffff; //FFFF - невозможное значение
     cde:	80 91 84 00 	lds	r24, 0x0084
     ce2:	88 2f       	mov	r24, r24
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	88 0f       	add	r24, r24
     ce8:	99 1f       	adc	r25, r25
     cea:	fc 01       	movw	r30, r24
     cec:	e4 57       	subi	r30, 0x74	; 116
     cee:	ff 4f       	sbci	r31, 0xFF	; 255
     cf0:	8f ef       	ldi	r24, 0xFF	; 255
     cf2:	9f ef       	ldi	r25, 0xFF	; 255
     cf4:	91 83       	std	Z+1, r25	; 0x01
     cf6:	80 83       	st	Z, r24

    if (CtTDiz) --CtTDiz;
     cf8:	80 91 84 00 	lds	r24, 0x0084
     cfc:	88 23       	and	r24, r24
     cfe:	31 f0       	breq	.+12     	; 0xd0c <__vector_5+0xca>
     d00:	80 91 84 00 	lds	r24, 0x0084
     d04:	81 50       	subi	r24, 0x01	; 1
     d06:	80 93 84 00 	sts	0x0084, r24
     d0a:	03 c0       	rjmp	.+6      	; 0xd12 <__vector_5+0xd0>
    else        CtTDiz=15;     //16 выборок
     d0c:	8f e0       	ldi	r24, 0x0F	; 15
     d0e:	80 93 84 00 	sts	0x0084, r24
  }
  ICR1Old=ICR1_value;
     d12:	80 91 c0 00 	lds	r24, 0x00C0
     d16:	90 91 c1 00 	lds	r25, 0x00C1
     d1a:	90 93 87 00 	sts	0x0087, r25
     d1e:	80 93 86 00 	sts	0x0086, r24
  CtOverLow=16; //16 - переполнений до установки флага 0 оборотов.
     d22:	80 e1       	ldi	r24, 0x10	; 16
     d24:	80 93 7f 00 	sts	0x007F, r24
  NDiz_Overflow=0;
     d28:	10 92 72 00 	sts	0x0072, r1
}
     d2c:	cf 91       	pop	r28
     d2e:	df 91       	pop	r29
     d30:	ff 91       	pop	r31
     d32:	ef 91       	pop	r30
     d34:	9f 91       	pop	r25
     d36:	8f 91       	pop	r24
     d38:	5f 91       	pop	r21
     d3a:	4f 91       	pop	r20
     d3c:	3f 91       	pop	r19
     d3e:	2f 91       	pop	r18
     d40:	0f 90       	pop	r0
     d42:	0f be       	out	0x3f, r0	; 63
     d44:	0f 90       	pop	r0
     d46:	1f 90       	pop	r1
     d48:	18 95       	reti

00000d4a <__vector_8>:

SIGNAL(SIG_OVERFLOW1) //4.096 Mc = 65536*0.0625us - время переполнения таймера
{
     d4a:	1f 92       	push	r1
     d4c:	0f 92       	push	r0
     d4e:	0f b6       	in	r0, 0x3f	; 63
     d50:	0f 92       	push	r0
     d52:	11 24       	eor	r1, r1
     d54:	8f 93       	push	r24
     d56:	9f 93       	push	r25
     d58:	af 93       	push	r26
     d5a:	bf 93       	push	r27
     d5c:	ef 93       	push	r30
     d5e:	ff 93       	push	r31
     d60:	df 93       	push	r29
     d62:	cf 93       	push	r28
     d64:	cd b7       	in	r28, 0x3d	; 61
     d66:	de b7       	in	r29, 0x3e	; 62
  if (CtOverLow) CtOverLow--;  //16 переполнений до установки флага переполнения NDiz_Overflow)
     d68:	80 91 7f 00 	lds	r24, 0x007F
     d6c:	88 23       	and	r24, r24
     d6e:	31 f0       	breq	.+12     	; 0xd7c <__vector_8+0x32>
     d70:	80 91 7f 00 	lds	r24, 0x007F
     d74:	81 50       	subi	r24, 0x01	; 1
     d76:	80 93 7f 00 	sts	0x007F, r24
     d7a:	03 c0       	rjmp	.+6      	; 0xd82 <__vector_8+0x38>
  else           NDiz_Overflow=1;
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	80 93 72 00 	sts	0x0072, r24

  if(timer_250 == 0)           //если прошло 250 мс без изменения индикации 
     d82:	80 91 ba 00 	lds	r24, 0x00BA
     d86:	88 23       	and	r24, r24
     d88:	b1 f4       	brne	.+44     	; 0xdb6 <__vector_8+0x6c>
  {
    timer_250 = RELOAD;        //начать новый цикл с периодом 250 мс
     d8a:	8e e3       	ldi	r24, 0x3E	; 62
     d8c:	80 93 ba 00 	sts	0x00BA, r24
    PORTC ^= mask_leds_c;      //инвертировать сигнал, управляющий индикацией
     d90:	a5 e3       	ldi	r26, 0x35	; 53
     d92:	b0 e0       	ldi	r27, 0x00	; 0
     d94:	e5 e3       	ldi	r30, 0x35	; 53
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	90 81       	ld	r25, Z
     d9a:	80 91 b5 00 	lds	r24, 0x00B5
     d9e:	89 27       	eor	r24, r25
     da0:	8c 93       	st	X, r24
    PORTD ^= mask_leds_d;
     da2:	a2 e3       	ldi	r26, 0x32	; 50
     da4:	b0 e0       	ldi	r27, 0x00	; 0
     da6:	e2 e3       	ldi	r30, 0x32	; 50
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	90 81       	ld	r25, Z
     dac:	80 91 74 00 	lds	r24, 0x0074
     db0:	89 27       	eor	r24, r25
     db2:	8c 93       	st	X, r24
     db4:	05 c0       	rjmp	.+10     	; 0xdc0 <__vector_8+0x76>
  }
  else timer_250--;
     db6:	80 91 ba 00 	lds	r24, 0x00BA
     dba:	81 50       	subi	r24, 0x01	; 1
     dbc:	80 93 ba 00 	sts	0x00BA, r24

  //сканирование кнопок
  if(Key_Inp == KEY_EMPTY)                      
     dc0:	80 91 8a 00 	lds	r24, 0x008A
     dc4:	88 23       	and	r24, r24
     dc6:	09 f0       	breq	.+2      	; 0xdca <__vector_8+0x80>
     dc8:	50 c0       	rjmp	.+160    	; 0xe6a <__vector_8+0x120>
  {
    if((INKEY_PORT & KEY_MASK) != KEY_MASK)
     dca:	e6 e3       	ldi	r30, 0x36	; 54
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	88 2f       	mov	r24, r24
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	8c 70       	andi	r24, 0x0C	; 12
     dd6:	90 70       	andi	r25, 0x00	; 0
     dd8:	8c 30       	cpi	r24, 0x0C	; 12
     dda:	91 05       	cpc	r25, r1
     ddc:	31 f0       	breq	.+12     	; 0xdea <__vector_8+0xa0>
        Key_new = INKEY_PORT & KEY_MASK;
     dde:	e6 e3       	ldi	r30, 0x36	; 54
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	8c 70       	andi	r24, 0x0C	; 12
     de6:	80 93 ae 00 	sts	0x00AE, r24
    if (Key_new != 0xff)
     dea:	80 91 ae 00 	lds	r24, 0x00AE
     dee:	8f 3f       	cpi	r24, 0xFF	; 255
     df0:	21 f1       	breq	.+72     	; 0xe3a <__vector_8+0xf0>
    {
      if(Key_new == Key_old)
     df2:	90 91 ae 00 	lds	r25, 0x00AE
     df6:	80 91 ac 00 	lds	r24, 0x00AC
     dfa:	98 17       	cp	r25, r24
     dfc:	71 f4       	brne	.+28     	; 0xe1a <__vector_8+0xd0>
      {
        if(Count_on > KSTATE) Ff_key = 1;
     dfe:	80 91 b6 00 	lds	r24, 0x00B6
     e02:	8b 30       	cpi	r24, 0x0B	; 11
     e04:	20 f0       	brcs	.+8      	; 0xe0e <__vector_8+0xc4>
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	80 93 88 00 	sts	0x0088, r24
     e0c:	12 c0       	rjmp	.+36     	; 0xe32 <__vector_8+0xe8>
        else Count_on++;
     e0e:	80 91 b6 00 	lds	r24, 0x00B6
     e12:	8f 5f       	subi	r24, 0xFF	; 255
     e14:	80 93 b6 00 	sts	0x00B6, r24
     e18:	0c c0       	rjmp	.+24     	; 0xe32 <__vector_8+0xe8>
      }
      else
      {
        Key_old = Key_new;
     e1a:	80 91 ae 00 	lds	r24, 0x00AE
     e1e:	80 93 ac 00 	sts	0x00AC, r24
        Count_on = Count_off = 0;
     e22:	10 92 75 00 	sts	0x0075, r1
     e26:	80 91 75 00 	lds	r24, 0x0075
     e2a:	80 93 b6 00 	sts	0x00B6, r24
        Ff_key = 0;
     e2e:	10 92 88 00 	sts	0x0088, r1
      }
      Key_new = 0xff;
     e32:	8f ef       	ldi	r24, 0xFF	; 255
     e34:	80 93 ae 00 	sts	0x00AE, r24
     e38:	18 c0       	rjmp	.+48     	; 0xe6a <__vector_8+0x120>
    }
    else
    {
      if(Ff_key == 1)
     e3a:	80 91 88 00 	lds	r24, 0x0088
     e3e:	81 30       	cpi	r24, 0x01	; 1
     e40:	89 f4       	brne	.+34     	; 0xe64 <__vector_8+0x11a>
      {
        if(Count_off > KSTATE)
     e42:	80 91 75 00 	lds	r24, 0x0075
     e46:	8b 30       	cpi	r24, 0x0B	; 11
     e48:	38 f0       	brcs	.+14     	; 0xe58 <__vector_8+0x10e>
        {
          Ff_key = 0;
     e4a:	10 92 88 00 	sts	0x0088, r1
          Key_Inp = Key_old;
     e4e:	80 91 ac 00 	lds	r24, 0x00AC
     e52:	80 93 8a 00 	sts	0x008A, r24
     e56:	09 c0       	rjmp	.+18     	; 0xe6a <__vector_8+0x120>
        }
        else Count_off++;
     e58:	80 91 75 00 	lds	r24, 0x0075
     e5c:	8f 5f       	subi	r24, 0xFF	; 255
     e5e:	80 93 75 00 	sts	0x0075, r24
     e62:	03 c0       	rjmp	.+6      	; 0xe6a <__vector_8+0x120>
      }
      else Key_old = 0x55;
     e64:	85 e5       	ldi	r24, 0x55	; 85
     e66:	80 93 ac 00 	sts	0x00AC, r24
    }
  }
}
     e6a:	cf 91       	pop	r28
     e6c:	df 91       	pop	r29
     e6e:	ff 91       	pop	r31
     e70:	ef 91       	pop	r30
     e72:	bf 91       	pop	r27
     e74:	af 91       	pop	r26
     e76:	9f 91       	pop	r25
     e78:	8f 91       	pop	r24
     e7a:	0f 90       	pop	r0
     e7c:	0f be       	out	0x3f, r0	; 63
     e7e:	0f 90       	pop	r0
     e80:	1f 90       	pop	r1
     e82:	18 95       	reti

00000e84 <__vector_14>:

SIGNAL(SIG_ADC)
{
     e84:	1f 92       	push	r1
     e86:	0f 92       	push	r0
     e88:	0f b6       	in	r0, 0x3f	; 63
     e8a:	0f 92       	push	r0
     e8c:	11 24       	eor	r1, r1
     e8e:	2f 93       	push	r18
     e90:	3f 93       	push	r19
     e92:	4f 93       	push	r20
     e94:	5f 93       	push	r21
     e96:	8f 93       	push	r24
     e98:	9f 93       	push	r25
     e9a:	af 93       	push	r26
     e9c:	bf 93       	push	r27
     e9e:	ef 93       	push	r30
     ea0:	ff 93       	push	r31
     ea2:	df 93       	push	r29
     ea4:	cf 93       	push	r28
     ea6:	00 d0       	rcall	.+0      	; 0xea8 <__vector_14+0x24>
     ea8:	cd b7       	in	r28, 0x3d	; 61
     eaa:	de b7       	in	r29, 0x3e	; 62
  unsigned int RegInt0;
  RegInt0=ADC;
     eac:	e4 e2       	ldi	r30, 0x24	; 36
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	91 81       	ldd	r25, Z+1	; 0x01
     eb4:	9a 83       	std	Y+2, r25	; 0x02
     eb6:	89 83       	std	Y+1, r24	; 0x01

  if (CtAd)
     eb8:	80 91 d6 00 	lds	r24, 0x00D6
     ebc:	88 23       	and	r24, r24
     ebe:	b9 f0       	breq	.+46     	; 0xeee <__vector_14+0x6a>
  {
    --CtAd; //64 измерения
     ec0:	80 91 d6 00 	lds	r24, 0x00D6
     ec4:	81 50       	subi	r24, 0x01	; 1
     ec6:	80 93 d6 00 	sts	0x00D6, r24
    if (CtAd<=CtAd0)
     eca:	80 91 d6 00 	lds	r24, 0x00D6
     ece:	80 34       	cpi	r24, 0x40	; 64
     ed0:	08 f0       	brcs	.+2      	; 0xed4 <__vector_14+0x50>
     ed2:	4e c0       	rjmp	.+156    	; 0xf70 <__vector_14+0xec>
    {
      AdTemp +=RegInt0;
     ed4:	80 91 77 00 	lds	r24, 0x0077
     ed8:	90 91 78 00 	lds	r25, 0x0078
     edc:	29 81       	ldd	r18, Y+1	; 0x01
     ede:	3a 81       	ldd	r19, Y+2	; 0x02
     ee0:	82 0f       	add	r24, r18
     ee2:	93 1f       	adc	r25, r19
     ee4:	90 93 78 00 	sts	0x0078, r25
     ee8:	80 93 77 00 	sts	0x0077, r24
     eec:	41 c0       	rjmp	.+130    	; 0xf70 <__vector_14+0xec>
    }
  }
  else
  {
    AdResult[NumberAd]=AdTemp;
     eee:	80 91 80 00 	lds	r24, 0x0080
     ef2:	88 2f       	mov	r24, r24
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	20 91 77 00 	lds	r18, 0x0077
     efa:	30 91 78 00 	lds	r19, 0x0078
     efe:	88 0f       	add	r24, r24
     f00:	99 1f       	adc	r25, r25
     f02:	fc 01       	movw	r30, r24
     f04:	e9 51       	subi	r30, 0x19	; 25
     f06:	ff 4f       	sbci	r31, 0xFF	; 255
     f08:	31 83       	std	Z+1, r19	; 0x01
     f0a:	20 83       	st	Z, r18
    AdResult[NumberAd]>>=6;
     f0c:	80 91 80 00 	lds	r24, 0x0080
     f10:	48 2f       	mov	r20, r24
     f12:	50 e0       	ldi	r21, 0x00	; 0
     f14:	80 91 80 00 	lds	r24, 0x0080
     f18:	88 2f       	mov	r24, r24
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	88 0f       	add	r24, r24
     f1e:	99 1f       	adc	r25, r25
     f20:	fc 01       	movw	r30, r24
     f22:	e9 51       	subi	r30, 0x19	; 25
     f24:	ff 4f       	sbci	r31, 0xFF	; 255
     f26:	80 81       	ld	r24, Z
     f28:	91 81       	ldd	r25, Z+1	; 0x01
     f2a:	9c 01       	movw	r18, r24
     f2c:	00 24       	eor	r0, r0
     f2e:	22 0f       	add	r18, r18
     f30:	33 1f       	adc	r19, r19
     f32:	00 1c       	adc	r0, r0
     f34:	22 0f       	add	r18, r18
     f36:	33 1f       	adc	r19, r19
     f38:	00 1c       	adc	r0, r0
     f3a:	23 2f       	mov	r18, r19
     f3c:	30 2d       	mov	r19, r0
     f3e:	ca 01       	movw	r24, r20
     f40:	88 0f       	add	r24, r24
     f42:	99 1f       	adc	r25, r25
     f44:	fc 01       	movw	r30, r24
     f46:	e9 51       	subi	r30, 0x19	; 25
     f48:	ff 4f       	sbci	r31, 0xFF	; 255
     f4a:	31 83       	std	Z+1, r19	; 0x01
     f4c:	20 83       	st	Z, r18
    AdTemp=0;
     f4e:	10 92 78 00 	sts	0x0078, r1
     f52:	10 92 77 00 	sts	0x0077, r1
    CtAd=CtAd0+2;
     f56:	81 e4       	ldi	r24, 0x41	; 65
     f58:	80 93 d6 00 	sts	0x00D6, r24
    //if(NumberAd==11)
    NumberAd=NumberAdNew[NumberAd];
     f5c:	80 91 80 00 	lds	r24, 0x0080
     f60:	88 2f       	mov	r24, r24
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	fc 01       	movw	r30, r24
     f66:	e0 5a       	subi	r30, 0xA0	; 160
     f68:	ff 4f       	sbci	r31, 0xFF	; 255
     f6a:	80 81       	ld	r24, Z
     f6c:	80 93 80 00 	sts	0x0080, r24
  }

  RegInt0=ADMUX;
     f70:	e7 e2       	ldi	r30, 0x27	; 39
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	88 2f       	mov	r24, r24
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	9a 83       	std	Y+2, r25	; 0x02
     f7c:	89 83       	std	Y+1, r24	; 0x01
  RegInt0 &=0xe0;     //обнуление MUX4..0
     f7e:	89 81       	ldd	r24, Y+1	; 0x01
     f80:	9a 81       	ldd	r25, Y+2	; 0x02
     f82:	80 7e       	andi	r24, 0xE0	; 224
     f84:	90 70       	andi	r25, 0x00	; 0
     f86:	9a 83       	std	Y+2, r25	; 0x02
     f88:	89 83       	std	Y+1, r24	; 0x01
  RegInt0 |=NumberAd; //выставление нового адреса канала ацп
     f8a:	80 91 80 00 	lds	r24, 0x0080
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	89 81       	ldd	r24, Y+1	; 0x01
     f94:	9a 81       	ldd	r25, Y+2	; 0x02
     f96:	82 2b       	or	r24, r18
     f98:	93 2b       	or	r25, r19
     f9a:	9a 83       	std	Y+2, r25	; 0x02
     f9c:	89 83       	std	Y+1, r24	; 0x01
  ADMUX=RegInt0;
     f9e:	e7 e2       	ldi	r30, 0x27	; 39
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	89 81       	ldd	r24, Y+1	; 0x01
     fa4:	80 83       	st	Z, r24

  ADCSRA |=(1<<ADSC); //start conversion
     fa6:	a6 e2       	ldi	r26, 0x26	; 38
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	e6 e2       	ldi	r30, 0x26	; 38
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	80 64       	ori	r24, 0x40	; 64
     fb2:	8c 93       	st	X, r24
}
     fb4:	0f 90       	pop	r0
     fb6:	0f 90       	pop	r0
     fb8:	cf 91       	pop	r28
     fba:	df 91       	pop	r29
     fbc:	ff 91       	pop	r31
     fbe:	ef 91       	pop	r30
     fc0:	bf 91       	pop	r27
     fc2:	af 91       	pop	r26
     fc4:	9f 91       	pop	r25
     fc6:	8f 91       	pop	r24
     fc8:	5f 91       	pop	r21
     fca:	4f 91       	pop	r20
     fcc:	3f 91       	pop	r19
     fce:	2f 91       	pop	r18
     fd0:	0f 90       	pop	r0
     fd2:	0f be       	out	0x3f, r0	; 63
     fd4:	0f 90       	pop	r0
     fd6:	1f 90       	pop	r1
     fd8:	18 95       	reti

00000fda <__udivmodsi4>:
     fda:	a1 e2       	ldi	r26, 0x21	; 33
     fdc:	1a 2e       	mov	r1, r26
     fde:	aa 1b       	sub	r26, r26
     fe0:	bb 1b       	sub	r27, r27
     fe2:	fd 01       	movw	r30, r26
     fe4:	0d c0       	rjmp	.+26     	; 0x1000 <__udivmodsi4_ep>

00000fe6 <__udivmodsi4_loop>:
     fe6:	aa 1f       	adc	r26, r26
     fe8:	bb 1f       	adc	r27, r27
     fea:	ee 1f       	adc	r30, r30
     fec:	ff 1f       	adc	r31, r31
     fee:	a2 17       	cp	r26, r18
     ff0:	b3 07       	cpc	r27, r19
     ff2:	e4 07       	cpc	r30, r20
     ff4:	f5 07       	cpc	r31, r21
     ff6:	20 f0       	brcs	.+8      	; 0x1000 <__udivmodsi4_ep>
     ff8:	a2 1b       	sub	r26, r18
     ffa:	b3 0b       	sbc	r27, r19
     ffc:	e4 0b       	sbc	r30, r20
     ffe:	f5 0b       	sbc	r31, r21

00001000 <__udivmodsi4_ep>:
    1000:	66 1f       	adc	r22, r22
    1002:	77 1f       	adc	r23, r23
    1004:	88 1f       	adc	r24, r24
    1006:	99 1f       	adc	r25, r25
    1008:	1a 94       	dec	r1
    100a:	69 f7       	brne	.-38     	; 0xfe6 <__udivmodsi4_loop>
    100c:	60 95       	com	r22
    100e:	70 95       	com	r23
    1010:	80 95       	com	r24
    1012:	90 95       	com	r25
    1014:	9b 01       	movw	r18, r22
    1016:	ac 01       	movw	r20, r24
    1018:	bd 01       	movw	r22, r26
    101a:	cf 01       	movw	r24, r30
    101c:	08 95       	ret

0000101e <__eerd_word_m8535>:
    101e:	a8 e1       	ldi	r26, 0x18	; 24
    1020:	b0 e0       	ldi	r27, 0x00	; 0
    1022:	42 e0       	ldi	r20, 0x02	; 2
    1024:	50 e0       	ldi	r21, 0x00	; 0
    1026:	06 c0       	rjmp	.+12     	; 0x1034 <__eerd_blraw_m8535>

00001028 <__eeupd_word_m8535>:
    1028:	01 96       	adiw	r24, 0x01	; 1
    102a:	27 2f       	mov	r18, r23
    102c:	12 d0       	rcall	.+36     	; 0x1052 <__eeupd_r18_m8535>
    102e:	10 c0       	rjmp	.+32     	; 0x1050 <__eeupd_byte_m8535>

00001030 <__eerd_block_m8535>:
    1030:	dc 01       	movw	r26, r24
    1032:	cb 01       	movw	r24, r22

00001034 <__eerd_blraw_m8535>:
    1034:	fc 01       	movw	r30, r24
    1036:	e1 99       	sbic	0x1c, 1	; 28
    1038:	fe cf       	rjmp	.-4      	; 0x1036 <__eerd_blraw_m8535+0x2>
    103a:	06 c0       	rjmp	.+12     	; 0x1048 <__eerd_blraw_m8535+0x14>
    103c:	ff bb       	out	0x1f, r31	; 31
    103e:	ee bb       	out	0x1e, r30	; 30
    1040:	e0 9a       	sbi	0x1c, 0	; 28
    1042:	31 96       	adiw	r30, 0x01	; 1
    1044:	0d b2       	in	r0, 0x1d	; 29
    1046:	0d 92       	st	X+, r0
    1048:	41 50       	subi	r20, 0x01	; 1
    104a:	50 40       	sbci	r21, 0x00	; 0
    104c:	b8 f7       	brcc	.-18     	; 0x103c <__eerd_blraw_m8535+0x8>
    104e:	08 95       	ret

00001050 <__eeupd_byte_m8535>:
    1050:	26 2f       	mov	r18, r22

00001052 <__eeupd_r18_m8535>:
    1052:	e1 99       	sbic	0x1c, 1	; 28
    1054:	fe cf       	rjmp	.-4      	; 0x1052 <__eeupd_r18_m8535>
    1056:	9f bb       	out	0x1f, r25	; 31
    1058:	8e bb       	out	0x1e, r24	; 30
    105a:	e0 9a       	sbi	0x1c, 0	; 28
    105c:	01 97       	sbiw	r24, 0x01	; 1
    105e:	0d b2       	in	r0, 0x1d	; 29
    1060:	02 16       	cp	r0, r18
    1062:	31 f0       	breq	.+12     	; 0x1070 <__eeupd_r18_m8535+0x1e>
    1064:	2d bb       	out	0x1d, r18	; 29
    1066:	0f b6       	in	r0, 0x3f	; 63
    1068:	f8 94       	cli
    106a:	e2 9a       	sbi	0x1c, 2	; 28
    106c:	e1 9a       	sbi	0x1c, 1	; 28
    106e:	0f be       	out	0x3f, r0	; 63
    1070:	08 95       	ret

00001072 <_exit>:
    1072:	f8 94       	cli

00001074 <__stop_program>:
    1074:	ff cf       	rjmp	.-2      	; 0x1074 <__stop_program>
