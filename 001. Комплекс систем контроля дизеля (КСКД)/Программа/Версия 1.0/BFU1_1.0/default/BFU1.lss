
BFU1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cc0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00000cc0  00000d54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000064  0080007a  0080007a  00000d6e  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000d6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002cb  00000000  00000000  00000d8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000577  00000000  00000000  00001059  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000139  00000000  00000000  000015d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000553  00000000  00000000  00001709  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  00001c5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001fd  00000000  00000000  00001d2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	2e c0       	rjmp	.+92     	; 0x60 <__bad_interrupt>
   4:	2d c0       	rjmp	.+90     	; 0x60 <__bad_interrupt>
   6:	2c c0       	rjmp	.+88     	; 0x60 <__bad_interrupt>
   8:	2b c0       	rjmp	.+86     	; 0x60 <__bad_interrupt>
   a:	8f c4       	rjmp	.+2334   	; 0x92a <__vector_5>
   c:	29 c0       	rjmp	.+82     	; 0x60 <__bad_interrupt>
   e:	28 c0       	rjmp	.+80     	; 0x60 <__bad_interrupt>
  10:	10 c5       	rjmp	.+2592   	; 0xa32 <__vector_8>
  12:	26 c0       	rjmp	.+76     	; 0x60 <__bad_interrupt>
  14:	25 c0       	rjmp	.+74     	; 0x60 <__bad_interrupt>
  16:	24 c0       	rjmp	.+72     	; 0x60 <__bad_interrupt>
  18:	23 c0       	rjmp	.+70     	; 0x60 <__bad_interrupt>
  1a:	22 c0       	rjmp	.+68     	; 0x60 <__bad_interrupt>
  1c:	29 c5       	rjmp	.+2642   	; 0xa70 <__vector_14>
  1e:	20 c0       	rjmp	.+64     	; 0x60 <__bad_interrupt>
  20:	1f c0       	rjmp	.+62     	; 0x60 <__bad_interrupt>
  22:	1e c0       	rjmp	.+60     	; 0x60 <__bad_interrupt>
  24:	1d c0       	rjmp	.+58     	; 0x60 <__bad_interrupt>
  26:	1c c0       	rjmp	.+56     	; 0x60 <__bad_interrupt>
  28:	1b c0       	rjmp	.+54     	; 0x60 <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d2 e0       	ldi	r29, 0x02	; 2
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_copy_data>:
  36:	10 e0       	ldi	r17, 0x00	; 0
  38:	a0 e6       	ldi	r26, 0x60	; 96
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	e0 ec       	ldi	r30, 0xC0	; 192
  3e:	fc e0       	ldi	r31, 0x0C	; 12
  40:	02 c0       	rjmp	.+4      	; 0x46 <.do_copy_data_start>

00000042 <.do_copy_data_loop>:
  42:	05 90       	lpm	r0, Z+
  44:	0d 92       	st	X+, r0

00000046 <.do_copy_data_start>:
  46:	aa 37       	cpi	r26, 0x7A	; 122
  48:	b1 07       	cpc	r27, r17
  4a:	d9 f7       	brne	.-10     	; 0x42 <.do_copy_data_loop>

0000004c <__do_clear_bss>:
  4c:	10 e0       	ldi	r17, 0x00	; 0
  4e:	aa e7       	ldi	r26, 0x7A	; 122
  50:	b0 e0       	ldi	r27, 0x00	; 0
  52:	01 c0       	rjmp	.+2      	; 0x56 <.do_clear_bss_start>

00000054 <.do_clear_bss_loop>:
  54:	1d 92       	st	X+, r1

00000056 <.do_clear_bss_start>:
  56:	ae 3d       	cpi	r26, 0xDE	; 222
  58:	b1 07       	cpc	r27, r17
  5a:	e1 f7       	brne	.-8      	; 0x54 <.do_clear_bss_loop>
  5c:	11 d1       	rcall	.+546    	; 0x280 <main>
  5e:	2e c6       	rjmp	.+3164   	; 0xcbc <_exit>

00000060 <__bad_interrupt>:
  60:	cf cf       	rjmp	.-98     	; 0x0 <__vectors>

00000062 <InitAd>:
const unsigned int d1_1=114;
const unsigned int d1_4=213;
*/
/*===========================================================================================================================*/
void InitAd   (void)
{
  62:	df 93       	push	r29
  64:	cf 93       	push	r28
  66:	cd b7       	in	r28, 0x3d	; 61
  68:	de b7       	in	r29, 0x3e	; 62
  ADMUX = (1<<REFS0);                        //internal Aref with capacitor 0100 0000 (ADC0, single-ended, gain=1)
  6a:	e7 e2       	ldi	r30, 0x27	; 39
  6c:	f0 e0       	ldi	r31, 0x00	; 0
  6e:	80 e4       	ldi	r24, 0x40	; 64
  70:	80 83       	st	Z, r24
  CtAd = CtAd0;                              //63
  72:	80 91 66 00 	lds	r24, 0x0066
  76:	80 93 c2 00 	sts	0x00C2, r24
  NumberAd = 0;
  7a:	10 92 85 00 	sts	0x0085, r1
  ADCSRA = 0; 
  7e:	e6 e2       	ldi	r30, 0x26	; 38
  80:	f0 e0       	ldi	r31, 0x00	; 0
  82:	10 82       	st	Z, r1
  ADCSRA |=(1<<ADEN);                        //enable AD
  84:	a6 e2       	ldi	r26, 0x26	; 38
  86:	b0 e0       	ldi	r27, 0x00	; 0
  88:	e6 e2       	ldi	r30, 0x26	; 38
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	80 81       	ld	r24, Z
  8e:	80 68       	ori	r24, 0x80	; 128
  90:	8c 93       	st	X, r24
  ADCSRA |=(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //1/128 - 125 kHz
  92:	a6 e2       	ldi	r26, 0x26	; 38
  94:	b0 e0       	ldi	r27, 0x00	; 0
  96:	e6 e2       	ldi	r30, 0x26	; 38
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	87 60       	ori	r24, 0x07	; 7
  9e:	8c 93       	st	X, r24
  ADCSRA |=(1<<ADSC);                        //Start
  a0:	a6 e2       	ldi	r26, 0x26	; 38
  a2:	b0 e0       	ldi	r27, 0x00	; 0
  a4:	e6 e2       	ldi	r30, 0x26	; 38
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	80 64       	ori	r24, 0x40	; 64
  ac:	8c 93       	st	X, r24
}
  ae:	cf 91       	pop	r28
  b0:	df 91       	pop	r29
  b2:	08 95       	ret

000000b4 <AccountNDiz>:

void AccountNDiz(void)          //подпрограмма вычисления частоты вращения маховика коленвала дизеля
{
  b4:	df 93       	push	r29
  b6:	cf 93       	push	r28
  b8:	00 d0       	rcall	.+0      	; 0xba <AccountNDiz+0x6>
  ba:	00 d0       	rcall	.+0      	; 0xbc <AccountNDiz+0x8>
  bc:	00 d0       	rcall	.+0      	; 0xbe <AccountNDiz+0xa>
  be:	cd b7       	in	r28, 0x3d	; 61
  c0:	de b7       	in	r29, 0x3e	; 62

  unsigned long R1;             //переменная количества оборотов
  unsigned char R0;             //номер элемента массива выборок количества оборотов
  unsigned char NDiz_invalid=0; //флаг неправильной работы
  c2:	19 82       	std	Y+1, r1	; 0x01

  {
    R1=0;
  c4:	1b 82       	std	Y+3, r1	; 0x03
  c6:	1c 82       	std	Y+4, r1	; 0x04
  c8:	1d 82       	std	Y+5, r1	; 0x05
  ca:	1e 82       	std	Y+6, r1	; 0x06
    for (R0=0; R0<=15; ++R0)
  cc:	1a 82       	std	Y+2, r1	; 0x02
  ce:	38 c0       	rjmp	.+112    	; 0x140 <AccountNDiz+0x8c>
    {
      if ((TDizTemp[R0]==0xffff)||(TDizTemp[R0]==0)) NDiz_invalid=1; //выставление флага если расчет кол-ва оборотов будет неверный
  d0:	8a 81       	ldd	r24, Y+2	; 0x02
  d2:	88 2f       	mov	r24, r24
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	88 0f       	add	r24, r24
  d8:	99 1f       	adc	r25, r25
  da:	fc 01       	movw	r30, r24
  dc:	e1 57       	subi	r30, 0x71	; 113
  de:	ff 4f       	sbci	r31, 0xFF	; 255
  e0:	80 81       	ld	r24, Z
  e2:	91 81       	ldd	r25, Z+1	; 0x01
  e4:	2f ef       	ldi	r18, 0xFF	; 255
  e6:	8f 3f       	cpi	r24, 0xFF	; 255
  e8:	92 07       	cpc	r25, r18
  ea:	61 f0       	breq	.+24     	; 0x104 <AccountNDiz+0x50>
  ec:	8a 81       	ldd	r24, Y+2	; 0x02
  ee:	88 2f       	mov	r24, r24
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	88 0f       	add	r24, r24
  f4:	99 1f       	adc	r25, r25
  f6:	fc 01       	movw	r30, r24
  f8:	e1 57       	subi	r30, 0x71	; 113
  fa:	ff 4f       	sbci	r31, 0xFF	; 255
  fc:	80 81       	ld	r24, Z
  fe:	91 81       	ldd	r25, Z+1	; 0x01
 100:	00 97       	sbiw	r24, 0x00	; 0
 102:	11 f4       	brne	.+4      	; 0x108 <AccountNDiz+0x54>
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	89 83       	std	Y+1, r24	; 0x01
      R1+=TDizTemp[R0]; //суммирование всех 16 выборок
 108:	8a 81       	ldd	r24, Y+2	; 0x02
 10a:	88 2f       	mov	r24, r24
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	fc 01       	movw	r30, r24
 114:	e1 57       	subi	r30, 0x71	; 113
 116:	ff 4f       	sbci	r31, 0xFF	; 255
 118:	80 81       	ld	r24, Z
 11a:	91 81       	ldd	r25, Z+1	; 0x01
 11c:	9c 01       	movw	r18, r24
 11e:	40 e0       	ldi	r20, 0x00	; 0
 120:	50 e0       	ldi	r21, 0x00	; 0
 122:	8b 81       	ldd	r24, Y+3	; 0x03
 124:	9c 81       	ldd	r25, Y+4	; 0x04
 126:	ad 81       	ldd	r26, Y+5	; 0x05
 128:	be 81       	ldd	r27, Y+6	; 0x06
 12a:	82 0f       	add	r24, r18
 12c:	93 1f       	adc	r25, r19
 12e:	a4 1f       	adc	r26, r20
 130:	b5 1f       	adc	r27, r21
 132:	8b 83       	std	Y+3, r24	; 0x03
 134:	9c 83       	std	Y+4, r25	; 0x04
 136:	ad 83       	std	Y+5, r26	; 0x05
 138:	be 83       	std	Y+6, r27	; 0x06
  unsigned char R0;             //номер элемента массива выборок количества оборотов
  unsigned char NDiz_invalid=0; //флаг неправильной работы

  {
    R1=0;
    for (R0=0; R0<=15; ++R0)
 13a:	8a 81       	ldd	r24, Y+2	; 0x02
 13c:	8f 5f       	subi	r24, 0xFF	; 255
 13e:	8a 83       	std	Y+2, r24	; 0x02
 140:	8a 81       	ldd	r24, Y+2	; 0x02
 142:	80 31       	cpi	r24, 0x10	; 16
 144:	28 f2       	brcs	.-118    	; 0xd0 <AccountNDiz+0x1c>
    {
      if ((TDizTemp[R0]==0xffff)||(TDizTemp[R0]==0)) NDiz_invalid=1; //выставление флага если расчет кол-ва оборотов будет неверный
      R1+=TDizTemp[R0]; //суммирование всех 16 выборок
    }
    R1>>=4; //вычисление среднего значения
 146:	8b 81       	ldd	r24, Y+3	; 0x03
 148:	9c 81       	ldd	r25, Y+4	; 0x04
 14a:	ad 81       	ldd	r26, Y+5	; 0x05
 14c:	be 81       	ldd	r27, Y+6	; 0x06
 14e:	68 94       	set
 150:	13 f8       	bld	r1, 3
 152:	b6 95       	lsr	r27
 154:	a7 95       	ror	r26
 156:	97 95       	ror	r25
 158:	87 95       	ror	r24
 15a:	16 94       	lsr	r1
 15c:	d1 f7       	brne	.-12     	; 0x152 <AccountNDiz+0x9e>
 15e:	8b 83       	std	Y+3, r24	; 0x03
 160:	9c 83       	std	Y+4, r25	; 0x04
 162:	ad 83       	std	Y+5, r26	; 0x05
 164:	be 83       	std	Y+6, r27	; 0x06
    if ((R1>62330)||(NDiz_Overflow==1)) // если результат больше 62330 или установлен флаг переполнения, то обороты = 0
 166:	8b 81       	ldd	r24, Y+3	; 0x03
 168:	9c 81       	ldd	r25, Y+4	; 0x04
 16a:	ad 81       	ldd	r26, Y+5	; 0x05
 16c:	be 81       	ldd	r27, Y+6	; 0x06
 16e:	8b 37       	cpi	r24, 0x7B	; 123
 170:	23 ef       	ldi	r18, 0xF3	; 243
 172:	92 07       	cpc	r25, r18
 174:	20 e0       	ldi	r18, 0x00	; 0
 176:	a2 07       	cpc	r26, r18
 178:	20 e0       	ldi	r18, 0x00	; 0
 17a:	b2 07       	cpc	r27, r18
 17c:	20 f4       	brcc	.+8      	; 0x186 <AccountNDiz+0xd2>
 17e:	80 91 7a 00 	lds	r24, 0x007A
 182:	81 30       	cpi	r24, 0x01	; 1
 184:	29 f4       	brne	.+10     	; 0x190 <AccountNDiz+0xdc>
      NDiz=0;
 186:	10 92 b6 00 	sts	0x00B6, r1
 18a:	10 92 b5 00 	sts	0x00B5, r1
 18e:	33 c0       	rjmp	.+102    	; 0x1f6 <AccountNDiz+0x142>

    else
    {
      if (!NDiz_invalid)
 190:	89 81       	ldd	r24, Y+1	; 0x01
 192:	88 23       	and	r24, r24
 194:	c9 f4       	brne	.+50     	; 0x1c8 <AccountNDiz+0x114>
      {
        R1=8421000/R1;  //R1 = 62330 - 140 оборотов в минуту или 2,33(3) в сек
 196:	88 e8       	ldi	r24, 0x88	; 136
 198:	9e e7       	ldi	r25, 0x7E	; 126
 19a:	a0 e8       	ldi	r26, 0x80	; 128
 19c:	b0 e0       	ldi	r27, 0x00	; 0
 19e:	2b 81       	ldd	r18, Y+3	; 0x03
 1a0:	3c 81       	ldd	r19, Y+4	; 0x04
 1a2:	4d 81       	ldd	r20, Y+5	; 0x05
 1a4:	5e 81       	ldd	r21, Y+6	; 0x06
 1a6:	bc 01       	movw	r22, r24
 1a8:	cd 01       	movw	r24, r26
 1aa:	66 d5       	rcall	.+2764   	; 0xc78 <__udivmodsi4>
 1ac:	da 01       	movw	r26, r20
 1ae:	c9 01       	movw	r24, r18
 1b0:	8b 83       	std	Y+3, r24	; 0x03
 1b2:	9c 83       	std	Y+4, r25	; 0x04
 1b4:	ad 83       	std	Y+5, r26	; 0x05
 1b6:	be 83       	std	Y+6, r27	; 0x06
        NDiz=R1;
 1b8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ba:	9c 81       	ldd	r25, Y+4	; 0x04
 1bc:	90 93 b6 00 	sts	0x00B6, r25
 1c0:	80 93 b5 00 	sts	0x00B5, r24
        InvCounter=0; //обнуление счетчика инвалидности
 1c4:	10 92 83 00 	sts	0x0083, r1
      }		//R1 = 2909 - 3000оборотов в минуту или 50 в секунду
      if (NDiz_invalid)
 1c8:	89 81       	ldd	r24, Y+1	; 0x01
 1ca:	88 23       	and	r24, r24
 1cc:	a1 f0       	breq	.+40     	; 0x1f6 <AccountNDiz+0x142>
      {
        InvCounter++;
 1ce:	80 91 83 00 	lds	r24, 0x0083
 1d2:	8f 5f       	subi	r24, 0xFF	; 255
 1d4:	80 93 83 00 	sts	0x0083, r24
        if (InvCounter>=10)
 1d8:	80 91 83 00 	lds	r24, 0x0083
 1dc:	8a 30       	cpi	r24, 0x0A	; 10
 1de:	58 f0       	brcs	.+22     	; 0x1f6 <AccountNDiz+0x142>
        {
          if (InvCounter>=250) InvCounter = 4; //колцевание
 1e0:	80 91 83 00 	lds	r24, 0x0083
 1e4:	8a 3f       	cpi	r24, 0xFA	; 250
 1e6:	18 f0       	brcs	.+6      	; 0x1ee <AccountNDiz+0x13a>
 1e8:	84 e0       	ldi	r24, 0x04	; 4
 1ea:	80 93 83 00 	sts	0x0083, r24
          NDiz = 0;
 1ee:	10 92 b6 00 	sts	0x00B6, r1
 1f2:	10 92 b5 00 	sts	0x00B5, r1
            //таймер досчитывает до 5614
            //коэффициент деления=

    }
  }
}
 1f6:	26 96       	adiw	r28, 0x06	; 6
 1f8:	0f b6       	in	r0, 0x3f	; 63
 1fa:	f8 94       	cli
 1fc:	de bf       	out	0x3e, r29	; 62
 1fe:	0f be       	out	0x3f, r0	; 63
 200:	cd bf       	out	0x3d, r28	; 61
 202:	cf 91       	pop	r28
 204:	df 91       	pop	r29
 206:	08 95       	ret

00000208 <AccountDd1>:

void AccountDd1   (void)
{
 208:	df 93       	push	r29
 20a:	cf 93       	push	r28
 20c:	cd b7       	in	r28, 0x3d	; 61
 20e:	de b7       	in	r29, 0x3e	; 62
  Dd1=AdResult[0];
 210:	80 91 c5 00 	lds	r24, 0x00C5
 214:	90 91 c6 00 	lds	r25, 0x00C6
 218:	90 93 b3 00 	sts	0x00B3, r25
 21c:	80 93 b2 00 	sts	0x00B2, r24
}
 220:	cf 91       	pop	r28
 222:	df 91       	pop	r29
 224:	08 95       	ret

00000226 <AccountDt4>:

void AccountDt4   (void)
{
 226:	df 93       	push	r29
 228:	cf 93       	push	r28
 22a:	cd b7       	in	r28, 0x3d	; 61
 22c:	de b7       	in	r29, 0x3e	; 62
  Dt4=AdResult[1];
 22e:	80 91 c7 00 	lds	r24, 0x00C7
 232:	90 91 c8 00 	lds	r25, 0x00C8
 236:	90 93 c1 00 	sts	0x00C1, r25
 23a:	80 93 c0 00 	sts	0x00C0, r24
}
 23e:	cf 91       	pop	r28
 240:	df 91       	pop	r29
 242:	08 95       	ret

00000244 <AccountDt5>:

void AccountDt5   (void)
{
 244:	df 93       	push	r29
 246:	cf 93       	push	r28
 248:	cd b7       	in	r28, 0x3d	; 61
 24a:	de b7       	in	r29, 0x3e	; 62
  Dt5=AdResult[2];
 24c:	80 91 c9 00 	lds	r24, 0x00C9
 250:	90 91 ca 00 	lds	r25, 0x00CA
 254:	90 93 81 00 	sts	0x0081, r25
 258:	80 93 80 00 	sts	0x0080, r24
}
 25c:	cf 91       	pop	r28
 25e:	df 91       	pop	r29
 260:	08 95       	ret

00000262 <AccountDt6>:
void AccountDt6   (void)
{
 262:	df 93       	push	r29
 264:	cf 93       	push	r28
 266:	cd b7       	in	r28, 0x3d	; 61
 268:	de b7       	in	r29, 0x3e	; 62
  Dt6=AdResult[3];
 26a:	80 91 cb 00 	lds	r24, 0x00CB
 26e:	90 91 cc 00 	lds	r25, 0x00CC
 272:	90 93 88 00 	sts	0x0088, r25
 276:	80 93 87 00 	sts	0x0087, r24
}
 27a:	cf 91       	pop	r28
 27c:	df 91       	pop	r29
 27e:	08 95       	ret

00000280 <main>:
/*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/

int main(void)
{
 280:	df 93       	push	r29
 282:	cf 93       	push	r28
 284:	00 d0       	rcall	.+0      	; 0x286 <main+0x6>
 286:	00 d0       	rcall	.+0      	; 0x288 <main+0x8>
 288:	0f 92       	push	r0
 28a:	cd b7       	in	r28, 0x3d	; 61
 28c:	de b7       	in	r29, 0x3e	; 62
  DDRA = 0;            //ALL inputs
 28e:	ea e3       	ldi	r30, 0x3A	; 58
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	10 82       	st	Z, r1
  PORTA = 0;
 294:	eb e3       	ldi	r30, 0x3B	; 59
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	10 82       	st	Z, r1

  DDRB = 0xFF;
 29a:	e7 e3       	ldi	r30, 0x37	; 55
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	8f ef       	ldi	r24, 0xFF	; 255
 2a0:	80 83       	st	Z, r24
  PORTB |= 0xFF;
 2a2:	e8 e3       	ldi	r30, 0x38	; 56
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	20 81       	ld	r18, Z
 2a8:	e8 e3       	ldi	r30, 0x38	; 56
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	8f ef       	ldi	r24, 0xFF	; 255
 2ae:	80 83       	st	Z, r24

  DDRC = 0xFF;
 2b0:	e4 e3       	ldi	r30, 0x34	; 52
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	8f ef       	ldi	r24, 0xFF	; 255
 2b6:	80 83       	st	Z, r24
  PORTC |= 0xFF;
 2b8:	e5 e3       	ldi	r30, 0x35	; 53
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	40 81       	ld	r20, Z
 2be:	e5 e3       	ldi	r30, 0x35	; 53
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
 2c2:	8f ef       	ldi	r24, 0xFF	; 255
 2c4:	80 83       	st	Z, r24

  DDRD = 0xBF;         //PD6 - Input
 2c6:	e1 e3       	ldi	r30, 0x31	; 49
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	8f eb       	ldi	r24, 0xBF	; 191
 2cc:	80 83       	st	Z, r24
  PORTD = 0xFF;        //transmit=off
 2ce:	e2 e3       	ldi	r30, 0x32	; 50
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
 2d2:	8f ef       	ldi	r24, 0xFF	; 255
 2d4:	80 83       	st	Z, r24

  _WDR();
 2d6:	a8 95       	wdr

  InitAd();
 2d8:	c4 de       	rcall	.-632    	; 0x62 <InitAd>
  ADCSRA |= (1<<ADIE); //enable AD interrupt
 2da:	a6 e2       	ldi	r26, 0x26	; 38
 2dc:	b0 e0       	ldi	r27, 0x00	; 0
 2de:	e6 e2       	ldi	r30, 0x26	; 38
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	80 81       	ld	r24, Z
 2e4:	88 60       	ori	r24, 0x08	; 8
 2e6:	8c 93       	st	X, r24
  sei();               //enable global interrupt
 2e8:	78 94       	sei
 
  SPCR = 0;            // disable SPI
 2ea:	ed e2       	ldi	r30, 0x2D	; 45
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	10 82       	st	Z, r1
  SPSR = 0;            
 2f0:	ee e2       	ldi	r30, 0x2E	; 46
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	10 82       	st	Z, r1


  TIMSK = TIMSK|0x20;  //enable Int capture1
 2f6:	a9 e5       	ldi	r26, 0x59	; 89
 2f8:	b0 e0       	ldi	r27, 0x00	; 0
 2fa:	e9 e5       	ldi	r30, 0x59	; 89
 2fc:	f0 e0       	ldi	r31, 0x00	; 0
 2fe:	80 81       	ld	r24, Z
 300:	80 62       	ori	r24, 0x20	; 32
 302:	8c 93       	st	X, r24
  TCCR1B = 0xc1;       //0.0625mkc
 304:	ee e4       	ldi	r30, 0x4E	; 78
 306:	f0 e0       	ldi	r31, 0x00	; 0
 308:	81 ec       	ldi	r24, 0xC1	; 193
 30a:	80 83       	st	Z, r24
  // noise canceller enable input capture select=1
  // prescaler source=001
  TIMSK = TIMSK|0x4;   //enable Int overlowT1
 30c:	a9 e5       	ldi	r26, 0x59	; 89
 30e:	b0 e0       	ldi	r27, 0x00	; 0
 310:	e9 e5       	ldi	r30, 0x59	; 89
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	80 81       	ld	r24, Z
 316:	84 60       	ori	r24, 0x04	; 4
 318:	8c 93       	st	X, r24

  TCCR2 = 1;           //2 timer Clock select=001
 31a:	e5 e4       	ldi	r30, 0x45	; 69
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	80 83       	st	Z, r24
  TCNT2 = 5;           //4000mks значение таймера 2
 322:	e4 e4       	ldi	r30, 0x44	; 68
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	85 e0       	ldi	r24, 0x05	; 5
 328:	80 83       	st	Z, r24
  TIFR |= 0x40;        //T2 overflow flag=1 output compare=0
 32a:	a8 e5       	ldi	r26, 0x58	; 88
 32c:	b0 e0       	ldi	r27, 0x00	; 0
 32e:	e8 e5       	ldi	r30, 0x58	; 88
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	80 81       	ld	r24, Z
 334:	80 64       	ori	r24, 0x40	; 64
 336:	8c 93       	st	X, r24

  Dt4_8=0, Dt4_30=0; Dt4_37=0; Dt5_37=0; Dt5_95=0; Dt5_118=0, Dt6_115=0;
 338:	10 92 c3 00 	sts	0x00C3, r1
 33c:	10 92 8e 00 	sts	0x008E, r1
 340:	10 92 86 00 	sts	0x0086, r1
 344:	10 92 b4 00 	sts	0x00B4, r1
 348:	10 92 b1 00 	sts	0x00B1, r1
 34c:	10 92 c4 00 	sts	0x00C4, r1
 350:	10 92 7c 00 	sts	0x007C, r1
  Dd1_1=0, Dd1_4=0; 
 354:	10 92 82 00 	sts	0x0082, r1
 358:	10 92 8d 00 	sts	0x008D, r1
  Nd_500=0; Nd_1450=0; Nd_1750=0;
 35c:	10 92 dd 00 	sts	0x00DD, r1
 360:	10 92 b8 00 	sts	0x00B8, r1
 364:	10 92 8a 00 	sts	0x008A, r1

  NDiz=0;
 368:	10 92 b6 00 	sts	0x00B6, r1
 36c:	10 92 b5 00 	sts	0x00B5, r1
  CtTDiz=15;
 370:	8f e0       	ldi	r24, 0x0F	; 15
 372:	80 93 89 00 	sts	0x0089, r24
  InvCounter=0;
 376:	10 92 83 00 	sts	0x0083, r1
  RegWait=30000;       //старое значение - 300 //Вернуть!!
 37a:	80 e3       	ldi	r24, 0x30	; 48
 37c:	95 e7       	ldi	r25, 0x75	; 117
 37e:	90 93 b0 00 	sts	0x00B0, r25
 382:	80 93 af 00 	sts	0x00AF, r24
 386:	01 c0       	rjmp	.+2      	; 0x38a <main+0x10a>
  while (RegWait--)
    _WDR();
 388:	a8 95       	wdr

  NDiz=0;
  CtTDiz=15;
  InvCounter=0;
  RegWait=30000;       //старое значение - 300 //Вернуть!!
  while (RegWait--)
 38a:	80 91 af 00 	lds	r24, 0x00AF
 38e:	90 91 b0 00 	lds	r25, 0x00B0
 392:	9b 83       	std	Y+3, r25	; 0x03
 394:	8a 83       	std	Y+2, r24	; 0x02
 396:	19 82       	std	Y+1, r1	; 0x01
 398:	4a 81       	ldd	r20, Y+2	; 0x02
 39a:	5b 81       	ldd	r21, Y+3	; 0x03
 39c:	41 15       	cp	r20, r1
 39e:	51 05       	cpc	r21, r1
 3a0:	11 f0       	breq	.+4      	; 0x3a6 <main+0x126>
 3a2:	51 e0       	ldi	r21, 0x01	; 1
 3a4:	59 83       	std	Y+1, r21	; 0x01
 3a6:	8a 81       	ldd	r24, Y+2	; 0x02
 3a8:	9b 81       	ldd	r25, Y+3	; 0x03
 3aa:	01 97       	sbiw	r24, 0x01	; 1
 3ac:	90 93 b0 00 	sts	0x00B0, r25
 3b0:	80 93 af 00 	sts	0x00AF, r24
 3b4:	89 81       	ldd	r24, Y+1	; 0x01
 3b6:	88 23       	and	r24, r24
 3b8:	39 f7       	brne	.-50     	; 0x388 <main+0x108>


  /*Work program*/
  while (1)
  {
    _WDR();
 3ba:	a8 95       	wdr
    AccountDd1();
 3bc:	25 df       	rcall	.-438    	; 0x208 <AccountDd1>
    AccountDt4();
 3be:	33 df       	rcall	.-410    	; 0x226 <AccountDt4>
    AccountDt5();
 3c0:	41 df       	rcall	.-382    	; 0x244 <AccountDt5>
    AccountDt6();
 3c2:	4f df       	rcall	.-354    	; 0x262 <AccountDt6>
    AccountNDiz();
 3c4:	77 de       	rcall	.-786    	; 0xb4 <AccountNDiz>
	Условия задания флагов по порогу 500.
	Если число оборотов маховика коленвала дизеля больше или равно 500 и флаг датчика частоты оборотов был сброшен (означает,
	что число оборотов было менше 500), то установить флаг датчика частоты оборотов (означает превышение порога 500).
	Если число оборотов меньше 400 и флаг датчика частоты оборотов был установлен, то сбросить флаг датчика частоты оборотов.
*/
    if ((NDiz>=500)&&(!Nd_500))              Nd_500=1;  //100 оборотов гистерезис
 3c6:	80 91 b5 00 	lds	r24, 0x00B5
 3ca:	90 91 b6 00 	lds	r25, 0x00B6
 3ce:	21 e0       	ldi	r18, 0x01	; 1
 3d0:	84 3f       	cpi	r24, 0xF4	; 244
 3d2:	92 07       	cpc	r25, r18
 3d4:	38 f0       	brcs	.+14     	; 0x3e4 <main+0x164>
 3d6:	80 91 dd 00 	lds	r24, 0x00DD
 3da:	88 23       	and	r24, r24
 3dc:	19 f4       	brne	.+6      	; 0x3e4 <main+0x164>
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	80 93 dd 00 	sts	0x00DD, r24
    if ((NDiz<400)&&(Nd_500))                Nd_500=0;
 3e4:	80 91 b5 00 	lds	r24, 0x00B5
 3e8:	90 91 b6 00 	lds	r25, 0x00B6
 3ec:	41 e0       	ldi	r20, 0x01	; 1
 3ee:	80 39       	cpi	r24, 0x90	; 144
 3f0:	94 07       	cpc	r25, r20
 3f2:	30 f4       	brcc	.+12     	; 0x400 <main+0x180>
 3f4:	80 91 dd 00 	lds	r24, 0x00DD
 3f8:	88 23       	and	r24, r24
 3fa:	11 f0       	breq	.+4      	; 0x400 <main+0x180>
 3fc:	10 92 dd 00 	sts	0x00DD, r1

    if ((NDiz>=1450)&&(!Nd_1450))            Nd_1450=1;
 400:	80 91 b5 00 	lds	r24, 0x00B5
 404:	90 91 b6 00 	lds	r25, 0x00B6
 408:	55 e0       	ldi	r21, 0x05	; 5
 40a:	8a 3a       	cpi	r24, 0xAA	; 170
 40c:	95 07       	cpc	r25, r21
 40e:	38 f0       	brcs	.+14     	; 0x41e <main+0x19e>
 410:	80 91 b8 00 	lds	r24, 0x00B8
 414:	88 23       	and	r24, r24
 416:	19 f4       	brne	.+6      	; 0x41e <main+0x19e>
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	80 93 b8 00 	sts	0x00B8, r24
    if ((NDiz<1350)&&(Nd_1450))              Nd_1450=0;
 41e:	80 91 b5 00 	lds	r24, 0x00B5
 422:	90 91 b6 00 	lds	r25, 0x00B6
 426:	25 e0       	ldi	r18, 0x05	; 5
 428:	86 34       	cpi	r24, 0x46	; 70
 42a:	92 07       	cpc	r25, r18
 42c:	30 f4       	brcc	.+12     	; 0x43a <main+0x1ba>
 42e:	80 91 b8 00 	lds	r24, 0x00B8
 432:	88 23       	and	r24, r24
 434:	11 f0       	breq	.+4      	; 0x43a <main+0x1ba>
 436:	10 92 b8 00 	sts	0x00B8, r1

    if ((NDiz>=1750)&&(!Nd_1750))            Nd_1750=1;
 43a:	80 91 b5 00 	lds	r24, 0x00B5
 43e:	90 91 b6 00 	lds	r25, 0x00B6
 442:	46 e0       	ldi	r20, 0x06	; 6
 444:	86 3d       	cpi	r24, 0xD6	; 214
 446:	94 07       	cpc	r25, r20
 448:	38 f0       	brcs	.+14     	; 0x458 <main+0x1d8>
 44a:	80 91 8a 00 	lds	r24, 0x008A
 44e:	88 23       	and	r24, r24
 450:	19 f4       	brne	.+6      	; 0x458 <main+0x1d8>
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	80 93 8a 00 	sts	0x008A, r24
    if ((NDiz<1650)&&(Nd_1750))              Nd_1750=0; 
 458:	80 91 b5 00 	lds	r24, 0x00B5
 45c:	90 91 b6 00 	lds	r25, 0x00B6
 460:	56 e0       	ldi	r21, 0x06	; 6
 462:	82 37       	cpi	r24, 0x72	; 114
 464:	95 07       	cpc	r25, r21
 466:	30 f4       	brcc	.+12     	; 0x474 <main+0x1f4>
 468:	80 91 8a 00 	lds	r24, 0x008A
 46c:	88 23       	and	r24, r24
 46e:	11 f0       	breq	.+4      	; 0x474 <main+0x1f4>
 470:	10 92 8a 00 	sts	0x008A, r1
	Если значение датчика давления стало больше или равно 1 кг/см^2 и флаг датчика давления по порогу 1 был сброшен (означает,
	что значение датчика давления было до этого меньше 1 кг/см^2), то установить флаг датчика давления по порогу 1 (означает 
	превышение порога 1).
	Если значение датчика давления стало меньше 1 кг/см^2 и флаг датчика давления по порогу 1 был установлен, то флаг сбросить.
*/
    if ((Dd1>=d1_1)&&(!Dd1_1))               Dd1_1=1;   //выше 1 кг/см кв определить пределы направление срабатывания - вверх
 474:	20 91 b2 00 	lds	r18, 0x00B2
 478:	30 91 b3 00 	lds	r19, 0x00B3
 47c:	80 91 75 00 	lds	r24, 0x0075
 480:	90 91 76 00 	lds	r25, 0x0076
 484:	28 17       	cp	r18, r24
 486:	39 07       	cpc	r19, r25
 488:	38 f0       	brcs	.+14     	; 0x498 <main+0x218>
 48a:	80 91 82 00 	lds	r24, 0x0082
 48e:	88 23       	and	r24, r24
 490:	19 f4       	brne	.+6      	; 0x498 <main+0x218>
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	80 93 82 00 	sts	0x0082, r24
    if ((Dd1<d1_1-Hyst_p)&&(Dd1_1))          Dd1_1=0;   //ниже 1 кг/см кв
 498:	20 91 75 00 	lds	r18, 0x0075
 49c:	30 91 76 00 	lds	r19, 0x0076
 4a0:	80 91 61 00 	lds	r24, 0x0061
 4a4:	88 2f       	mov	r24, r24
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	28 1b       	sub	r18, r24
 4aa:	39 0b       	sbc	r19, r25
 4ac:	80 91 b2 00 	lds	r24, 0x00B2
 4b0:	90 91 b3 00 	lds	r25, 0x00B3
 4b4:	82 17       	cp	r24, r18
 4b6:	93 07       	cpc	r25, r19
 4b8:	30 f4       	brcc	.+12     	; 0x4c6 <main+0x246>
 4ba:	80 91 82 00 	lds	r24, 0x0082
 4be:	88 23       	and	r24, r24
 4c0:	11 f0       	breq	.+4      	; 0x4c6 <main+0x246>
 4c2:	10 92 82 00 	sts	0x0082, r1

    if ((Dd1>=d1_4+Hyst_p)&&(!Dd1_4))        Dd1_4=1;   //выше 4 кг/см кв определить пределы
 4c6:	80 91 61 00 	lds	r24, 0x0061
 4ca:	28 2f       	mov	r18, r24
 4cc:	30 e0       	ldi	r19, 0x00	; 0
 4ce:	80 91 77 00 	lds	r24, 0x0077
 4d2:	90 91 78 00 	lds	r25, 0x0078
 4d6:	28 0f       	add	r18, r24
 4d8:	39 1f       	adc	r19, r25
 4da:	80 91 b2 00 	lds	r24, 0x00B2
 4de:	90 91 b3 00 	lds	r25, 0x00B3
 4e2:	82 17       	cp	r24, r18
 4e4:	93 07       	cpc	r25, r19
 4e6:	38 f0       	brcs	.+14     	; 0x4f6 <main+0x276>
 4e8:	80 91 8d 00 	lds	r24, 0x008D
 4ec:	88 23       	and	r24, r24
 4ee:	19 f4       	brne	.+6      	; 0x4f6 <main+0x276>
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	80 93 8d 00 	sts	0x008D, r24
    if ((Dd1<d1_4)&&(Dd1_4))                 Dd1_4=0;   //ниже 4 кг/см кв определить пределы 10 - гистерезис вниз направление срабатывания - вниз
 4f6:	20 91 b2 00 	lds	r18, 0x00B2
 4fa:	30 91 b3 00 	lds	r19, 0x00B3
 4fe:	80 91 77 00 	lds	r24, 0x0077
 502:	90 91 78 00 	lds	r25, 0x0078
 506:	28 17       	cp	r18, r24
 508:	39 07       	cpc	r19, r25
 50a:	30 f4       	brcc	.+12     	; 0x518 <main+0x298>
 50c:	80 91 8d 00 	lds	r24, 0x008D
 510:	88 23       	and	r24, r24
 512:	11 f0       	breq	.+4      	; 0x518 <main+0x298>
 514:	10 92 8d 00 	sts	0x008D, r1
	Если значение датчика температуры стало больше или равно 8'С, учитывая гистерезис и флаг датчика 4 по порогу 8 был сброшен
	(означает, что значение датчика температуры было до этого меньше 8'С), то установить флаг датчика 4 по порогу 8 (означает
	превышение порога 8).
	Если значение датчика температуры стало меньше 8'С и флаг датчика 4 по порогу 8 был установлен, то флаг сбросить.
*/
    if ((Dt4<=t4_8-Hyst_t)&&(!Dt4_8))        Dt4_8=1;   //выше 9.5 градусов направление срабатывания - вверх
 518:	20 91 67 00 	lds	r18, 0x0067
 51c:	30 91 68 00 	lds	r19, 0x0068
 520:	80 91 60 00 	lds	r24, 0x0060
 524:	88 2f       	mov	r24, r24
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	28 1b       	sub	r18, r24
 52a:	39 0b       	sbc	r19, r25
 52c:	80 91 c0 00 	lds	r24, 0x00C0
 530:	90 91 c1 00 	lds	r25, 0x00C1
 534:	28 17       	cp	r18, r24
 536:	39 07       	cpc	r19, r25
 538:	38 f0       	brcs	.+14     	; 0x548 <main+0x2c8>
 53a:	80 91 c3 00 	lds	r24, 0x00C3
 53e:	88 23       	and	r24, r24
 540:	19 f4       	brne	.+6      	; 0x548 <main+0x2c8>
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	80 93 c3 00 	sts	0x00C3, r24
    if ((Dt4>(t4_8))&&(Dt4_8))               Dt4_8=0;   //ниже 8 градусов
 548:	20 91 c0 00 	lds	r18, 0x00C0
 54c:	30 91 c1 00 	lds	r19, 0x00C1
 550:	80 91 67 00 	lds	r24, 0x0067
 554:	90 91 68 00 	lds	r25, 0x0068
 558:	82 17       	cp	r24, r18
 55a:	93 07       	cpc	r25, r19
 55c:	30 f4       	brcc	.+12     	; 0x56a <main+0x2ea>
 55e:	80 91 c3 00 	lds	r24, 0x00C3
 562:	88 23       	and	r24, r24
 564:	11 f0       	breq	.+4      	; 0x56a <main+0x2ea>
 566:	10 92 c3 00 	sts	0x00C3, r1

    if ((Dt4<=(t4_30-Hyst_t))&&(!Dt4_30))    Dt4_30=1;  //выше 31.25 градусов
 56a:	20 91 69 00 	lds	r18, 0x0069
 56e:	30 91 6a 00 	lds	r19, 0x006A
 572:	80 91 60 00 	lds	r24, 0x0060
 576:	88 2f       	mov	r24, r24
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	28 1b       	sub	r18, r24
 57c:	39 0b       	sbc	r19, r25
 57e:	80 91 c0 00 	lds	r24, 0x00C0
 582:	90 91 c1 00 	lds	r25, 0x00C1
 586:	28 17       	cp	r18, r24
 588:	39 07       	cpc	r19, r25
 58a:	38 f0       	brcs	.+14     	; 0x59a <main+0x31a>
 58c:	80 91 8e 00 	lds	r24, 0x008E
 590:	88 23       	and	r24, r24
 592:	19 f4       	brne	.+6      	; 0x59a <main+0x31a>
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	80 93 8e 00 	sts	0x008E, r24
    if ((Dt4>(t4_30))&&(Dt4_30))             Dt4_30=0;  //ниже 30 градусов - гистерезис направление срабатывания - вверх
 59a:	20 91 c0 00 	lds	r18, 0x00C0
 59e:	30 91 c1 00 	lds	r19, 0x00C1
 5a2:	80 91 69 00 	lds	r24, 0x0069
 5a6:	90 91 6a 00 	lds	r25, 0x006A
 5aa:	82 17       	cp	r24, r18
 5ac:	93 07       	cpc	r25, r19
 5ae:	30 f4       	brcc	.+12     	; 0x5bc <main+0x33c>
 5b0:	80 91 8e 00 	lds	r24, 0x008E
 5b4:	88 23       	and	r24, r24
 5b6:	11 f0       	breq	.+4      	; 0x5bc <main+0x33c>
 5b8:	10 92 8e 00 	sts	0x008E, r1

    if ((Dt4<=t4_37)&&(!Dt4_37))             Dt4_37=1;  //выше 37.0 градусов
 5bc:	20 91 c0 00 	lds	r18, 0x00C0
 5c0:	30 91 c1 00 	lds	r19, 0x00C1
 5c4:	80 91 6b 00 	lds	r24, 0x006B
 5c8:	90 91 6c 00 	lds	r25, 0x006C
 5cc:	82 17       	cp	r24, r18
 5ce:	93 07       	cpc	r25, r19
 5d0:	38 f0       	brcs	.+14     	; 0x5e0 <main+0x360>
 5d2:	80 91 86 00 	lds	r24, 0x0086
 5d6:	88 23       	and	r24, r24
 5d8:	19 f4       	brne	.+6      	; 0x5e0 <main+0x360>
 5da:	81 e0       	ldi	r24, 0x01	; 1
 5dc:	80 93 86 00 	sts	0x0086, r24
    if ((Dt4>(t4_37+Hyst_t))&&(Dt4_37))      Dt4_37=0;  //ниже 36,8 градусов направление срабатывания - вниз
 5e0:	80 91 60 00 	lds	r24, 0x0060
 5e4:	28 2f       	mov	r18, r24
 5e6:	30 e0       	ldi	r19, 0x00	; 0
 5e8:	80 91 6b 00 	lds	r24, 0x006B
 5ec:	90 91 6c 00 	lds	r25, 0x006C
 5f0:	28 0f       	add	r18, r24
 5f2:	39 1f       	adc	r19, r25
 5f4:	80 91 c0 00 	lds	r24, 0x00C0
 5f8:	90 91 c1 00 	lds	r25, 0x00C1
 5fc:	28 17       	cp	r18, r24
 5fe:	39 07       	cpc	r19, r25
 600:	30 f4       	brcc	.+12     	; 0x60e <main+0x38e>
 602:	80 91 86 00 	lds	r24, 0x0086
 606:	88 23       	and	r24, r24
 608:	11 f0       	breq	.+4      	; 0x60e <main+0x38e>
 60a:	10 92 86 00 	sts	0x0086, r1

    if ((Dt5<=t5_37-(Hyst_t+20))&&(!Dt5_37)) Dt5_37=1;  //выше 44.5 градусов
 60e:	20 91 6d 00 	lds	r18, 0x006D
 612:	30 91 6e 00 	lds	r19, 0x006E
 616:	80 91 60 00 	lds	r24, 0x0060
 61a:	88 2f       	mov	r24, r24
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	a9 01       	movw	r20, r18
 620:	48 1b       	sub	r20, r24
 622:	59 0b       	sbc	r21, r25
 624:	ca 01       	movw	r24, r20
 626:	9c 01       	movw	r18, r24
 628:	24 51       	subi	r18, 0x14	; 20
 62a:	30 40       	sbci	r19, 0x00	; 0
 62c:	80 91 80 00 	lds	r24, 0x0080
 630:	90 91 81 00 	lds	r25, 0x0081
 634:	28 17       	cp	r18, r24
 636:	39 07       	cpc	r19, r25
 638:	38 f0       	brcs	.+14     	; 0x648 <main+0x3c8>
 63a:	80 91 b4 00 	lds	r24, 0x00B4
 63e:	88 23       	and	r24, r24
 640:	19 f4       	brne	.+6      	; 0x648 <main+0x3c8>
 642:	81 e0       	ldi	r24, 0x01	; 1
 644:	80 93 b4 00 	sts	0x00B4, r24
    if ((Dt5>(t5_37))&&(Dt5_37))             Dt5_37=0;  //ниже 37 градусов направление срабатывания - вверх
 648:	20 91 80 00 	lds	r18, 0x0080
 64c:	30 91 81 00 	lds	r19, 0x0081
 650:	80 91 6d 00 	lds	r24, 0x006D
 654:	90 91 6e 00 	lds	r25, 0x006E
 658:	82 17       	cp	r24, r18
 65a:	93 07       	cpc	r25, r19
 65c:	30 f4       	brcc	.+12     	; 0x66a <main+0x3ea>
 65e:	80 91 b4 00 	lds	r24, 0x00B4
 662:	88 23       	and	r24, r24
 664:	11 f0       	breq	.+4      	; 0x66a <main+0x3ea>
 666:	10 92 b4 00 	sts	0x00B4, r1

    if ((Dt5<=t5_95)&&(!Dt5_95))             Dt5_95=1;  //выше 95 градусов
 66a:	20 91 80 00 	lds	r18, 0x0080
 66e:	30 91 81 00 	lds	r19, 0x0081
 672:	80 91 6f 00 	lds	r24, 0x006F
 676:	90 91 70 00 	lds	r25, 0x0070
 67a:	82 17       	cp	r24, r18
 67c:	93 07       	cpc	r25, r19
 67e:	38 f0       	brcs	.+14     	; 0x68e <main+0x40e>
 680:	80 91 b1 00 	lds	r24, 0x00B1
 684:	88 23       	and	r24, r24
 686:	19 f4       	brne	.+6      	; 0x68e <main+0x40e>
 688:	81 e0       	ldi	r24, 0x01	; 1
 68a:	80 93 b1 00 	sts	0x00B1, r24
    if ((Dt5>(t5_95+Hyst_t))&&(Dt5_95))      Dt5_95=0;  //ниже 93.5 градусов направление срабатывания - вверх
 68e:	80 91 60 00 	lds	r24, 0x0060
 692:	28 2f       	mov	r18, r24
 694:	30 e0       	ldi	r19, 0x00	; 0
 696:	80 91 6f 00 	lds	r24, 0x006F
 69a:	90 91 70 00 	lds	r25, 0x0070
 69e:	28 0f       	add	r18, r24
 6a0:	39 1f       	adc	r19, r25
 6a2:	80 91 80 00 	lds	r24, 0x0080
 6a6:	90 91 81 00 	lds	r25, 0x0081
 6aa:	28 17       	cp	r18, r24
 6ac:	39 07       	cpc	r19, r25
 6ae:	30 f4       	brcc	.+12     	; 0x6bc <main+0x43c>
 6b0:	80 91 b1 00 	lds	r24, 0x00B1
 6b4:	88 23       	and	r24, r24
 6b6:	11 f0       	breq	.+4      	; 0x6bc <main+0x43c>
 6b8:	10 92 b1 00 	sts	0x00B1, r1

    if ((Dt5<=t5_118)&&(!Dt5_118))           Dt5_118=1; //выше 118 градусов
 6bc:	20 91 80 00 	lds	r18, 0x0080
 6c0:	30 91 81 00 	lds	r19, 0x0081
 6c4:	80 91 73 00 	lds	r24, 0x0073
 6c8:	90 91 74 00 	lds	r25, 0x0074
 6cc:	82 17       	cp	r24, r18
 6ce:	93 07       	cpc	r25, r19
 6d0:	38 f0       	brcs	.+14     	; 0x6e0 <main+0x460>
 6d2:	80 91 c4 00 	lds	r24, 0x00C4
 6d6:	88 23       	and	r24, r24
 6d8:	19 f4       	brne	.+6      	; 0x6e0 <main+0x460>
 6da:	81 e0       	ldi	r24, 0x01	; 1
 6dc:	80 93 c4 00 	sts	0x00C4, r24
    if ((Dt5>(t5_118+Hyst_t))&&(Dt5_118))    Dt5_118=0; //ниже 116.5 градусов направление срабатывания - вверх
 6e0:	80 91 60 00 	lds	r24, 0x0060
 6e4:	28 2f       	mov	r18, r24
 6e6:	30 e0       	ldi	r19, 0x00	; 0
 6e8:	80 91 73 00 	lds	r24, 0x0073
 6ec:	90 91 74 00 	lds	r25, 0x0074
 6f0:	28 0f       	add	r18, r24
 6f2:	39 1f       	adc	r19, r25
 6f4:	80 91 80 00 	lds	r24, 0x0080
 6f8:	90 91 81 00 	lds	r25, 0x0081
 6fc:	28 17       	cp	r18, r24
 6fe:	39 07       	cpc	r19, r25
 700:	30 f4       	brcc	.+12     	; 0x70e <main+0x48e>
 702:	80 91 c4 00 	lds	r24, 0x00C4
 706:	88 23       	and	r24, r24
 708:	11 f0       	breq	.+4      	; 0x70e <main+0x48e>
 70a:	10 92 c4 00 	sts	0x00C4, r1

    if ((Dt6<=t6_115)&&(!Dt6_115))           Dt6_115=1; //выше 115 градусов
 70e:	20 91 87 00 	lds	r18, 0x0087
 712:	30 91 88 00 	lds	r19, 0x0088
 716:	80 91 71 00 	lds	r24, 0x0071
 71a:	90 91 72 00 	lds	r25, 0x0072
 71e:	82 17       	cp	r24, r18
 720:	93 07       	cpc	r25, r19
 722:	38 f0       	brcs	.+14     	; 0x732 <main+0x4b2>
 724:	80 91 7c 00 	lds	r24, 0x007C
 728:	88 23       	and	r24, r24
 72a:	19 f4       	brne	.+6      	; 0x732 <main+0x4b2>
 72c:	81 e0       	ldi	r24, 0x01	; 1
 72e:	80 93 7c 00 	sts	0x007C, r24
    if ((Dt6>(t6_115+Hyst_t))&&(Dt6_115))    Dt6_115=0; //ниже 113.5 градусов направление срабатывания - вверх
 732:	80 91 60 00 	lds	r24, 0x0060
 736:	28 2f       	mov	r18, r24
 738:	30 e0       	ldi	r19, 0x00	; 0
 73a:	80 91 71 00 	lds	r24, 0x0071
 73e:	90 91 72 00 	lds	r25, 0x0072
 742:	28 0f       	add	r18, r24
 744:	39 1f       	adc	r19, r25
 746:	80 91 87 00 	lds	r24, 0x0087
 74a:	90 91 88 00 	lds	r25, 0x0088
 74e:	28 17       	cp	r18, r24
 750:	39 07       	cpc	r19, r25
 752:	30 f4       	brcc	.+12     	; 0x760 <main+0x4e0>
 754:	80 91 7c 00 	lds	r24, 0x007C
 758:	88 23       	and	r24, r24
 75a:	11 f0       	breq	.+4      	; 0x760 <main+0x4e0>
 75c:	10 92 7c 00 	sts	0x007C, r1

//  Объявление портов и задание их логики (светодиодная индикация):
    if (!Nd_500)  PORTD &= ~(1<<PORTD2); else PORTD |= (1<<PORTD2); //PD2 - выше 500
 760:	80 91 dd 00 	lds	r24, 0x00DD
 764:	88 23       	and	r24, r24
 766:	41 f4       	brne	.+16     	; 0x778 <main+0x4f8>
 768:	a2 e3       	ldi	r26, 0x32	; 50
 76a:	b0 e0       	ldi	r27, 0x00	; 0
 76c:	e2 e3       	ldi	r30, 0x32	; 50
 76e:	f0 e0       	ldi	r31, 0x00	; 0
 770:	80 81       	ld	r24, Z
 772:	8b 7f       	andi	r24, 0xFB	; 251
 774:	8c 93       	st	X, r24
 776:	07 c0       	rjmp	.+14     	; 0x786 <main+0x506>
 778:	a2 e3       	ldi	r26, 0x32	; 50
 77a:	b0 e0       	ldi	r27, 0x00	; 0
 77c:	e2 e3       	ldi	r30, 0x32	; 50
 77e:	f0 e0       	ldi	r31, 0x00	; 0
 780:	80 81       	ld	r24, Z
 782:	84 60       	ori	r24, 0x04	; 4
 784:	8c 93       	st	X, r24
    if (!Nd_1450) PORTD &= ~(1<<PORTD4); else PORTD |= (1<<PORTD4); //PD4 - выше 1450
 786:	80 91 b8 00 	lds	r24, 0x00B8
 78a:	88 23       	and	r24, r24
 78c:	41 f4       	brne	.+16     	; 0x79e <main+0x51e>
 78e:	a2 e3       	ldi	r26, 0x32	; 50
 790:	b0 e0       	ldi	r27, 0x00	; 0
 792:	e2 e3       	ldi	r30, 0x32	; 50
 794:	f0 e0       	ldi	r31, 0x00	; 0
 796:	80 81       	ld	r24, Z
 798:	8f 7e       	andi	r24, 0xEF	; 239
 79a:	8c 93       	st	X, r24
 79c:	07 c0       	rjmp	.+14     	; 0x7ac <main+0x52c>
 79e:	a2 e3       	ldi	r26, 0x32	; 50
 7a0:	b0 e0       	ldi	r27, 0x00	; 0
 7a2:	e2 e3       	ldi	r30, 0x32	; 50
 7a4:	f0 e0       	ldi	r31, 0x00	; 0
 7a6:	80 81       	ld	r24, Z
 7a8:	80 61       	ori	r24, 0x10	; 16
 7aa:	8c 93       	st	X, r24
    if (Nd_1750)  PORTC &= ~(1<<PORTC5); else PORTC |= (1<<PORTC5); //PC5 - выше 1750
 7ac:	80 91 8a 00 	lds	r24, 0x008A
 7b0:	88 23       	and	r24, r24
 7b2:	41 f0       	breq	.+16     	; 0x7c4 <main+0x544>
 7b4:	a5 e3       	ldi	r26, 0x35	; 53
 7b6:	b0 e0       	ldi	r27, 0x00	; 0
 7b8:	e5 e3       	ldi	r30, 0x35	; 53
 7ba:	f0 e0       	ldi	r31, 0x00	; 0
 7bc:	80 81       	ld	r24, Z
 7be:	8f 7d       	andi	r24, 0xDF	; 223
 7c0:	8c 93       	st	X, r24
 7c2:	07 c0       	rjmp	.+14     	; 0x7d2 <main+0x552>
 7c4:	a5 e3       	ldi	r26, 0x35	; 53
 7c6:	b0 e0       	ldi	r27, 0x00	; 0
 7c8:	e5 e3       	ldi	r30, 0x35	; 53
 7ca:	f0 e0       	ldi	r31, 0x00	; 0
 7cc:	80 81       	ld	r24, Z
 7ce:	80 62       	ori	r24, 0x20	; 32
 7d0:	8c 93       	st	X, r24

    if (!Dd1_1)   PORTD &= ~(1<<PORTD0); else PORTD |= (1<<PORTD0); //PD0 - выше 1 кг
 7d2:	80 91 82 00 	lds	r24, 0x0082
 7d6:	88 23       	and	r24, r24
 7d8:	41 f4       	brne	.+16     	; 0x7ea <main+0x56a>
 7da:	a2 e3       	ldi	r26, 0x32	; 50
 7dc:	b0 e0       	ldi	r27, 0x00	; 0
 7de:	e2 e3       	ldi	r30, 0x32	; 50
 7e0:	f0 e0       	ldi	r31, 0x00	; 0
 7e2:	80 81       	ld	r24, Z
 7e4:	8e 7f       	andi	r24, 0xFE	; 254
 7e6:	8c 93       	st	X, r24
 7e8:	07 c0       	rjmp	.+14     	; 0x7f8 <main+0x578>
 7ea:	a2 e3       	ldi	r26, 0x32	; 50
 7ec:	b0 e0       	ldi	r27, 0x00	; 0
 7ee:	e2 e3       	ldi	r30, 0x32	; 50
 7f0:	f0 e0       	ldi	r31, 0x00	; 0
 7f2:	80 81       	ld	r24, Z
 7f4:	81 60       	ori	r24, 0x01	; 1
 7f6:	8c 93       	st	X, r24
    if (Dd1_4)    PORTD &= ~(1<<PORTD1); else PORTD |= (1<<PORTD1); //PD1 - ниже 4 кг
 7f8:	80 91 8d 00 	lds	r24, 0x008D
 7fc:	88 23       	and	r24, r24
 7fe:	41 f0       	breq	.+16     	; 0x810 <main+0x590>
 800:	a2 e3       	ldi	r26, 0x32	; 50
 802:	b0 e0       	ldi	r27, 0x00	; 0
 804:	e2 e3       	ldi	r30, 0x32	; 50
 806:	f0 e0       	ldi	r31, 0x00	; 0
 808:	80 81       	ld	r24, Z
 80a:	8d 7f       	andi	r24, 0xFD	; 253
 80c:	8c 93       	st	X, r24
 80e:	07 c0       	rjmp	.+14     	; 0x81e <main+0x59e>
 810:	a2 e3       	ldi	r26, 0x32	; 50
 812:	b0 e0       	ldi	r27, 0x00	; 0
 814:	e2 e3       	ldi	r30, 0x32	; 50
 816:	f0 e0       	ldi	r31, 0x00	; 0
 818:	80 81       	ld	r24, Z
 81a:	82 60       	ori	r24, 0x02	; 2
 81c:	8c 93       	st	X, r24

    if (!Dt4_8)   PORTD &= ~(1<<PORTD5); else PORTD |= (1<<PORTD5); //PD5 - выше 8 град
 81e:	80 91 c3 00 	lds	r24, 0x00C3
 822:	88 23       	and	r24, r24
 824:	41 f4       	brne	.+16     	; 0x836 <main+0x5b6>
 826:	a2 e3       	ldi	r26, 0x32	; 50
 828:	b0 e0       	ldi	r27, 0x00	; 0
 82a:	e2 e3       	ldi	r30, 0x32	; 50
 82c:	f0 e0       	ldi	r31, 0x00	; 0
 82e:	80 81       	ld	r24, Z
 830:	8f 7d       	andi	r24, 0xDF	; 223
 832:	8c 93       	st	X, r24
 834:	07 c0       	rjmp	.+14     	; 0x844 <main+0x5c4>
 836:	a2 e3       	ldi	r26, 0x32	; 50
 838:	b0 e0       	ldi	r27, 0x00	; 0
 83a:	e2 e3       	ldi	r30, 0x32	; 50
 83c:	f0 e0       	ldi	r31, 0x00	; 0
 83e:	80 81       	ld	r24, Z
 840:	80 62       	ori	r24, 0x20	; 32
 842:	8c 93       	st	X, r24
    if (Dt4_30)   PORTD &= ~(1<<PORTD3); else PORTD |= (1<<PORTD3); //PD3 - ниже 30 град
 844:	80 91 8e 00 	lds	r24, 0x008E
 848:	88 23       	and	r24, r24
 84a:	41 f0       	breq	.+16     	; 0x85c <main+0x5dc>
 84c:	a2 e3       	ldi	r26, 0x32	; 50
 84e:	b0 e0       	ldi	r27, 0x00	; 0
 850:	e2 e3       	ldi	r30, 0x32	; 50
 852:	f0 e0       	ldi	r31, 0x00	; 0
 854:	80 81       	ld	r24, Z
 856:	87 7f       	andi	r24, 0xF7	; 247
 858:	8c 93       	st	X, r24
 85a:	07 c0       	rjmp	.+14     	; 0x86a <main+0x5ea>
 85c:	a2 e3       	ldi	r26, 0x32	; 50
 85e:	b0 e0       	ldi	r27, 0x00	; 0
 860:	e2 e3       	ldi	r30, 0x32	; 50
 862:	f0 e0       	ldi	r31, 0x00	; 0
 864:	80 81       	ld	r24, Z
 866:	88 60       	ori	r24, 0x08	; 8
 868:	8c 93       	st	X, r24
    if (!Dt4_37)  PORTC &= ~(1<<PORTC2); else PORTC |= (1<<PORTC2); //PС2 - ниже 37 град 37+красн
 86a:	80 91 86 00 	lds	r24, 0x0086
 86e:	88 23       	and	r24, r24
 870:	41 f4       	brne	.+16     	; 0x882 <main+0x602>
 872:	a5 e3       	ldi	r26, 0x35	; 53
 874:	b0 e0       	ldi	r27, 0x00	; 0
 876:	e5 e3       	ldi	r30, 0x35	; 53
 878:	f0 e0       	ldi	r31, 0x00	; 0
 87a:	80 81       	ld	r24, Z
 87c:	8b 7f       	andi	r24, 0xFB	; 251
 87e:	8c 93       	st	X, r24
 880:	07 c0       	rjmp	.+14     	; 0x890 <main+0x610>
 882:	a5 e3       	ldi	r26, 0x35	; 53
 884:	b0 e0       	ldi	r27, 0x00	; 0
 886:	e5 e3       	ldi	r30, 0x35	; 53
 888:	f0 e0       	ldi	r31, 0x00	; 0
 88a:	80 81       	ld	r24, Z
 88c:	84 60       	ori	r24, 0x04	; 4
 88e:	8c 93       	st	X, r24

    if (Dt5_37)   PORTC &= ~(1<<PORTC4); else PORTC |= (1<<PORTC4); //PC4 - выше 45 град зеленый
 890:	80 91 b4 00 	lds	r24, 0x00B4
 894:	88 23       	and	r24, r24
 896:	41 f0       	breq	.+16     	; 0x8a8 <main+0x628>
 898:	a5 e3       	ldi	r26, 0x35	; 53
 89a:	b0 e0       	ldi	r27, 0x00	; 0
 89c:	e5 e3       	ldi	r30, 0x35	; 53
 89e:	f0 e0       	ldi	r31, 0x00	; 0
 8a0:	80 81       	ld	r24, Z
 8a2:	8f 7e       	andi	r24, 0xEF	; 239
 8a4:	8c 93       	st	X, r24
 8a6:	07 c0       	rjmp	.+14     	; 0x8b6 <main+0x636>
 8a8:	a5 e3       	ldi	r26, 0x35	; 53
 8aa:	b0 e0       	ldi	r27, 0x00	; 0
 8ac:	e5 e3       	ldi	r30, 0x35	; 53
 8ae:	f0 e0       	ldi	r31, 0x00	; 0
 8b0:	80 81       	ld	r24, Z
 8b2:	80 61       	ori	r24, 0x10	; 16
 8b4:	8c 93       	st	X, r24
    if (!Dt5_95)  PORTC &= ~(1<<PORTC0); else PORTC |= (1<<PORTC0); //PC0 - выше 95 град
 8b6:	80 91 b1 00 	lds	r24, 0x00B1
 8ba:	88 23       	and	r24, r24
 8bc:	41 f4       	brne	.+16     	; 0x8ce <main+0x64e>
 8be:	a5 e3       	ldi	r26, 0x35	; 53
 8c0:	b0 e0       	ldi	r27, 0x00	; 0
 8c2:	e5 e3       	ldi	r30, 0x35	; 53
 8c4:	f0 e0       	ldi	r31, 0x00	; 0
 8c6:	80 81       	ld	r24, Z
 8c8:	8e 7f       	andi	r24, 0xFE	; 254
 8ca:	8c 93       	st	X, r24
 8cc:	07 c0       	rjmp	.+14     	; 0x8dc <main+0x65c>
 8ce:	a5 e3       	ldi	r26, 0x35	; 53
 8d0:	b0 e0       	ldi	r27, 0x00	; 0
 8d2:	e5 e3       	ldi	r30, 0x35	; 53
 8d4:	f0 e0       	ldi	r31, 0x00	; 0
 8d6:	80 81       	ld	r24, Z
 8d8:	81 60       	ori	r24, 0x01	; 1
 8da:	8c 93       	st	X, r24

    if (Dt5_118)  PORTC &= ~(1<<PORTC1); else PORTC |= (1<<PORTC1); //PC1 - выше 118 град логика работы 118гр.
 8dc:	80 91 c4 00 	lds	r24, 0x00C4
 8e0:	88 23       	and	r24, r24
 8e2:	41 f0       	breq	.+16     	; 0x8f4 <main+0x674>
 8e4:	a5 e3       	ldi	r26, 0x35	; 53
 8e6:	b0 e0       	ldi	r27, 0x00	; 0
 8e8:	e5 e3       	ldi	r30, 0x35	; 53
 8ea:	f0 e0       	ldi	r31, 0x00	; 0
 8ec:	80 81       	ld	r24, Z
 8ee:	8d 7f       	andi	r24, 0xFD	; 253
 8f0:	8c 93       	st	X, r24
 8f2:	07 c0       	rjmp	.+14     	; 0x902 <main+0x682>
 8f4:	a5 e3       	ldi	r26, 0x35	; 53
 8f6:	b0 e0       	ldi	r27, 0x00	; 0
 8f8:	e5 e3       	ldi	r30, 0x35	; 53
 8fa:	f0 e0       	ldi	r31, 0x00	; 0
 8fc:	80 81       	ld	r24, Z
 8fe:	82 60       	ori	r24, 0x02	; 2
 900:	8c 93       	st	X, r24
    if (Dt6_115)  PORTC &= ~(1<<PORTC3); else PORTC |= (1<<PORTC3); //PС3 - выше 115 град и 115 гр. инверсная
 902:	80 91 7c 00 	lds	r24, 0x007C
 906:	88 23       	and	r24, r24
 908:	41 f0       	breq	.+16     	; 0x91a <main+0x69a>
 90a:	a5 e3       	ldi	r26, 0x35	; 53
 90c:	b0 e0       	ldi	r27, 0x00	; 0
 90e:	e5 e3       	ldi	r30, 0x35	; 53
 910:	f0 e0       	ldi	r31, 0x00	; 0
 912:	80 81       	ld	r24, Z
 914:	87 7f       	andi	r24, 0xF7	; 247
 916:	8c 93       	st	X, r24
 918:	50 cd       	rjmp	.-1376   	; 0x3ba <main+0x13a>
 91a:	a5 e3       	ldi	r26, 0x35	; 53
 91c:	b0 e0       	ldi	r27, 0x00	; 0
 91e:	e5 e3       	ldi	r30, 0x35	; 53
 920:	f0 e0       	ldi	r31, 0x00	; 0
 922:	80 81       	ld	r24, Z
 924:	88 60       	ori	r24, 0x08	; 8
 926:	8c 93       	st	X, r24
 928:	48 cd       	rjmp	.-1392   	; 0x3ba <main+0x13a>

0000092a <__vector_5>:
  }
}

SIGNAL(SIG_INPUT_CAPTURE1)
{
 92a:	1f 92       	push	r1
 92c:	0f 92       	push	r0
 92e:	0f b6       	in	r0, 0x3f	; 63
 930:	0f 92       	push	r0
 932:	11 24       	eor	r1, r1
 934:	2f 93       	push	r18
 936:	3f 93       	push	r19
 938:	4f 93       	push	r20
 93a:	5f 93       	push	r21
 93c:	8f 93       	push	r24
 93e:	9f 93       	push	r25
 940:	ef 93       	push	r30
 942:	ff 93       	push	r31
 944:	df 93       	push	r29
 946:	cf 93       	push	r28
 948:	cd b7       	in	r28, 0x3d	; 61
 94a:	de b7       	in	r29, 0x3e	; 62

  ICR1_value=ICR1; //чтение значения как можно раньше
 94c:	e6 e4       	ldi	r30, 0x46	; 70
 94e:	f0 e0       	ldi	r31, 0x00	; 0
 950:	80 81       	ld	r24, Z
 952:	91 81       	ldd	r25, Z+1	; 0x01
 954:	90 93 bb 00 	sts	0x00BB, r25
 958:	80 93 ba 00 	sts	0x00BA, r24

  if ((ICR1_value>ICR1Old)&&(CtOverLow==16))
 95c:	20 91 ba 00 	lds	r18, 0x00BA
 960:	30 91 bb 00 	lds	r19, 0x00BB
 964:	80 91 8b 00 	lds	r24, 0x008B
 968:	90 91 8c 00 	lds	r25, 0x008C
 96c:	82 17       	cp	r24, r18
 96e:	93 07       	cpc	r25, r19
 970:	08 f0       	brcs	.+2      	; 0x974 <__vector_5+0x4a>
 972:	43 c0       	rjmp	.+134    	; 0x9fa <__vector_5+0xd0>
 974:	80 91 84 00 	lds	r24, 0x0084
 978:	80 31       	cpi	r24, 0x10	; 16
 97a:	09 f0       	breq	.+2      	; 0x97e <__vector_5+0x54>
 97c:	3e c0       	rjmp	.+124    	; 0x9fa <__vector_5+0xd0>
  {
    TDizTemp[CtTDiz]=ICR1_value-ICR1Old; //разница между двумя измерениями
 97e:	80 91 89 00 	lds	r24, 0x0089
 982:	48 2f       	mov	r20, r24
 984:	50 e0       	ldi	r21, 0x00	; 0
 986:	20 91 ba 00 	lds	r18, 0x00BA
 98a:	30 91 bb 00 	lds	r19, 0x00BB
 98e:	80 91 8b 00 	lds	r24, 0x008B
 992:	90 91 8c 00 	lds	r25, 0x008C
 996:	28 1b       	sub	r18, r24
 998:	39 0b       	sbc	r19, r25
 99a:	ca 01       	movw	r24, r20
 99c:	88 0f       	add	r24, r24
 99e:	99 1f       	adc	r25, r25
 9a0:	fc 01       	movw	r30, r24
 9a2:	e1 57       	subi	r30, 0x71	; 113
 9a4:	ff 4f       	sbci	r31, 0xFF	; 255
 9a6:	31 83       	std	Z+1, r19	; 0x01
 9a8:	20 83       	st	Z, r18
    if (TDizTemp[CtTDiz]<100)
 9aa:	80 91 89 00 	lds	r24, 0x0089
 9ae:	88 2f       	mov	r24, r24
 9b0:	90 e0       	ldi	r25, 0x00	; 0
 9b2:	88 0f       	add	r24, r24
 9b4:	99 1f       	adc	r25, r25
 9b6:	fc 01       	movw	r30, r24
 9b8:	e1 57       	subi	r30, 0x71	; 113
 9ba:	ff 4f       	sbci	r31, 0xFF	; 255
 9bc:	80 81       	ld	r24, Z
 9be:	91 81       	ldd	r25, Z+1	; 0x01
 9c0:	84 36       	cpi	r24, 0x64	; 100
 9c2:	91 05       	cpc	r25, r1
 9c4:	68 f4       	brcc	.+26     	; 0x9e0 <__vector_5+0xb6>
      TDizTemp[CtTDiz]=0xffff; //FFFF - невозможное значение
 9c6:	80 91 89 00 	lds	r24, 0x0089
 9ca:	88 2f       	mov	r24, r24
 9cc:	90 e0       	ldi	r25, 0x00	; 0
 9ce:	88 0f       	add	r24, r24
 9d0:	99 1f       	adc	r25, r25
 9d2:	fc 01       	movw	r30, r24
 9d4:	e1 57       	subi	r30, 0x71	; 113
 9d6:	ff 4f       	sbci	r31, 0xFF	; 255
 9d8:	8f ef       	ldi	r24, 0xFF	; 255
 9da:	9f ef       	ldi	r25, 0xFF	; 255
 9dc:	91 83       	std	Z+1, r25	; 0x01
 9de:	80 83       	st	Z, r24

    if (CtTDiz)
 9e0:	80 91 89 00 	lds	r24, 0x0089
 9e4:	88 23       	and	r24, r24
 9e6:	31 f0       	breq	.+12     	; 0x9f4 <__vector_5+0xca>
      --CtTDiz;
 9e8:	80 91 89 00 	lds	r24, 0x0089
 9ec:	81 50       	subi	r24, 0x01	; 1
 9ee:	80 93 89 00 	sts	0x0089, r24
 9f2:	03 c0       	rjmp	.+6      	; 0x9fa <__vector_5+0xd0>
    else
      CtTDiz=15; //16 выборок
 9f4:	8f e0       	ldi	r24, 0x0F	; 15
 9f6:	80 93 89 00 	sts	0x0089, r24
  }
  ICR1Old=ICR1_value;
 9fa:	80 91 ba 00 	lds	r24, 0x00BA
 9fe:	90 91 bb 00 	lds	r25, 0x00BB
 a02:	90 93 8c 00 	sts	0x008C, r25
 a06:	80 93 8b 00 	sts	0x008B, r24
  CtOverLow=16; //16 - переполнений до установки флага 0 оборотов.
 a0a:	80 e1       	ldi	r24, 0x10	; 16
 a0c:	80 93 84 00 	sts	0x0084, r24
  NDiz_Overflow=0;
 a10:	10 92 7a 00 	sts	0x007A, r1

}
 a14:	cf 91       	pop	r28
 a16:	df 91       	pop	r29
 a18:	ff 91       	pop	r31
 a1a:	ef 91       	pop	r30
 a1c:	9f 91       	pop	r25
 a1e:	8f 91       	pop	r24
 a20:	5f 91       	pop	r21
 a22:	4f 91       	pop	r20
 a24:	3f 91       	pop	r19
 a26:	2f 91       	pop	r18
 a28:	0f 90       	pop	r0
 a2a:	0f be       	out	0x3f, r0	; 63
 a2c:	0f 90       	pop	r0
 a2e:	1f 90       	pop	r1
 a30:	18 95       	reti

00000a32 <__vector_8>:

SIGNAL(SIG_OVERFLOW1)/*4.096 Mc = 65536*0.0625us*/
{
 a32:	1f 92       	push	r1
 a34:	0f 92       	push	r0
 a36:	0f b6       	in	r0, 0x3f	; 63
 a38:	0f 92       	push	r0
 a3a:	11 24       	eor	r1, r1
 a3c:	8f 93       	push	r24
 a3e:	df 93       	push	r29
 a40:	cf 93       	push	r28
 a42:	cd b7       	in	r28, 0x3d	; 61
 a44:	de b7       	in	r29, 0x3e	; 62
  if (CtOverLow) //16 переполнений до установки флага переполнения NDiz_Overflow)
 a46:	80 91 84 00 	lds	r24, 0x0084
 a4a:	88 23       	and	r24, r24
 a4c:	31 f0       	breq	.+12     	; 0xa5a <__vector_8+0x28>
    CtOverLow--;
 a4e:	80 91 84 00 	lds	r24, 0x0084
 a52:	81 50       	subi	r24, 0x01	; 1
 a54:	80 93 84 00 	sts	0x0084, r24
 a58:	03 c0       	rjmp	.+6      	; 0xa60 <__vector_8+0x2e>
  else NDiz_Overflow=1;
 a5a:	81 e0       	ldi	r24, 0x01	; 1
 a5c:	80 93 7a 00 	sts	0x007A, r24
}
 a60:	cf 91       	pop	r28
 a62:	df 91       	pop	r29
 a64:	8f 91       	pop	r24
 a66:	0f 90       	pop	r0
 a68:	0f be       	out	0x3f, r0	; 63
 a6a:	0f 90       	pop	r0
 a6c:	1f 90       	pop	r1
 a6e:	18 95       	reti

00000a70 <__vector_14>:


SIGNAL(SIG_ADC)
{
 a70:	1f 92       	push	r1
 a72:	0f 92       	push	r0
 a74:	0f b6       	in	r0, 0x3f	; 63
 a76:	0f 92       	push	r0
 a78:	11 24       	eor	r1, r1
 a7a:	2f 93       	push	r18
 a7c:	3f 93       	push	r19
 a7e:	4f 93       	push	r20
 a80:	5f 93       	push	r21
 a82:	8f 93       	push	r24
 a84:	9f 93       	push	r25
 a86:	af 93       	push	r26
 a88:	bf 93       	push	r27
 a8a:	ef 93       	push	r30
 a8c:	ff 93       	push	r31
 a8e:	df 93       	push	r29
 a90:	cf 93       	push	r28
 a92:	00 d0       	rcall	.+0      	; 0xa94 <__vector_14+0x24>
 a94:	cd b7       	in	r28, 0x3d	; 61
 a96:	de b7       	in	r29, 0x3e	; 62
  unsigned int RegInt0;
  RegInt0=ADC;
 a98:	e4 e2       	ldi	r30, 0x24	; 36
 a9a:	f0 e0       	ldi	r31, 0x00	; 0
 a9c:	80 81       	ld	r24, Z
 a9e:	91 81       	ldd	r25, Z+1	; 0x01
 aa0:	9a 83       	std	Y+2, r25	; 0x02
 aa2:	89 83       	std	Y+1, r24	; 0x01

  if (CtAd)
 aa4:	80 91 c2 00 	lds	r24, 0x00C2
 aa8:	88 23       	and	r24, r24
 aaa:	c9 f0       	breq	.+50     	; 0xade <__vector_14+0x6e>
  {
    --CtAd; //64 измерения
 aac:	80 91 c2 00 	lds	r24, 0x00C2
 ab0:	81 50       	subi	r24, 0x01	; 1
 ab2:	80 93 c2 00 	sts	0x00C2, r24
    if (CtAd<=CtAd0)
 ab6:	90 91 c2 00 	lds	r25, 0x00C2
 aba:	80 91 66 00 	lds	r24, 0x0066
 abe:	89 17       	cp	r24, r25
 ac0:	08 f4       	brcc	.+2      	; 0xac4 <__vector_14+0x54>
 ac2:	50 c0       	rjmp	.+160    	; 0xb64 <__vector_14+0xf4>
    {
      AdTemp +=RegInt0;
 ac4:	80 91 7d 00 	lds	r24, 0x007D
 ac8:	90 91 7e 00 	lds	r25, 0x007E
 acc:	29 81       	ldd	r18, Y+1	; 0x01
 ace:	3a 81       	ldd	r19, Y+2	; 0x02
 ad0:	82 0f       	add	r24, r18
 ad2:	93 1f       	adc	r25, r19
 ad4:	90 93 7e 00 	sts	0x007E, r25
 ad8:	80 93 7d 00 	sts	0x007D, r24
 adc:	43 c0       	rjmp	.+134    	; 0xb64 <__vector_14+0xf4>
    }
  }
  else
  {
    AdResult[NumberAd]=AdTemp;
 ade:	80 91 85 00 	lds	r24, 0x0085
 ae2:	88 2f       	mov	r24, r24
 ae4:	90 e0       	ldi	r25, 0x00	; 0
 ae6:	20 91 7d 00 	lds	r18, 0x007D
 aea:	30 91 7e 00 	lds	r19, 0x007E
 aee:	88 0f       	add	r24, r24
 af0:	99 1f       	adc	r25, r25
 af2:	fc 01       	movw	r30, r24
 af4:	eb 53       	subi	r30, 0x3B	; 59
 af6:	ff 4f       	sbci	r31, 0xFF	; 255
 af8:	31 83       	std	Z+1, r19	; 0x01
 afa:	20 83       	st	Z, r18
    AdResult[NumberAd]>>=6;
 afc:	80 91 85 00 	lds	r24, 0x0085
 b00:	48 2f       	mov	r20, r24
 b02:	50 e0       	ldi	r21, 0x00	; 0
 b04:	80 91 85 00 	lds	r24, 0x0085
 b08:	88 2f       	mov	r24, r24
 b0a:	90 e0       	ldi	r25, 0x00	; 0
 b0c:	88 0f       	add	r24, r24
 b0e:	99 1f       	adc	r25, r25
 b10:	fc 01       	movw	r30, r24
 b12:	eb 53       	subi	r30, 0x3B	; 59
 b14:	ff 4f       	sbci	r31, 0xFF	; 255
 b16:	80 81       	ld	r24, Z
 b18:	91 81       	ldd	r25, Z+1	; 0x01
 b1a:	9c 01       	movw	r18, r24
 b1c:	00 24       	eor	r0, r0
 b1e:	22 0f       	add	r18, r18
 b20:	33 1f       	adc	r19, r19
 b22:	00 1c       	adc	r0, r0
 b24:	22 0f       	add	r18, r18
 b26:	33 1f       	adc	r19, r19
 b28:	00 1c       	adc	r0, r0
 b2a:	23 2f       	mov	r18, r19
 b2c:	30 2d       	mov	r19, r0
 b2e:	ca 01       	movw	r24, r20
 b30:	88 0f       	add	r24, r24
 b32:	99 1f       	adc	r25, r25
 b34:	fc 01       	movw	r30, r24
 b36:	eb 53       	subi	r30, 0x3B	; 59
 b38:	ff 4f       	sbci	r31, 0xFF	; 255
 b3a:	31 83       	std	Z+1, r19	; 0x01
 b3c:	20 83       	st	Z, r18
    AdTemp=0;
 b3e:	10 92 7e 00 	sts	0x007E, r1
 b42:	10 92 7d 00 	sts	0x007D, r1
    CtAd=CtAd0+2;
 b46:	80 91 66 00 	lds	r24, 0x0066
 b4a:	8e 5f       	subi	r24, 0xFE	; 254
 b4c:	80 93 c2 00 	sts	0x00C2, r24
    //if(NumberAd==11)
    NumberAd=NumberAdNew[NumberAd];
 b50:	80 91 85 00 	lds	r24, 0x0085
 b54:	88 2f       	mov	r24, r24
 b56:	90 e0       	ldi	r25, 0x00	; 0
 b58:	fc 01       	movw	r30, r24
 b5a:	ee 59       	subi	r30, 0x9E	; 158
 b5c:	ff 4f       	sbci	r31, 0xFF	; 255
 b5e:	80 81       	ld	r24, Z
 b60:	80 93 85 00 	sts	0x0085, r24
  }

  RegInt0=ADMUX;
 b64:	e7 e2       	ldi	r30, 0x27	; 39
 b66:	f0 e0       	ldi	r31, 0x00	; 0
 b68:	80 81       	ld	r24, Z
 b6a:	88 2f       	mov	r24, r24
 b6c:	90 e0       	ldi	r25, 0x00	; 0
 b6e:	9a 83       	std	Y+2, r25	; 0x02
 b70:	89 83       	std	Y+1, r24	; 0x01
  RegInt0 &=0xe0; // обнуление MUX4..0
 b72:	89 81       	ldd	r24, Y+1	; 0x01
 b74:	9a 81       	ldd	r25, Y+2	; 0x02
 b76:	80 7e       	andi	r24, 0xE0	; 224
 b78:	90 70       	andi	r25, 0x00	; 0
 b7a:	9a 83       	std	Y+2, r25	; 0x02
 b7c:	89 83       	std	Y+1, r24	; 0x01
  RegInt0 |=NumberAd; //выставление нового адреса канала ацп
 b7e:	80 91 85 00 	lds	r24, 0x0085
 b82:	28 2f       	mov	r18, r24
 b84:	30 e0       	ldi	r19, 0x00	; 0
 b86:	89 81       	ldd	r24, Y+1	; 0x01
 b88:	9a 81       	ldd	r25, Y+2	; 0x02
 b8a:	82 2b       	or	r24, r18
 b8c:	93 2b       	or	r25, r19
 b8e:	9a 83       	std	Y+2, r25	; 0x02
 b90:	89 83       	std	Y+1, r24	; 0x01
  ADMUX=RegInt0;
 b92:	e7 e2       	ldi	r30, 0x27	; 39
 b94:	f0 e0       	ldi	r31, 0x00	; 0
 b96:	89 81       	ldd	r24, Y+1	; 0x01
 b98:	80 83       	st	Z, r24

  ADCSRA |=(1<<ADSC); //start conversion
 b9a:	a6 e2       	ldi	r26, 0x26	; 38
 b9c:	b0 e0       	ldi	r27, 0x00	; 0
 b9e:	e6 e2       	ldi	r30, 0x26	; 38
 ba0:	f0 e0       	ldi	r31, 0x00	; 0
 ba2:	80 81       	ld	r24, Z
 ba4:	80 64       	ori	r24, 0x40	; 64
 ba6:	8c 93       	st	X, r24
}
 ba8:	0f 90       	pop	r0
 baa:	0f 90       	pop	r0
 bac:	cf 91       	pop	r28
 bae:	df 91       	pop	r29
 bb0:	ff 91       	pop	r31
 bb2:	ef 91       	pop	r30
 bb4:	bf 91       	pop	r27
 bb6:	af 91       	pop	r26
 bb8:	9f 91       	pop	r25
 bba:	8f 91       	pop	r24
 bbc:	5f 91       	pop	r21
 bbe:	4f 91       	pop	r20
 bc0:	3f 91       	pop	r19
 bc2:	2f 91       	pop	r18
 bc4:	0f 90       	pop	r0
 bc6:	0f be       	out	0x3f, r0	; 63
 bc8:	0f 90       	pop	r0
 bca:	1f 90       	pop	r1
 bcc:	18 95       	reti

00000bce <EEPROM_write>:

void EEPROM_write(unsigned int uiAddress, unsigned char ucData)
{
 bce:	df 93       	push	r29
 bd0:	cf 93       	push	r28
 bd2:	00 d0       	rcall	.+0      	; 0xbd4 <EEPROM_write+0x6>
 bd4:	0f 92       	push	r0
 bd6:	cd b7       	in	r28, 0x3d	; 61
 bd8:	de b7       	in	r29, 0x3e	; 62
 bda:	9a 83       	std	Y+2, r25	; 0x02
 bdc:	89 83       	std	Y+1, r24	; 0x01
 bde:	6b 83       	std	Y+3, r22	; 0x03
  while(EECR & (1<<EEWE)); //Ждать завершения предыдущей записи
 be0:	ec e3       	ldi	r30, 0x3C	; 60
 be2:	f0 e0       	ldi	r31, 0x00	; 0
 be4:	80 81       	ld	r24, Z
 be6:	88 2f       	mov	r24, r24
 be8:	90 e0       	ldi	r25, 0x00	; 0
 bea:	82 70       	andi	r24, 0x02	; 2
 bec:	90 70       	andi	r25, 0x00	; 0
 bee:	00 97       	sbiw	r24, 0x00	; 0
 bf0:	b9 f7       	brne	.-18     	; 0xbe0 <EEPROM_write+0x12>
  EEAR = uiAddress;        //Проинициализировать регистры
 bf2:	ee e3       	ldi	r30, 0x3E	; 62
 bf4:	f0 e0       	ldi	r31, 0x00	; 0
 bf6:	89 81       	ldd	r24, Y+1	; 0x01
 bf8:	9a 81       	ldd	r25, Y+2	; 0x02
 bfa:	91 83       	std	Z+1, r25	; 0x01
 bfc:	80 83       	st	Z, r24
  EEDR = ucData;
 bfe:	ed e3       	ldi	r30, 0x3D	; 61
 c00:	f0 e0       	ldi	r31, 0x00	; 0
 c02:	8b 81       	ldd	r24, Y+3	; 0x03
 c04:	80 83       	st	Z, r24
  EECR |= (1<<EEMWE);      //Установить флаг EEMWE
 c06:	ac e3       	ldi	r26, 0x3C	; 60
 c08:	b0 e0       	ldi	r27, 0x00	; 0
 c0a:	ec e3       	ldi	r30, 0x3C	; 60
 c0c:	f0 e0       	ldi	r31, 0x00	; 0
 c0e:	80 81       	ld	r24, Z
 c10:	84 60       	ori	r24, 0x04	; 4
 c12:	8c 93       	st	X, r24
  EECR |= (1<<EEWE);       //Начать запись в EEPROM
 c14:	ac e3       	ldi	r26, 0x3C	; 60
 c16:	b0 e0       	ldi	r27, 0x00	; 0
 c18:	ec e3       	ldi	r30, 0x3C	; 60
 c1a:	f0 e0       	ldi	r31, 0x00	; 0
 c1c:	80 81       	ld	r24, Z
 c1e:	82 60       	ori	r24, 0x02	; 2
 c20:	8c 93       	st	X, r24
}
 c22:	0f 90       	pop	r0
 c24:	0f 90       	pop	r0
 c26:	0f 90       	pop	r0
 c28:	cf 91       	pop	r28
 c2a:	df 91       	pop	r29
 c2c:	08 95       	ret

00000c2e <EEPROM_read>:

unsigned char EEPROM_read(unsigned int uiAddress)
{
 c2e:	df 93       	push	r29
 c30:	cf 93       	push	r28
 c32:	00 d0       	rcall	.+0      	; 0xc34 <EEPROM_read+0x6>
 c34:	cd b7       	in	r28, 0x3d	; 61
 c36:	de b7       	in	r29, 0x3e	; 62
 c38:	9a 83       	std	Y+2, r25	; 0x02
 c3a:	89 83       	std	Y+1, r24	; 0x01
  while(EECR & (1<<EEWE)); //Ждать завершения предыдущей записи
 c3c:	ec e3       	ldi	r30, 0x3C	; 60
 c3e:	f0 e0       	ldi	r31, 0x00	; 0
 c40:	80 81       	ld	r24, Z
 c42:	88 2f       	mov	r24, r24
 c44:	90 e0       	ldi	r25, 0x00	; 0
 c46:	82 70       	andi	r24, 0x02	; 2
 c48:	90 70       	andi	r25, 0x00	; 0
 c4a:	00 97       	sbiw	r24, 0x00	; 0
 c4c:	b9 f7       	brne	.-18     	; 0xc3c <EEPROM_read+0xe>
  EEAR = uiAddress;        //Проинициализировать регистр адреса
 c4e:	ee e3       	ldi	r30, 0x3E	; 62
 c50:	f0 e0       	ldi	r31, 0x00	; 0
 c52:	89 81       	ldd	r24, Y+1	; 0x01
 c54:	9a 81       	ldd	r25, Y+2	; 0x02
 c56:	91 83       	std	Z+1, r25	; 0x01
 c58:	80 83       	st	Z, r24
  EECR |= (1<<EERE);       //Выполнить чтение
 c5a:	ac e3       	ldi	r26, 0x3C	; 60
 c5c:	b0 e0       	ldi	r27, 0x00	; 0
 c5e:	ec e3       	ldi	r30, 0x3C	; 60
 c60:	f0 e0       	ldi	r31, 0x00	; 0
 c62:	80 81       	ld	r24, Z
 c64:	81 60       	ori	r24, 0x01	; 1
 c66:	8c 93       	st	X, r24
  return EEDR;
 c68:	ed e3       	ldi	r30, 0x3D	; 61
 c6a:	f0 e0       	ldi	r31, 0x00	; 0
 c6c:	80 81       	ld	r24, Z
}
 c6e:	0f 90       	pop	r0
 c70:	0f 90       	pop	r0
 c72:	cf 91       	pop	r28
 c74:	df 91       	pop	r29
 c76:	08 95       	ret

00000c78 <__udivmodsi4>:
 c78:	a1 e2       	ldi	r26, 0x21	; 33
 c7a:	1a 2e       	mov	r1, r26
 c7c:	aa 1b       	sub	r26, r26
 c7e:	bb 1b       	sub	r27, r27
 c80:	fd 01       	movw	r30, r26
 c82:	0d c0       	rjmp	.+26     	; 0xc9e <__udivmodsi4_ep>

00000c84 <__udivmodsi4_loop>:
 c84:	aa 1f       	adc	r26, r26
 c86:	bb 1f       	adc	r27, r27
 c88:	ee 1f       	adc	r30, r30
 c8a:	ff 1f       	adc	r31, r31
 c8c:	a2 17       	cp	r26, r18
 c8e:	b3 07       	cpc	r27, r19
 c90:	e4 07       	cpc	r30, r20
 c92:	f5 07       	cpc	r31, r21
 c94:	20 f0       	brcs	.+8      	; 0xc9e <__udivmodsi4_ep>
 c96:	a2 1b       	sub	r26, r18
 c98:	b3 0b       	sbc	r27, r19
 c9a:	e4 0b       	sbc	r30, r20
 c9c:	f5 0b       	sbc	r31, r21

00000c9e <__udivmodsi4_ep>:
 c9e:	66 1f       	adc	r22, r22
 ca0:	77 1f       	adc	r23, r23
 ca2:	88 1f       	adc	r24, r24
 ca4:	99 1f       	adc	r25, r25
 ca6:	1a 94       	dec	r1
 ca8:	69 f7       	brne	.-38     	; 0xc84 <__udivmodsi4_loop>
 caa:	60 95       	com	r22
 cac:	70 95       	com	r23
 cae:	80 95       	com	r24
 cb0:	90 95       	com	r25
 cb2:	9b 01       	movw	r18, r22
 cb4:	ac 01       	movw	r20, r24
 cb6:	bd 01       	movw	r22, r26
 cb8:	cf 01       	movw	r24, r30
 cba:	08 95       	ret

00000cbc <_exit>:
 cbc:	f8 94       	cli

00000cbe <__stop_program>:
 cbe:	ff cf       	rjmp	.-2      	; 0xcbe <__stop_program>
